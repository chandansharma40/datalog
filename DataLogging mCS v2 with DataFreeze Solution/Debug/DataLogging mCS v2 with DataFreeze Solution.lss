
DataLogging mCS v2 with DataFreeze Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000866  00800100  00001a78  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800966  00800966  00002372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002372  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f4f  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000542  00000000  00000000  00005433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000147f  00000000  00000000  00005975  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00006df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054e  00000000  00000000  0000725c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002186  00000000  00000000  000077aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3a c1       	rjmp	.+628    	; 0x2b2 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	19 e0       	ldi	r17, 0x09	; 9
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e7       	ldi	r30, 0x78	; 120
      a0:	fa e1       	ldi	r31, 0x1A	; 26
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 36       	cpi	r26, 0x66	; 102
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	a6 e6       	ldi	r26, 0x66	; 102
      b6:	b9 e0       	ldi	r27, 0x09	; 9
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a3 33       	cpi	r26, 0x33	; 51
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <main>
      c6:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <get_data>:
		return 1;
	}
	return 0;
}

void get_data(uint8_t system_on, char* responseimp,uint8_t  signal_status, uint8_t signal_strength,char* user,uint8_t flag_cooldown){
      cc:	8f 92       	push	r8
      ce:	9f 92       	push	r9
      d0:	bf 92       	push	r11
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	00 d0       	rcall	.+0      	; 0xe4 <get_data+0x18>
      e4:	00 d0       	rcall	.+0      	; 0xe6 <get_data+0x1a>
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	6b 01       	movw	r12, r22
      ee:	4a 83       	std	Y+2, r20	; 0x02
      f0:	2b 83       	std	Y+3, r18	; 0x03
      f2:	ec 82       	std	Y+4, r14	; 0x04
	
	int t=0,takedata=0,dataarrived=0;
	char dataimp,ch1[3],ch2[3];
	
	UART_0_puts("Fetching DATA...\r\n");
      f4:	80 e7       	ldi	r24, 0x70	; 112
      f6:	93 e0       	ldi	r25, 0x03	; 3
      f8:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
      fc:	e1 ec       	ldi	r30, 0xC1	; 193
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	80 61       	ori	r24, 0x10	; 16
     104:	80 83       	st	Z, r24
	return 0;
}

void get_data(uint8_t system_on, char* responseimp,uint8_t  signal_status, uint8_t signal_strength,char* user,uint8_t flag_cooldown){
	
	int t=0,takedata=0,dataarrived=0;
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
	UART_0_puts("Fetching DATA...\r\n");
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(1){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
     10e:	e0 ec       	ldi	r30, 0xC0	; 192
     110:	f0 e0       	ldi	r31, 0x00	; 0
		dataimp = UDR0;
     112:	0f 2e       	mov	r0, r31
     114:	f6 ec       	ldi	r31, 0xC6	; 198
     116:	8f 2e       	mov	r8, r31
     118:	91 2c       	mov	r9, r1
     11a:	f0 2d       	mov	r31, r0
			responseimp[t]=dataimp;
			t++;
		}
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
			takedata=1;
     11c:	bb 24       	eor	r11, r11
     11e:	b3 94       	inc	r11
     120:	e1 2c       	mov	r14, r1
			t=0;
     122:	f1 2c       	mov	r15, r1
     124:	90 e0       	ldi	r25, 0x00	; 0
	UART_0_puts("Fetching DATA...\r\n");
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(1){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
     126:	80 81       	ld	r24, Z
     128:	88 23       	and	r24, r24
     12a:	ec f7       	brge	.-6      	; 0x126 <get_data+0x5a>
		dataimp = UDR0;
     12c:	d4 01       	movw	r26, r8
     12e:	8c 91       	ld	r24, X
		
		// If last character # is received..
		if (((dataimp == 0x23) && (takedata == 1)) || t>=511){  //  #=0x23
     130:	83 32       	cpi	r24, 0x23	; 35
     132:	29 f4       	brne	.+10     	; 0x13e <get_data+0x72>
     134:	41 30       	cpi	r20, 0x01	; 1
     136:	51 05       	cpc	r21, r1
     138:	09 f0       	breq	.+2      	; 0x13c <get_data+0x70>
     13a:	a5 c0       	rjmp	.+330    	; 0x286 <get_data+0x1ba>
     13c:	05 c0       	rjmp	.+10     	; 0x148 <get_data+0x7c>
     13e:	2f 3f       	cpi	r18, 0xFF	; 255
     140:	b1 e0       	ldi	r27, 0x01	; 1
     142:	3b 07       	cpc	r19, r27
     144:	0c f4       	brge	.+2      	; 0x148 <get_data+0x7c>
     146:	88 c0       	rjmp	.+272    	; 0x258 <get_data+0x18c>
			//  Reception Disable
			cbi(UCSR0B,RXEN0);
     148:	e1 ec       	ldi	r30, 0xC1	; 193
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	8f 7e       	andi	r24, 0xEF	; 239
     150:	80 83       	st	Z, r24
			responseimp[t]='\0';
     152:	f6 01       	movw	r30, r12
     154:	e2 0f       	add	r30, r18
     156:	f3 1f       	adc	r31, r19
     158:	10 82       	st	Z, r1
			
			takedata = 0;
			if (strlen(responseimp)<10){
     15a:	f6 01       	movw	r30, r12
     15c:	01 90       	ld	r0, Z+
     15e:	00 20       	and	r0, r0
     160:	e9 f7       	brne	.-6      	; 0x15c <get_data+0x90>
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	ec 19       	sub	r30, r12
     166:	fd 09       	sbc	r31, r13
     168:	3a 97       	sbiw	r30, 0x0a	; 10
     16a:	78 f4       	brcc	.+30     	; 0x18a <get_data+0xbe>
				get_data(&system_on,responseimp,&signal_status,&signal_strength,user,&flag_cooldown);
     16c:	7e 01       	movw	r14, r28
     16e:	24 e0       	ldi	r18, 0x04	; 4
     170:	e2 0e       	add	r14, r18
     172:	f1 1c       	adc	r15, r1
     174:	9e 01       	movw	r18, r28
     176:	2d 5f       	subi	r18, 0xFD	; 253
     178:	3f 4f       	sbci	r19, 0xFF	; 255
     17a:	ae 01       	movw	r20, r28
     17c:	4e 5f       	subi	r20, 0xFE	; 254
     17e:	5f 4f       	sbci	r21, 0xFF	; 255
     180:	b6 01       	movw	r22, r12
     182:	8c 2f       	mov	r24, r28
     184:	8f 5f       	subi	r24, 0xFF	; 255
     186:	a2 df       	rcall	.-188    	; 0xcc <get_data>
				break;
     188:	84 c0       	rjmp	.+264    	; 0x292 <get_data+0x1c6>
			}
			if (flag_datafreeze==1 && flag_cooldown==0x88){
     18a:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <flag_datafreeze>
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	09 f0       	breq	.+2      	; 0x194 <get_data+0xc8>
     192:	7f c0       	rjmp	.+254    	; 0x292 <get_data+0x1c6>
     194:	8c 81       	ldd	r24, Y+4	; 0x04
     196:	88 38       	cpi	r24, 0x88	; 136
     198:	09 f0       	breq	.+2      	; 0x19c <get_data+0xd0>
     19a:	7b c0       	rjmp	.+246    	; 0x292 <get_data+0x1c6>
				//Copying 68 bytes of responseimp to dataFreeze String for Auto Reset
				strncpy(str_datafreeze_main,str_datafreeze,68);
     19c:	44 e4       	ldi	r20, 0x44	; 68
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	6f ec       	ldi	r22, 0xCF	; 207
     1a2:	79 e0       	ldi	r23, 0x09	; 9
     1a4:	8b e6       	ldi	r24, 0x6B	; 107
     1a6:	99 e0       	ldi	r25, 0x09	; 9
     1a8:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strncpy>
				strncpy(str_datafreeze,responseimp,68);
     1ac:	44 e4       	ldi	r20, 0x44	; 68
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	b6 01       	movw	r22, r12
     1b2:	8f ec       	ldi	r24, 0xCF	; 207
     1b4:	99 e0       	ldi	r25, 0x09	; 9
     1b6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <strncpy>
				
				UART_0_puts(str_datafreeze_main);
     1ba:	8b e6       	ldi	r24, 0x6B	; 107
     1bc:	99 e0       	ldi	r25, 0x09	; 9
     1be:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
				UART_0_puts("\r\n");
     1c2:	8f eb       	ldi	r24, 0xBF	; 191
     1c4:	95 e0       	ldi	r25, 0x05	; 5
     1c6:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
				UART_0_puts(str_datafreeze);
     1ca:	8f ec       	ldi	r24, 0xCF	; 207
     1cc:	99 e0       	ldi	r25, 0x09	; 9
     1ce:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
				UART_0_puts("\r\n");
     1d2:	8f eb       	ldi	r24, 0xBF	; 191
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
				UART_0_puts("Counter =");
     1da:	83 e8       	ldi	r24, 0x83	; 131
     1dc:	93 e0       	ldi	r25, 0x03	; 3
     1de:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
				UART_0_putc(counter_datafreeze+48);
     1e2:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <counter_datafreeze>
     1e6:	80 5d       	subi	r24, 0xD0	; 208
     1e8:	0e 94 41 0c 	call	0x1882	; 0x1882 <UART_0_putc>
				UART_0_puts("\r\n");
     1ec:	8f eb       	ldi	r24, 0xBF	; 191
     1ee:	95 e0       	ldi	r25, 0x05	; 5
     1f0:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	6f ef       	ldi	r22, 0xFF	; 255
     1f6:	83 ed       	ldi	r24, 0xD3	; 211
     1f8:	90 e3       	ldi	r25, 0x30	; 48
     1fa:	61 50       	subi	r22, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <get_data+0x12e>
     202:	00 c0       	rjmp	.+0      	; 0x204 <get_data+0x138>
     204:	00 00       	nop
				_delay_ms(2000);
	
				if (strcmp(str_datafreeze_main,str_datafreeze)==0){
     206:	6f ec       	ldi	r22, 0xCF	; 207
     208:	79 e0       	ldi	r23, 0x09	; 9
     20a:	8b e6       	ldi	r24, 0x6B	; 107
     20c:	99 e0       	ldi	r25, 0x09	; 9
     20e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     212:	89 2b       	or	r24, r25
     214:	31 f4       	brne	.+12     	; 0x222 <get_data+0x156>
					counter_datafreeze++;
     216:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <counter_datafreeze>
     21a:	8f 5f       	subi	r24, 0xFF	; 255
     21c:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <counter_datafreeze>
     220:	02 c0       	rjmp	.+4      	; 0x226 <get_data+0x15a>
					}else{
					counter_datafreeze=0;
     222:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <counter_datafreeze>
				}
				UART_0_puts("Data Recieved...\r\n");
     226:	8d e8       	ldi	r24, 0x8D	; 141
     228:	93 e0       	ldi	r25, 0x03	; 3
     22a:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
				if (counter_datafreeze>8){// 8 for reset after 10 data points
     22e:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <counter_datafreeze>
     232:	89 30       	cpi	r24, 0x09	; 9
     234:	70 f1       	brcs	.+92     	; 0x292 <get_data+0x1c6>
					UART_0_puts("RESETTING...\r\n");
     236:	80 ea       	ldi	r24, 0xA0	; 160
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
     23e:	af ef       	ldi	r26, 0xFF	; 255
     240:	b1 e1       	ldi	r27, 0x11	; 17
     242:	2a e7       	ldi	r18, 0x7A	; 122
     244:	a1 50       	subi	r26, 0x01	; 1
     246:	b0 40       	sbci	r27, 0x00	; 0
     248:	20 40       	sbci	r18, 0x00	; 0
     24a:	e1 f7       	brne	.-8      	; 0x244 <get_data+0x178>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <get_data+0x182>
     24e:	00 00       	nop
					_delay_ms(5000);
					counter_datafreeze=0;
     250:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <counter_datafreeze>
					//Reset the PCB Stack
					cbi(PORTB,6);
     254:	2e 98       	cbi	0x05, 6	; 5
     256:	1d c0       	rjmp	.+58     	; 0x292 <get_data+0x1c6>
			}
			
			break;
		}
		// Continue taking data
		if (takedata==1){
     258:	41 30       	cpi	r20, 0x01	; 1
     25a:	51 05       	cpc	r21, r1
     25c:	41 f4       	brne	.+16     	; 0x26e <get_data+0x1a2>
			responseimp[t]=dataimp;
     25e:	b6 01       	movw	r22, r12
     260:	62 0f       	add	r22, r18
     262:	73 1f       	adc	r23, r19
     264:	db 01       	movw	r26, r22
     266:	8c 93       	st	X, r24
			t++;
     268:	2f 5f       	subi	r18, 0xFF	; 255
     26a:	3f 4f       	sbci	r19, 0xFF	; 255
     26c:	5c cf       	rjmp	.-328    	; 0x126 <get_data+0x5a>
		}
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
     26e:	84 32       	cpi	r24, 0x24	; 36
     270:	09 f0       	breq	.+2      	; 0x274 <get_data+0x1a8>
     272:	59 cf       	rjmp	.-334    	; 0x126 <get_data+0x5a>
     274:	41 15       	cp	r20, r1
     276:	51 05       	cpc	r21, r1
     278:	09 f0       	breq	.+2      	; 0x27c <get_data+0x1b0>
     27a:	55 cf       	rjmp	.-342    	; 0x126 <get_data+0x5a>
			takedata=1;
     27c:	4b 2d       	mov	r20, r11
     27e:	5e 2d       	mov	r21, r14
			t=0;
     280:	2f 2d       	mov	r18, r15
     282:	39 2f       	mov	r19, r25
     284:	50 cf       	rjmp	.-352    	; 0x126 <get_data+0x5a>
	while(1){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
		dataimp = UDR0;
		
		// If last character # is received..
		if (((dataimp == 0x23) && (takedata == 1)) || t>=511){  //  #=0x23
     286:	2f 3f       	cpi	r18, 0xFF	; 255
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	3b 07       	cpc	r19, r27
     28c:	0c f4       	brge	.+2      	; 0x290 <get_data+0x1c4>
     28e:	4b cf       	rjmp	.-362    	; 0x126 <get_data+0x5a>
     290:	5b cf       	rjmp	.-330    	; 0x148 <get_data+0x7c>
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
			takedata=1;
			t=0;
		}
	}
}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	bf 90       	pop	r11
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <__vector_15>:
		return 3;
	}
}

ISR(TIMER1_OVF_vect)
{
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	0b b6       	in	r0, 0x3b	; 59
     2be:	0f 92       	push	r0
     2c0:	8f 93       	push	r24
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
	overflowcount++;
     2c6:	80 91 69 09 	lds	r24, 0x0969	; 0x800969 <overflowcount>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (overflowcount>=10){  //  To account for 20 secs
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_15+0x24>
	}
}

ISR(TIMER1_OVF_vect)
{
	overflowcount++;
     2d0:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <overflowcount>
     2d4:	0a c0       	rjmp	.+20     	; 0x2ea <__vector_15+0x38>
	
	if (overflowcount>=10){  //  To account for 20 secs
		overflowcount = 0;
     2d6:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <overflowcount>
		skip = 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <skip>
		cbi(TCCR1B,CS12);
     2e0:	e1 e8       	ldi	r30, 0x81	; 129
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8b 7f       	andi	r24, 0xFB	; 251
     2e8:	80 83       	st	Z, r24
	}
}
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	8f 91       	pop	r24
     2f0:	0f 90       	pop	r0
     2f2:	0b be       	out	0x3b, r0	; 59
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <start_timer>:

void start_timer(){
	skip = 0;
     2fe:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <skip>
	TCNT1 = 0;
     302:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     306:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sbi(TCCR1B,CS12);
     30a:	e1 e8       	ldi	r30, 0x81	; 129
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	84 60       	ori	r24, 0x04	; 4
     312:	80 83       	st	Z, r24
     314:	08 95       	ret

00000316 <wait_for_data>:
	_delay_ms(20000);
}

uint8_t wait_for_data(){
	// Start Timer
	start_timer();
     316:	f3 df       	rcall	.-26     	; 0x2fe <start_timer>
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
     318:	e8 ec       	ldi	r30, 0xC8	; 200
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	08 c0       	rjmp	.+16     	; 0x32e <wait_for_data+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	8a e1       	ldi	r24, 0x1A	; 26
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <wait_for_data+0xa>
     324:	00 c0       	rjmp	.+0      	; 0x326 <wait_for_data+0x10>
		_delay_us(10);
		if (skip==1){
     326:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <skip>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	51 f0       	breq	.+20     	; 0x342 <wait_for_data+0x2c>
uint8_t wait_for_data(){
	// Start Timer
	start_timer();
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
     32e:	80 81       	ld	r24, Z
     330:	88 23       	and	r24, r24
     332:	ac f7       	brge	.-22     	; 0x31e <wait_for_data+0x8>
			return 0;  //  No data; timer expired
		}
	}
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
     334:	e1 e8       	ldi	r30, 0x81	; 129
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	8b 7f       	andi	r24, 0xFB	; 251
     33c:	80 83       	st	Z, r24
	
	return 1;  //  Data arrived
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	08 95       	ret
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
		_delay_us(10);
		if (skip==1){
			return 0;  //  No data; timer expired
     342:	80 e0       	ldi	r24, 0x00	; 0
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
	
	return 1;  //  Data arrived
}
     344:	08 95       	ret

00000346 <sim900_response>:
	}
	
	return 0;
}

void sim900_response(char* response){
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	7c 01       	movw	r14, r24
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
     352:	c0 e3       	ldi	r28, 0x30	; 48
		if (dataarrived==0){
			UART_0_puts("No Response...\r\n");
			UART_0_puts("Re-Checking...\r\n");
			break;
		}
		initial[1]=UDR1;
     354:	0e ec       	ldi	r16, 0xCE	; 206
     356:	10 e0       	ldi	r17, 0x00	; 0
     358:	03 c0       	rjmp	.+6      	; 0x360 <sim900_response+0x1a>
     35a:	c9 2f       	mov	r28, r25
     35c:	01 c0       	rjmp	.+2      	; 0x360 <sim900_response+0x1a>
     35e:	c9 2f       	mov	r28, r25
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
		
	while(!(initial[0]==0x0D && initial[1]==0x0A)){
		initial[0]=initial[1];
		dataarrived=wait_for_data();
     360:	da df       	rcall	.-76     	; 0x316 <wait_for_data>
		if (dataarrived==0){
     362:	81 11       	cpse	r24, r1
     364:	0c c0       	rjmp	.+24     	; 0x37e <sim900_response+0x38>
			UART_0_puts("No Response...\r\n");
     366:	8f ea       	ldi	r24, 0xAF	; 175
     368:	93 e0       	ldi	r25, 0x03	; 3
     36a:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
			UART_0_puts("Re-Checking...\r\n");
     36e:	80 ec       	ldi	r24, 0xC0	; 192
     370:	93 e0       	ldi	r25, 0x03	; 3
     372:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
     376:	c0 e0       	ldi	r28, 0x00	; 0
	while(1){		
		dataarrived=wait_for_data();
		if (dataarrived==0){
			break;
		}
		response[i]=UDR1;
     378:	0e ec       	ldi	r16, 0xCE	; 206
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	07 c0       	rjmp	.+14     	; 0x38c <sim900_response+0x46>
		if (dataarrived==0){
			UART_0_puts("No Response...\r\n");
			UART_0_puts("Re-Checking...\r\n");
			break;
		}
		initial[1]=UDR1;
     37e:	f8 01       	movw	r30, r16
     380:	90 81       	ld	r25, Z

void sim900_response(char* response){
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
		
	while(!(initial[0]==0x0D && initial[1]==0x0A)){
     382:	cd 30       	cpi	r28, 0x0D	; 13
     384:	51 f7       	brne	.-44     	; 0x35a <sim900_response+0x14>
     386:	9a 30       	cpi	r25, 0x0A	; 10
     388:	51 f7       	brne	.-44     	; 0x35e <sim900_response+0x18>
     38a:	f5 cf       	rjmp	.-22     	; 0x376 <sim900_response+0x30>
		}
		initial[1]=UDR1;
	}

	while(1){		
		dataarrived=wait_for_data();
     38c:	c4 df       	rcall	.-120    	; 0x316 <wait_for_data>
		if (dataarrived==0){
     38e:	88 23       	and	r24, r24
     390:	51 f0       	breq	.+20     	; 0x3a6 <sim900_response+0x60>
			break;
		}
		response[i]=UDR1;
     392:	f8 01       	movw	r30, r16
     394:	90 81       	ld	r25, Z
     396:	f7 01       	movw	r30, r14
     398:	ec 0f       	add	r30, r28
     39a:	f1 1d       	adc	r31, r1
     39c:	90 83       	st	Z, r25
		if(response[i]==0x0D){
     39e:	9d 30       	cpi	r25, 0x0D	; 13
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <sim900_response+0x60>
			break;
		}
		i++;
     3a2:	cf 5f       	subi	r28, 0xFF	; 255
	}
     3a4:	f3 cf       	rjmp	.-26     	; 0x38c <sim900_response+0x46>

	//  Terminating string
	response[i]="\0";
     3a6:	f7 01       	movw	r30, r14
     3a8:	ec 0f       	add	r30, r28
     3aa:	f1 1d       	adc	r31, r1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	80 83       	st	Z, r24

	//  Reception Disable
	cbi(UCSR1B,RXEN1);
     3b2:	e9 ec       	ldi	r30, 0xC9	; 201
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	8f 7e       	andi	r24, 0xEF	; 239
     3ba:	80 83       	st	Z, r24
} 
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <sim900_cmd>:
		UART_0_puts("APN not found...\r\n");
		return 0;
	}
}

void sim900_cmd(char* str,char* response){	
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
     3d2:	8b 01       	movw	r16, r22
	uint8_t i=0;
	char initial[]={'0','0'};

	//  Send Command
	while( *str != '\0' ){
     3d4:	88 81       	ld	r24, Y
     3d6:	88 23       	and	r24, r24
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <sim900_cmd+0x1e>
     3da:	21 96       	adiw	r28, 0x01	; 1
		UART_1_putc( *str++ );
     3dc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <UART_1_putc>
void sim900_cmd(char* str,char* response){	
	uint8_t i=0;
	char initial[]={'0','0'};

	//  Send Command
	while( *str != '\0' ){
     3e0:	89 91       	ld	r24, Y+
     3e2:	81 11       	cpse	r24, r1
     3e4:	fb cf       	rjmp	.-10     	; 0x3dc <sim900_cmd+0x14>
		UART_1_putc( *str++ );
	}
	
	//  Reception Enable
	sbi(UCSR1B,RXEN1);
     3e6:	e9 ec       	ldi	r30, 0xC9	; 201
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	90 81       	ld	r25, Z
     3ec:	90 61       	ori	r25, 0x10	; 16
     3ee:	90 83       	st	Z, r25
	
	sim900_response(response);
     3f0:	c8 01       	movw	r24, r16
     3f2:	a9 df       	rcall	.-174    	; 0x346 <sim900_response>
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <get_apn>:
		}
		
	}
}
 
uint8_t get_apn(char* apn,char* user){
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	c8 5c       	subi	r28, 0xC8	; 200
     410:	d1 09       	sbc	r29, r1
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	7c 01       	movw	r14, r24
     41e:	8b 01       	movw	r16, r22
	 
	uint8_t i=0,p=0;
	char simresponse[200];
	
	UART_0_puts("Checking SIM...\r\n");
     420:	81 ed       	ldi	r24, 0xD1	; 209
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	// SIM900 Echo disabled in response
	UART_1_puts("ATE0\r\n\0");  
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 6f 0c 	call	0x18de	; 0x18de <UART_1_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	2f ef       	ldi	r18, 0xFF	; 255
     432:	84 e3       	ldi	r24, 0x34	; 52
     434:	9c e0       	ldi	r25, 0x0C	; 12
     436:	21 50       	subi	r18, 0x01	; 1
     438:	80 40       	sbci	r24, 0x00	; 0
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(500);
	
	// SIM900 module check
	sim900_cmd("AT\r\n\0",simresponse);
     442:	be 01       	movw	r22, r28
     444:	6f 5f       	subi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	8a e0       	ldi	r24, 0x0A	; 10
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	bd df       	rcall	.-134    	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")!=0){
     44e:	60 e1       	ldi	r22, 0x10	; 16
     450:	71 e0       	ldi	r23, 0x01	; 1
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     45a:	89 2b       	or	r24, r25
     45c:	51 f0       	breq	.+20     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
		UART_0_puts("No Response...\r\n");
     45e:	8f ea       	ldi	r24, 0xAF	; 175
     460:	93 e0       	ldi	r25, 0x03	; 3
     462:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("Rechecking...\r\n");
     466:	83 ee       	ldi	r24, 0xE3	; 227
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	93 c1       	rjmp	.+806    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	UART_0_puts("SIM Checked OK...\r\n");
     472:	83 ef       	ldi	r24, 0xF3	; 243
     474:	93 e0       	ldi	r25, 0x03	; 3
     476:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	UART_0_puts("Checking SimCard...\r\n");
     47a:	87 e0       	ldi	r24, 0x07	; 7
     47c:	94 e0       	ldi	r25, 0x04	; 4
     47e:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	
	// To check if SIM card is present	 
	sim900_cmd("AT+CSMINS?\r\n\0",simresponse); 
     482:	be 01       	movw	r22, r28
     484:	6f 5f       	subi	r22, 0xFF	; 255
     486:	7f 4f       	sbci	r23, 0xFF	; 255
     488:	84 e1       	ldi	r24, 0x14	; 20
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9d df       	rcall	.-198    	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"+CSMINS: 0\,1\0")!=0){
     48e:	62 e2       	ldi	r22, 0x22	; 34
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     49a:	89 2b       	or	r24, r25
     49c:	51 f0       	breq	.+20     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
		UART_0_puts("No Response...\r\n");
     49e:	8f ea       	ldi	r24, 0xAF	; 175
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("Rechecking...\r\n");
     4a6:	83 ee       	ldi	r24, 0xE3	; 227
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 0;
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	73 c1       	rjmp	.+742    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	UART_0_puts("SimCard Present...\r\n");
     4b2:	8d e1       	ldi	r24, 0x1D	; 29
     4b4:	94 e0       	ldi	r25, 0x04	; 4
     4b6:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	UART_0_puts("Checking SIMCARD Registration...\r\n");
     4ba:	82 e3       	ldi	r24, 0x32	; 50
     4bc:	94 e0       	ldi	r25, 0x04	; 4
     4be:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	
	// To check if SIM card is registered
	sim900_cmd("AT+CREG?\r\n\0",simresponse);  
     4c2:	be 01       	movw	r22, r28
     4c4:	6f 5f       	subi	r22, 0xFF	; 255
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	80 e3       	ldi	r24, 0x30	; 48
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	7d df       	rcall	.-262    	; 0x3c8 <sim900_cmd>
	if (!((strcmp(simresponse,"+CREG: 0\,1\0")==0) || (strcmp(simresponse,"+CREG: 0\,5\0")==0))){
     4ce:	6c e3       	ldi	r22, 0x3C	; 60
     4d0:	71 e0       	ldi	r23, 0x01	; 1
     4d2:	ce 01       	movw	r24, r28
     4d4:	01 96       	adiw	r24, 0x01	; 1
     4d6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     4da:	89 2b       	or	r24, r25
     4dc:	91 f0       	breq	.+36     	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
     4de:	68 e4       	ldi	r22, 0x48	; 72
     4e0:	71 e0       	ldi	r23, 0x01	; 1
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     4ea:	89 2b       	or	r24, r25
     4ec:	51 f0       	breq	.+20     	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
		UART_0_puts("No Response...\r\n");
     4ee:	8f ea       	ldi	r24, 0xAF	; 175
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("Rechecking...\r\n");
     4f6:	83 ee       	ldi	r24, 0xE3	; 227
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 0;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	4b c1       	rjmp	.+662    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	UART_0_puts("SimCard Registered OK...\r\n");
     502:	85 e5       	ldi	r24, 0x55	; 85
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
     50a:	be 01       	movw	r22, r28
     50c:	6f 5f       	subi	r22, 0xFF	; 255
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	84 e5       	ldi	r24, 0x54	; 84
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	59 df       	rcall	.-334    	; 0x3c8 <sim900_cmd>
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	82 32       	cpi	r24, 0x22	; 34
     51a:	41 f0       	breq	.+16     	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     51c:	fe 01       	movw	r30, r28
     51e:	32 96       	adiw	r30, 0x02	; 2
     520:	20 e0       	ldi	r18, 0x00	; 0
		i++;
     522:	2f 5f       	subi	r18, 0xFF	; 255
	}
	UART_0_puts("SimCard Registered OK...\r\n");
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
     524:	81 91       	ld	r24, Z+
     526:	82 32       	cpi	r24, 0x22	; 34
     528:	e1 f7       	brne	.-8      	; 0x522 <__FUSE_REGION_LENGTH__+0x122>
     52a:	01 c0       	rjmp	.+2      	; 0x52e <__FUSE_REGION_LENGTH__+0x12e>
		return 0;
	}
	UART_0_puts("SimCard Registered OK...\r\n");
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
     52c:	20 e0       	ldi	r18, 0x00	; 0
	while (simresponse[i]!='\"' && i<200){
		i++;
	}
	i++;
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	92 0f       	add	r25, r18
	while (simresponse[i]!='\"' && p<30){
     532:	fe 01       	movw	r30, r28
     534:	e9 0f       	add	r30, r25
     536:	f1 1d       	adc	r31, r1
     538:	31 81       	ldd	r19, Z+1	; 0x01
     53a:	32 32       	cpi	r19, 0x22	; 34
     53c:	99 f0       	breq	.+38     	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
     53e:	f8 01       	movw	r30, r16
     540:	4f e1       	ldi	r20, 0x1F	; 31
     542:	42 0f       	add	r20, r18
		user[p]=simresponse[i];
     544:	31 93       	st	Z+, r19
		p++;i++;
     546:	89 2f       	mov	r24, r25
     548:	82 1b       	sub	r24, r18
     54a:	9f 5f       	subi	r25, 0xFF	; 255
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
		i++;
	}
	i++;
	while (simresponse[i]!='\"' && p<30){
     54c:	a1 e0       	ldi	r26, 0x01	; 1
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	ac 0f       	add	r26, r28
     552:	bd 1f       	adc	r27, r29
     554:	a9 0f       	add	r26, r25
     556:	b1 1d       	adc	r27, r1
     558:	3c 91       	ld	r19, X
     55a:	32 32       	cpi	r19, 0x22	; 34
     55c:	21 f0       	breq	.+8      	; 0x566 <__FUSE_REGION_LENGTH__+0x166>
     55e:	94 13       	cpse	r25, r20
     560:	f1 cf       	rjmp	.-30     	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
     562:	01 c0       	rjmp	.+2      	; 0x566 <__FUSE_REGION_LENGTH__+0x166>
		return 0;
	}
	UART_0_puts("SimCard Registered OK...\r\n");
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
     564:	80 e0       	ldi	r24, 0x00	; 0
	i++;
	while (simresponse[i]!='\"' && p<30){
		user[p]=simresponse[i];
		p++;i++;
	}
	user[p]='\0';
     566:	f8 01       	movw	r30, r16
     568:	e8 0f       	add	r30, r24
     56a:	f1 1d       	adc	r31, r1
     56c:	10 82       	st	Z, r1
	UART_0_puts("SIM network provider...");
     56e:	80 e7       	ldi	r24, 0x70	; 112
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	UART_0_puts(user);
     576:	c8 01       	movw	r24, r16
     578:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	UART_0_puts("\r\n");
     57c:	8f eb       	ldi	r24, 0xBF	; 191
     57e:	95 e0       	ldi	r25, 0x05	; 5
     580:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	
	//APN Compare and Assignment
	if (strcmp(user,"Hutch\0")==0){
     584:	60 e6       	ldi	r22, 0x60	; 96
     586:	71 e0       	ldi	r23, 0x01	; 1
     588:	c8 01       	movw	r24, r16
     58a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     58e:	89 2b       	or	r24, r25
     590:	b1 f4       	brne	.+44     	; 0x5be <__FUSE_REGION_LENGTH__+0x1be>
		strcpy(apn,"www");
     592:	87 e7       	ldi	r24, 0x77	; 119
     594:	97 e7       	ldi	r25, 0x77	; 119
     596:	a7 e7       	ldi	r26, 0x77	; 119
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	f7 01       	movw	r30, r14
     59c:	80 83       	st	Z, r24
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	a2 83       	std	Z+2, r26	; 0x02
     5a2:	b3 83       	std	Z+3, r27	; 0x03
		UART_0_puts("APN...");
     5a4:	88 e8       	ldi	r24, 0x88	; 136
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     5ac:	c7 01       	movw	r24, r14
     5ae:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     5b2:	8f eb       	ldi	r24, 0xBF	; 191
     5b4:	95 e0       	ldi	r25, 0x05	; 5
     5b6:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	ed c0       	rjmp	.+474    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if ((strcmp(user,"Vodafone\0")==0) || (strcasecmp(user,"Vodafone IN\0")==0)){
     5be:	67 e6       	ldi	r22, 0x67	; 103
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	c8 01       	movw	r24, r16
     5c4:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     5c8:	89 2b       	or	r24, r25
     5ca:	39 f0       	breq	.+14     	; 0x5da <__FUSE_REGION_LENGTH__+0x1da>
     5cc:	61 e7       	ldi	r22, 0x71	; 113
     5ce:	71 e0       	ldi	r23, 0x01	; 1
     5d0:	c8 01       	movw	r24, r16
     5d2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <strcasecmp>
     5d6:	89 2b       	or	r24, r25
     5d8:	b1 f4       	brne	.+44     	; 0x606 <__FUSE_REGION_LENGTH__+0x206>
		strcpy(apn,"www");
     5da:	87 e7       	ldi	r24, 0x77	; 119
     5dc:	97 e7       	ldi	r25, 0x77	; 119
     5de:	a7 e7       	ldi	r26, 0x77	; 119
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	f7 01       	movw	r30, r14
     5e4:	80 83       	st	Z, r24
     5e6:	91 83       	std	Z+1, r25	; 0x01
     5e8:	a2 83       	std	Z+2, r26	; 0x02
     5ea:	b3 83       	std	Z+3, r27	; 0x03
		UART_0_puts("APN...");
     5ec:	88 e8       	ldi	r24, 0x88	; 136
     5ee:	94 e0       	ldi	r25, 0x04	; 4
     5f0:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     5f4:	c7 01       	movw	r24, r14
     5f6:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     5fa:	8f eb       	ldi	r24, 0xBF	; 191
     5fc:	95 e0       	ldi	r25, 0x05	; 5
     5fe:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	c9 c0       	rjmp	.+402    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if ((strcmp(user,"airtel\0")==0) || (strcmp(user,"Airtel\0")==0)){
     606:	6e e7       	ldi	r22, 0x7E	; 126
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	c8 01       	movw	r24, r16
     60c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     610:	89 2b       	or	r24, r25
     612:	39 f0       	breq	.+14     	; 0x622 <__FUSE_REGION_LENGTH__+0x222>
     614:	66 e8       	ldi	r22, 0x86	; 134
     616:	71 e0       	ldi	r23, 0x01	; 1
     618:	c8 01       	movw	r24, r16
     61a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     61e:	89 2b       	or	r24, r25
     620:	a9 f4       	brne	.+42     	; 0x64c <__FUSE_REGION_LENGTH__+0x24c>
		strcpy(apn,"airtelgprs.com");
     622:	8f e0       	ldi	r24, 0x0F	; 15
     624:	ef e8       	ldi	r30, 0x8F	; 143
     626:	f4 e0       	ldi	r31, 0x04	; 4
     628:	d7 01       	movw	r26, r14
     62a:	01 90       	ld	r0, Z+
     62c:	0d 92       	st	X+, r0
     62e:	8a 95       	dec	r24
     630:	e1 f7       	brne	.-8      	; 0x62a <__FUSE_REGION_LENGTH__+0x22a>
		UART_0_puts("APN...");
     632:	88 e8       	ldi	r24, 0x88	; 136
     634:	94 e0       	ldi	r25, 0x04	; 4
     636:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     63a:	c7 01       	movw	r24, r14
     63c:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     640:	8f eb       	ldi	r24, 0xBF	; 191
     642:	95 e0       	ldi	r25, 0x05	; 5
     644:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	a6 c0       	rjmp	.+332    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if((strcmp(user,"CellOne\0")==0)||(strcmp(user,"BSNL\0")==0)||(strcmp(user,"BSNL 3G\0")==0)){
     64c:	6e e8       	ldi	r22, 0x8E	; 142
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	c8 01       	movw	r24, r16
     652:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     656:	89 2b       	or	r24, r25
     658:	71 f0       	breq	.+28     	; 0x676 <__FUSE_REGION_LENGTH__+0x276>
     65a:	67 e9       	ldi	r22, 0x97	; 151
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	c8 01       	movw	r24, r16
     660:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     664:	89 2b       	or	r24, r25
     666:	39 f0       	breq	.+14     	; 0x676 <__FUSE_REGION_LENGTH__+0x276>
     668:	6d e9       	ldi	r22, 0x9D	; 157
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	c8 01       	movw	r24, r16
     66e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     672:	89 2b       	or	r24, r25
     674:	a9 f4       	brne	.+42     	; 0x6a0 <__FUSE_REGION_LENGTH__+0x2a0>
		strcpy(apn,"bsnlenet");
     676:	89 e0       	ldi	r24, 0x09	; 9
     678:	ee e9       	ldi	r30, 0x9E	; 158
     67a:	f4 e0       	ldi	r31, 0x04	; 4
     67c:	d7 01       	movw	r26, r14
     67e:	01 90       	ld	r0, Z+
     680:	0d 92       	st	X+, r0
     682:	8a 95       	dec	r24
     684:	e1 f7       	brne	.-8      	; 0x67e <__FUSE_REGION_LENGTH__+0x27e>
		UART_0_puts("APN...");
     686:	88 e8       	ldi	r24, 0x88	; 136
     688:	94 e0       	ldi	r25, 0x04	; 4
     68a:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     68e:	c7 01       	movw	r24, r14
     690:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     694:	8f eb       	ldi	r24, 0xBF	; 191
     696:	95 e0       	ldi	r25, 0x05	; 5
     698:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	7c c0       	rjmp	.+248    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if(strcmp(user,"Reliance\0")==0){
     6a0:	66 ea       	ldi	r22, 0xA6	; 166
     6a2:	71 e0       	ldi	r23, 0x01	; 1
     6a4:	c8 01       	movw	r24, r16
     6a6:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     6aa:	89 2b       	or	r24, r25
     6ac:	a9 f4       	brne	.+42     	; 0x6d8 <__FUSE_REGION_LENGTH__+0x2d8>
		strcpy(apn,"rcomwap");
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	e7 ea       	ldi	r30, 0xA7	; 167
     6b2:	f4 e0       	ldi	r31, 0x04	; 4
     6b4:	d7 01       	movw	r26, r14
     6b6:	01 90       	ld	r0, Z+
     6b8:	0d 92       	st	X+, r0
     6ba:	8a 95       	dec	r24
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <__FUSE_REGION_LENGTH__+0x2b6>
		UART_0_puts("APN...");
     6be:	88 e8       	ldi	r24, 0x88	; 136
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     6c6:	c7 01       	movw	r24, r14
     6c8:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     6cc:	8f eb       	ldi	r24, 0xBF	; 191
     6ce:	95 e0       	ldi	r25, 0x05	; 5
     6d0:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	60 c0       	rjmp	.+192    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if(strcmp(user,"TATA\0")==0){
     6d8:	60 eb       	ldi	r22, 0xB0	; 176
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	c8 01       	movw	r24, r16
     6de:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     6e2:	89 2b       	or	r24, r25
     6e4:	a9 f4       	brne	.+42     	; 0x710 <__FUSE_REGION_LENGTH__+0x310>
		strcpy(apn,"tata.docomo.internet");
     6e6:	85 e1       	ldi	r24, 0x15	; 21
     6e8:	ef ea       	ldi	r30, 0xAF	; 175
     6ea:	f4 e0       	ldi	r31, 0x04	; 4
     6ec:	d7 01       	movw	r26, r14
     6ee:	01 90       	ld	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	8a 95       	dec	r24
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <__FUSE_REGION_LENGTH__+0x2ee>
		UART_0_puts("APN...");
     6f6:	88 e8       	ldi	r24, 0x88	; 136
     6f8:	94 e0       	ldi	r25, 0x04	; 4
     6fa:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     6fe:	c7 01       	movw	r24, r14
     700:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     704:	8f eb       	ldi	r24, 0xBF	; 191
     706:	95 e0       	ldi	r25, 0x05	; 5
     708:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	44 c0       	rjmp	.+136    	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if(strcmp(user,"Uninor\0")==0){
     710:	66 eb       	ldi	r22, 0xB6	; 182
     712:	71 e0       	ldi	r23, 0x01	; 1
     714:	c8 01       	movw	r24, r16
     716:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     71a:	89 2b       	or	r24, r25
     71c:	a9 f4       	brne	.+42     	; 0x748 <__FUSE_REGION_LENGTH__+0x348>
		strcpy(apn,"uninor");
     71e:	87 e0       	ldi	r24, 0x07	; 7
     720:	e4 ec       	ldi	r30, 0xC4	; 196
     722:	f4 e0       	ldi	r31, 0x04	; 4
     724:	d7 01       	movw	r26, r14
     726:	01 90       	ld	r0, Z+
     728:	0d 92       	st	X+, r0
     72a:	8a 95       	dec	r24
     72c:	e1 f7       	brne	.-8      	; 0x726 <__FUSE_REGION_LENGTH__+0x326>
		UART_0_puts("APN...");
     72e:	88 e8       	ldi	r24, 0x88	; 136
     730:	94 e0       	ldi	r25, 0x04	; 4
     732:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     736:	c7 01       	movw	r24, r14
     738:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     73c:	8f eb       	ldi	r24, 0xBF	; 191
     73e:	95 e0       	ldi	r25, 0x05	; 5
     740:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1;
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	28 c0       	rjmp	.+80     	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else if((strcmp(user,"!dea\0")==0) || (strcasecmp(user,"Idea\0") == 0)){
     748:	6e eb       	ldi	r22, 0xBE	; 190
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     752:	89 2b       	or	r24, r25
     754:	39 f0       	breq	.+14     	; 0x764 <__FUSE_REGION_LENGTH__+0x364>
     756:	64 ec       	ldi	r22, 0xC4	; 196
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	c8 01       	movw	r24, r16
     75c:	0e 94 9a 0c 	call	0x1934	; 0x1934 <strcasecmp>
     760:	89 2b       	or	r24, r25
     762:	a9 f4       	brne	.+42     	; 0x78e <__FUSE_REGION_LENGTH__+0x38e>
		strcpy(apn,"isafe");
     764:	86 e0       	ldi	r24, 0x06	; 6
     766:	eb ec       	ldi	r30, 0xCB	; 203
     768:	f4 e0       	ldi	r31, 0x04	; 4
     76a:	d7 01       	movw	r26, r14
     76c:	01 90       	ld	r0, Z+
     76e:	0d 92       	st	X+, r0
     770:	8a 95       	dec	r24
     772:	e1 f7       	brne	.-8      	; 0x76c <__FUSE_REGION_LENGTH__+0x36c>
		UART_0_puts("APN...");
     774:	88 e8       	ldi	r24, 0x88	; 136
     776:	94 e0       	ldi	r25, 0x04	; 4
     778:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
     77c:	c7 01       	movw	r24, r14
     77e:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
     782:	8f eb       	ldi	r24, 0xBF	; 191
     784:	95 e0       	ldi	r25, 0x05	; 5
     786:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 1; 
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	05 c0       	rjmp	.+10     	; 0x798 <__FUSE_REGION_LENGTH__+0x398>
	}
	else{
		UART_0_puts("APN not found...\r\n");
     78e:	81 ed       	ldi	r24, 0xD1	; 209
     790:	94 e0       	ldi	r25, 0x04	; 4
     792:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
		return 0;
     796:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     798:	c8 53       	subi	r28, 0x38	; 56
     79a:	df 4f       	sbci	r29, 0xFF	; 255
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	1f 91       	pop	r17
     7ac:	0f 91       	pop	r16
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	08 95       	ret

000007b4 <allocate_dynaIP>:
	
		
	return 0;
}

uint8_t allocate_dynaIP(){
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	64 97       	sbiw	r28, 0x14	; 20
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
	char simresponse[20];
	
	//  To attach to GPRS connection
	sim900_cmd("AT+CIICR\r\n\0",simresponse);
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	8a ec       	ldi	r24, 0xCA	; 202
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	fa dd       	rcall	.-1036   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")==0){
     7d4:	60 e1       	ldi	r22, 0x10	; 16
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     7e0:	89 2b       	or	r24, r25
     7e2:	89 f4       	brne	.+34     	; 0x806 <allocate_dynaIP+0x52>
		//  To allocate dynamic IP
		sim900_cmd("AT+CIFSR\r\n\0",simresponse);
     7e4:	be 01       	movw	r22, r28
     7e6:	6f 5f       	subi	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	86 ed       	ldi	r24, 0xD6	; 214
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	ec dd       	rcall	.-1064   	; 0x3c8 <sim900_cmd>
		if (strcmp(simresponse,"ERROR\0")!=0){
     7f0:	62 ee       	ldi	r22, 0xE2	; 226
     7f2:	71 e0       	ldi	r23, 0x01	; 1
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	89 2b       	or	r24, r25
     800:	19 f4       	brne	.+6      	; 0x808 <allocate_dynaIP+0x54>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	01 c0       	rjmp	.+2      	; 0x808 <allocate_dynaIP+0x54>
			return 1;
		}
	}
	return 0;
     806:	20 e0       	ldi	r18, 0x00	; 0
} 
     808:	82 2f       	mov	r24, r18
     80a:	64 96       	adiw	r28, 0x14	; 20
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <reset_SIM900>:
	skip = 0;
	TCNT1 = 0;
	sbi(TCCR1B,CS12);
}

void reset_SIM900(){
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	64 97       	sbiw	r28, 0x14	; 20
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	de bf       	out	0x3e, r29	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	cd bf       	out	0x3d, r28	; 61
	
	char simresponse[20];
	
	sim900_cmd("AT+CPOWD=1\r\n\0",simresponse);	
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	89 ee       	ldi	r24, 0xE9	; 233
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	c6 dd       	rcall	.-1140   	; 0x3c8 <sim900_cmd>
     83c:	2a ea       	ldi	r18, 0xAA	; 170
     83e:	36 ee       	ldi	r19, 0xE6	; 230
     840:	86 e9       	ldi	r24, 0x96	; 150
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	21 50       	subi	r18, 0x01	; 1
     846:	30 40       	sbci	r19, 0x00	; 0
     848:	80 40       	sbci	r24, 0x00	; 0
     84a:	90 40       	sbci	r25, 0x00	; 0
     84c:	d9 f7       	brne	.-10     	; 0x844 <reset_SIM900+0x28>
     84e:	00 00       	nop
	_delay_ms(20000);
}
     850:	64 96       	adiw	r28, 0x14	; 20
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	08 95       	ret

00000862 <fetch_gprs>:
	}
	
	return 1;
}

uint8_t fetch_gprs(){
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	64 97       	sbiw	r28, 0x14	; 20
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
	char simresponse[20];
	UART_0_puts("Searching GPRS...\r\n");
     876:	84 ee       	ldi	r24, 0xE4	; 228
     878:	94 e0       	ldi	r25, 0x04	; 4
     87a:	0e 94 49 0c 	call	0x1892	; 0x1892 <UART_0_puts>
	
	sim900_cmd("AT+CGATT?\r\n",simresponse);
     87e:	be 01       	movw	r22, r28
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	88 ef       	ldi	r24, 0xF8	; 248
     886:	94 e0       	ldi	r25, 0x04	; 4
     888:	9f dd       	rcall	.-1218   	; 0x3c8 <sim900_cmd>
	if(strcmp(simresponse,"+CGATT: 0\0")==0){  // If GPRS is not attached
     88a:	67 ef       	ldi	r22, 0xF7	; 247
     88c:	71 e0       	ldi	r23, 0x01	; 1
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     896:	89 2b       	or	r24, r25
     898:	71 f4       	brne	.+28     	; 0x8b6 <fetch_gprs+0x54>
		UART_0_puts("GPRS returns ERROR...\r\n");
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	95 e0       	ldi	r25, 0x05	; 5
     89e:	f9 d7       	rcall	.+4082   	; 0x1892 <UART_0_puts>
     8a0:	2f ef       	ldi	r18, 0xFF	; 255
     8a2:	81 e1       	ldi	r24, 0x11	; 17
     8a4:	9a e7       	ldi	r25, 0x7A	; 122
     8a6:	21 50       	subi	r18, 0x01	; 1
     8a8:	80 40       	sbci	r24, 0x00	; 0
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <fetch_gprs+0x44>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <fetch_gprs+0x4e>
     8b0:	00 00       	nop
		sbi(UCSR1B,RXEN1);
		UART_0_puts("GPRS OK...\r\n");
		sim900_response(simresponse);
		return 1;
	}
	return 0;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	16 c0       	rjmp	.+44     	; 0x8e2 <fetch_gprs+0x80>
	
	sim900_cmd("AT+CGATT?\r\n",simresponse);
	if(strcmp(simresponse,"+CGATT: 0\0")==0){  // If GPRS is not attached
		UART_0_puts("GPRS returns ERROR...\r\n");
		_delay_ms(5000);
	}else if(strcmp(simresponse,"+CGATT: 1\0")==0){  // GPRS is attached properly
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	72 e0       	ldi	r23, 0x02	; 2
     8ba:	ce 01       	movw	r24, r28
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     8c2:	89 2b       	or	r24, r25
     8c4:	69 f4       	brne	.+26     	; 0x8e0 <fetch_gprs+0x7e>
		//  Reception Enable again for OK
		sbi(UCSR1B,RXEN1);
     8c6:	e9 ec       	ldi	r30, 0xC9	; 201
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	80 81       	ld	r24, Z
     8cc:	80 61       	ori	r24, 0x10	; 16
     8ce:	80 83       	st	Z, r24
		UART_0_puts("GPRS OK...\r\n");
     8d0:	8c e1       	ldi	r24, 0x1C	; 28
     8d2:	95 e0       	ldi	r25, 0x05	; 5
     8d4:	de d7       	rcall	.+4028   	; 0x1892 <UART_0_puts>
		sim900_response(simresponse);
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	35 dd       	rcall	.-1430   	; 0x346 <sim900_response>
		return 1;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <fetch_gprs+0x80>
	}
	return 0;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
}
     8e2:	64 96       	adiw	r28, 0x14	; 20
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <set_apn>:
			t=0;
		}
	}
}

uint8_t set_apn(char* apn){
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	2a 97       	sbiw	r28, 0x0a	; 10
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	8c 01       	movw	r16, r24
	char simresponse[10];
	uint8_t flag_allocate_dynaIP=0;
	
	UART_0_puts("Closing PDP Settings...\r\n");
     90e:	89 e2       	ldi	r24, 0x29	; 41
     910:	95 e0       	ldi	r25, 0x05	; 5
     912:	bf d7       	rcall	.+3966   	; 0x1892 <UART_0_puts>
	//  Closing PDP connection
	sim900_cmd("AT+CIPSHUT\r\n\0",simresponse);	
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	8d e0       	ldi	r24, 0x0D	; 13
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	54 dd       	rcall	.-1368   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"SHUT OK\0")!=0){  //  Previous PDP connection not closed properly
     920:	6b e1       	ldi	r22, 0x1B	; 27
     922:	72 e0       	ldi	r23, 0x02	; 2
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	0e 94 b8 0c 	call	0x1970	; 0x1970 <strcmp>
     92c:	89 2b       	or	r24, r25
     92e:	41 f0       	breq	.+16     	; 0x940 <set_apn+0x4c>
		UART_0_puts("PDP connection not closed properly...\r\n");
     930:	83 e4       	ldi	r24, 0x43	; 67
     932:	95 e0       	ldi	r25, 0x05	; 5
     934:	ae d7       	rcall	.+3932   	; 0x1892 <UART_0_puts>
		UART_0_puts("Re-shutting...\r\n");
     936:	8b e6       	ldi	r24, 0x6B	; 107
     938:	95 e0       	ldi	r25, 0x05	; 5
     93a:	ab d7       	rcall	.+3926   	; 0x1892 <UART_0_puts>
		return 0;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	39 c0       	rjmp	.+114    	; 0x9b2 <set_apn+0xbe>
	}
	UART_0_puts("PDP Settings closed Properly...\r\n");
     940:	8c e7       	ldi	r24, 0x7C	; 124
     942:	95 e0       	ldi	r25, 0x05	; 5
     944:	a6 d7       	rcall	.+3916   	; 0x1892 <UART_0_puts>
	UART_0_puts("Setting apn to ");
     946:	8e e9       	ldi	r24, 0x9E	; 158
     948:	95 e0       	ldi	r25, 0x05	; 5
     94a:	a3 d7       	rcall	.+3910   	; 0x1892 <UART_0_puts>
	UART_0_puts(apn);
     94c:	c8 01       	movw	r24, r16
     94e:	a1 d7       	rcall	.+3906   	; 0x1892 <UART_0_puts>
	UART_0_puts("\r\n");
     950:	8f eb       	ldi	r24, 0xBF	; 191
     952:	95 e0       	ldi	r25, 0x05	; 5
     954:	9e d7       	rcall	.+3900   	; 0x1892 <UART_0_puts>
	
	//  Reception Enable
	sbi(UCSR1B,RXEN1);
     956:	e9 ec       	ldi	r30, 0xC9	; 201
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	90 81       	ld	r25, Z
     95c:	90 61       	ori	r25, 0x10	; 16
     95e:	90 83       	st	Z, r25
	
	//  Setting APN
	UART_1_puts("AT+CSTT=\"");  //  To assign the APN username and password
     960:	8e ea       	ldi	r24, 0xAE	; 174
     962:	95 e0       	ldi	r25, 0x05	; 5
     964:	bc d7       	rcall	.+3960   	; 0x18de <UART_1_puts>
	UART_1_puts(apn);
     966:	c8 01       	movw	r24, r16
     968:	ba d7       	rcall	.+3956   	; 0x18de <UART_1_puts>
	UART_1_puts("\"\,\"\"\,\"\"\r\n");
     96a:	88 eb       	ldi	r24, 0xB8	; 184
     96c:	95 e0       	ldi	r25, 0x05	; 5
     96e:	b7 d7       	rcall	.+3950   	; 0x18de <UART_1_puts>
		
	// Getting response
	sim900_response(simresponse);
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	e8 dc       	rcall	.-1584   	; 0x346 <sim900_response>
	
	if (strcmp(simresponse,"OK\0")!=0){  //  Not good
     976:	60 e1       	ldi	r22, 0x10	; 16
     978:	71 e0       	ldi	r23, 0x01	; 1
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	f8 d7       	rcall	.+4080   	; 0x1970 <strcmp>
     980:	89 2b       	or	r24, r25
     982:	41 f0       	breq	.+16     	; 0x994 <set_apn+0xa0>
		UART_0_puts("APN not set properly...\r\n");
     984:	82 ec       	ldi	r24, 0xC2	; 194
     986:	95 e0       	ldi	r25, 0x05	; 5
     988:	84 d7       	rcall	.+3848   	; 0x1892 <UART_0_puts>
		UART_0_puts("Re-setting APN...\r\n");
     98a:	8c ed       	ldi	r24, 0xDC	; 220
     98c:	95 e0       	ldi	r25, 0x05	; 5
     98e:	81 d7       	rcall	.+3842   	; 0x1892 <UART_0_puts>
		return 0;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0f c0       	rjmp	.+30     	; 0x9b2 <set_apn+0xbe>
	}
	UART_0_puts("APN set properly...\r\n");
     994:	80 ef       	ldi	r24, 0xF0	; 240
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	7c d7       	rcall	.+3832   	; 0x1892 <UART_0_puts>
	UART_0_puts("Allocating Dynamic IP...\r\n");
     99a:	86 e0       	ldi	r24, 0x06	; 6
     99c:	96 e0       	ldi	r25, 0x06	; 6
     99e:	79 d7       	rcall	.+3826   	; 0x1892 <UART_0_puts>
	// Allocating dynamic IP
	flag_allocate_dynaIP = allocate_dynaIP();
     9a0:	09 df       	rcall	.-494    	; 0x7b4 <allocate_dynaIP>
	if(flag_allocate_dynaIP==1){  // Dynamic IP allocation successful
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	29 f4       	brne	.+10     	; 0x9b0 <set_apn+0xbc>
		UART_0_puts("Dynamic IP Allocated successfully...\r\n");
     9a6:	81 e2       	ldi	r24, 0x21	; 33
     9a8:	96 e0       	ldi	r25, 0x06	; 6
     9aa:	73 d7       	rcall	.+3814   	; 0x1892 <UART_0_puts>
		return 1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <set_apn+0xbe>
	}
	
		
	return 0;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
}
     9b2:	2a 96       	adiw	r28, 0x0a	; 10
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	cd bf       	out	0x3d, r28	; 61
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret

000009c8 <get_signalstrength>:

	//  Reception Disable
	cbi(UCSR1B,RXEN1);
} 

uint8_t get_signalstrength(){
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	c0 5d       	subi	r28, 0xD0	; 208
     9d2:	d1 09       	sbc	r29, r1
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	de bf       	out	0x3e, r29	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	cd bf       	out	0x3d, r28	; 61
	char dummy[5],strength[3],simresponse[200];
	uint8_t signalstrength;
	
	//  To get signal strength
	sim900_cmd("AT+CSQ\r\n\0",simresponse); 
     9de:	be 01       	movw	r22, r28
     9e0:	67 5f       	subi	r22, 0xF7	; 247
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	84 e2       	ldi	r24, 0x24	; 36
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	ef dc       	rcall	.-1570   	; 0x3c8 <sim900_cmd>
	
	//  Re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
     9ea:	e9 ec       	ldi	r30, 0xC9	; 201
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	80 81       	ld	r24, Z
     9f0:	80 61       	ori	r24, 0x10	; 16
     9f2:	80 83       	st	Z, r24
	
	sim900_response(dummy);
     9f4:	ce 01       	movw	r24, r28
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	a6 dc       	rcall	.-1716   	; 0x346 <sim900_response>
	
	strength[0]=simresponse[6];
     9fa:	8f 85       	ldd	r24, Y+15	; 0x0f
     9fc:	8e 83       	std	Y+6, r24	; 0x06
	if (simresponse[7]!=','){
     9fe:	88 89       	ldd	r24, Y+16	; 0x10
     a00:	8c 32       	cpi	r24, 0x2C	; 44
     a02:	19 f0       	breq	.+6      	; 0xa0a <get_signalstrength+0x42>
		strength[1]=simresponse[7];
     a04:	8f 83       	std	Y+7, r24	; 0x07
		strength[2]='\0';
     a06:	18 86       	std	Y+8, r1	; 0x08
     a08:	01 c0       	rjmp	.+2      	; 0xa0c <get_signalstrength+0x44>
	} else {
		strength[1]='\0';
     a0a:	1f 82       	std	Y+7, r1	; 0x07
	}	
	
	signalstrength=atoi(strength);
     a0c:	ce 01       	movw	r24, r28
     a0e:	06 96       	adiw	r24, 0x06	; 6
     a10:	74 d7       	rcall	.+3816   	; 0x18fa <atoi>
	
	if (signalstrength<10 || signalstrength==99){
     a12:	8a 30       	cpi	r24, 0x0A	; 10
     a14:	68 f0       	brcs	.+26     	; 0xa30 <get_signalstrength+0x68>
     a16:	83 36       	cpi	r24, 0x63	; 99
     a18:	69 f0       	breq	.+26     	; 0xa34 <get_signalstrength+0x6c>
		return 0;
	} else if (signalstrength>=10 && signalstrength<20){
     a1a:	96 ef       	ldi	r25, 0xF6	; 246
     a1c:	98 0f       	add	r25, r24
     a1e:	9a 30       	cpi	r25, 0x0A	; 10
     a20:	58 f0       	brcs	.+22     	; 0xa38 <get_signalstrength+0x70>
		return 1;
	} else if (signalstrength>=20 && signalstrength<30){
     a22:	9c ee       	ldi	r25, 0xEC	; 236
     a24:	98 0f       	add	r25, r24
     a26:	9a 30       	cpi	r25, 0x0A	; 10
     a28:	48 f0       	brcs	.+18     	; 0xa3c <get_signalstrength+0x74>
		return 2;
	} else if (signalstrength>30){
     a2a:	8f 31       	cpi	r24, 0x1F	; 31
     a2c:	48 f4       	brcc	.+18     	; 0xa40 <get_signalstrength+0x78>
     a2e:	09 c0       	rjmp	.+18     	; 0xa42 <get_signalstrength+0x7a>
	}	
	
	signalstrength=atoi(strength);
	
	if (signalstrength<10 || signalstrength==99){
		return 0;
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	07 c0       	rjmp	.+14     	; 0xa42 <get_signalstrength+0x7a>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <get_signalstrength+0x7a>
	} else if (signalstrength>=10 && signalstrength<20){
		return 1;
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <get_signalstrength+0x7a>
	} else if (signalstrength>=20 && signalstrength<30){
		return 2;
     a3c:	82 e0       	ldi	r24, 0x02	; 2
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <get_signalstrength+0x7a>
	} else if (signalstrength>30){
		return 3;
     a40:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     a42:	c0 53       	subi	r28, 0x30	; 48
     a44:	df 4f       	sbci	r29, 0xFF	; 255
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	08 95       	ret

00000a56 <get_sms>:
	sbi(UCSR1B,RXEN1);
	
	sim900_response(response);
}

uint8_t get_sms(uint8_t* system_on,char* customer_no,char* Serial_num){
     a56:	2f 92       	push	r2
     a58:	3f 92       	push	r3
     a5a:	4f 92       	push	r4
     a5c:	5f 92       	push	r5
     a5e:	6f 92       	push	r6
     a60:	7f 92       	push	r7
     a62:	8f 92       	push	r8
     a64:	9f 92       	push	r9
     a66:	af 92       	push	r10
     a68:	bf 92       	push	r11
     a6a:	cf 92       	push	r12
     a6c:	df 92       	push	r13
     a6e:	ef 92       	push	r14
     a70:	ff 92       	push	r15
     a72:	0f 93       	push	r16
     a74:	1f 93       	push	r17
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
     a7e:	c1 58       	subi	r28, 0x81	; 129
     a80:	d1 40       	sbci	r29, 0x01	; 1
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	c5 58       	subi	r28, 0x85	; 133
     a8e:	de 4f       	sbci	r29, 0xFE	; 254
     a90:	99 83       	std	Y+1, r25	; 0x01
     a92:	88 83       	st	Y, r24
     a94:	cb 57       	subi	r28, 0x7B	; 123
     a96:	d1 40       	sbci	r29, 0x01	; 1
     a98:	c9 58       	subi	r28, 0x89	; 137
     a9a:	de 4f       	sbci	r29, 0xFE	; 254
     a9c:	79 83       	std	Y+1, r23	; 0x01
     a9e:	68 83       	st	Y, r22
     aa0:	c7 57       	subi	r28, 0x77	; 119
     aa2:	d1 40       	sbci	r29, 0x01	; 1
     aa4:	c7 58       	subi	r28, 0x87	; 135
     aa6:	de 4f       	sbci	r29, 0xFE	; 254
     aa8:	59 83       	std	Y+1, r21	; 0x01
     aaa:	48 83       	st	Y, r20
     aac:	c9 57       	subi	r28, 0x79	; 121
     aae:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t update_customer_no=0,update_serial_no=0,update_remote_control=0;
	int no_of_msg,message_number;
	char no_msg[6],response_number[150],contact_no[20],simresponse[30],msg[160],dummy[5];
	char initial[]={'0','0'};
	
	UART_0_puts("Checking no. of unread messages...\r\n");
     ab0:	88 e4       	ldi	r24, 0x48	; 72
     ab2:	96 e0       	ldi	r25, 0x06	; 6
     ab4:	ee d6       	rcall	.+3548   	; 0x1892 <UART_0_puts>
	// Check no. of messages
	sim900_cmd("AT+CPMS=\"SM\"\r\n\0",simresponse);
     ab6:	be 01       	movw	r22, r28
     ab8:	6f 54       	subi	r22, 0x4F	; 79
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	8e e2       	ldi	r24, 0x2E	; 46
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	83 dc       	rcall	.-1786   	; 0x3c8 <sim900_cmd>
	
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
     ac2:	e9 ec       	ldi	r30, 0xC9	; 201
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	80 61       	ori	r24, 0x10	; 16
     aca:	80 83       	st	Z, r24
	
	sim900_response(dummy);
     acc:	ce 01       	movw	r24, r28
     ace:	81 59       	subi	r24, 0x91	; 145
     ad0:	9e 4f       	sbci	r25, 0xFE	; 254
     ad2:	39 dc       	rcall	.-1934   	; 0x346 <sim900_response>
	
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
     ad4:	cf 54       	subi	r28, 0x4F	; 79
     ad6:	df 4f       	sbci	r29, 0xFF	; 255
     ad8:	88 81       	ld	r24, Y
     ada:	c1 5b       	subi	r28, 0xB1	; 177
     adc:	d0 40       	sbci	r29, 0x00	; 0
     ade:	8a 33       	cpi	r24, 0x3A	; 58
     ae0:	49 f0       	breq	.+18     	; 0xaf4 <get_sms+0x9e>
     ae2:	fe 01       	movw	r30, r28
     ae4:	ee 54       	subi	r30, 0x4E	; 78
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	80 e0       	ldi	r24, 0x00	; 0
		i++;
     aea:	8f 5f       	subi	r24, 0xFF	; 255
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
     aec:	91 91       	ld	r25, Z+
     aee:	9a 33       	cpi	r25, 0x3A	; 58
     af0:	e1 f7       	brne	.-8      	; 0xaea <get_sms+0x94>
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <get_sms+0xa0>
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
     af4:	80 e0       	ldi	r24, 0x00	; 0
	while (simresponse[i]!='\:' && i<30){
		i++;
	}
	i++;i++;
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	98 0f       	add	r25, r24
	while (simresponse[i]!='\,' && p<6){
     afa:	e1 eb       	ldi	r30, 0xB1	; 177
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	ec 0f       	add	r30, r28
     b00:	fd 1f       	adc	r31, r29
     b02:	e9 0f       	add	r30, r25
     b04:	f1 1d       	adc	r31, r1
     b06:	20 81       	ld	r18, Z
     b08:	2c 32       	cpi	r18, 0x2C	; 44
     b0a:	a9 f0       	breq	.+42     	; 0xb36 <get_sms+0xe0>
     b0c:	ae 01       	movw	r20, r28
     b0e:	4f 5f       	subi	r20, 0xFF	; 255
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	88 5f       	subi	r24, 0xF8	; 248
     b14:	fa 01       	movw	r30, r20
		no_msg[p]=simresponse[i];
     b16:	21 93       	st	Z+, r18
     b18:	3e 2f       	mov	r19, r30
     b1a:	34 1b       	sub	r19, r20
		p++;i++;
     b1c:	9f 5f       	subi	r25, 0xFF	; 255
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
		i++;
	}
	i++;i++;
	while (simresponse[i]!='\,' && p<6){
     b1e:	a1 eb       	ldi	r26, 0xB1	; 177
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	ac 0f       	add	r26, r28
     b24:	bd 1f       	adc	r27, r29
     b26:	a9 0f       	add	r26, r25
     b28:	b1 1d       	adc	r27, r1
     b2a:	2c 91       	ld	r18, X
     b2c:	2c 32       	cpi	r18, 0x2C	; 44
     b2e:	21 f0       	breq	.+8      	; 0xb38 <get_sms+0xe2>
     b30:	98 13       	cpse	r25, r24
     b32:	f1 cf       	rjmp	.-30     	; 0xb16 <get_sms+0xc0>
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <get_sms+0xe2>
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
     b36:	30 e0       	ldi	r19, 0x00	; 0
	i++;i++;
	while (simresponse[i]!='\,' && p<6){
		no_msg[p]=simresponse[i];
		p++;i++;
	}
	no_msg[p]='\0';
     b38:	e1 e0       	ldi	r30, 0x01	; 1
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ec 0f       	add	r30, r28
     b3e:	fd 1f       	adc	r31, r29
     b40:	e3 0f       	add	r30, r19
     b42:	f1 1d       	adc	r31, r1
     b44:	10 82       	st	Z, r1
	no_of_msg = atoi(no_msg);  
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	d7 d6       	rcall	.+3502   	; 0x18fa <atoi>
     b4c:	cc 58       	subi	r28, 0x8C	; 140
     b4e:	de 4f       	sbci	r29, 0xFE	; 254
     b50:	99 83       	std	Y+1, r25	; 0x01
     b52:	88 83       	st	Y, r24
     b54:	c4 57       	subi	r28, 0x74	; 116
     b56:	d1 40       	sbci	r29, 0x01	; 1
	UART_0_puts("no. of unread messages are..");
     b58:	8d e6       	ldi	r24, 0x6D	; 109
     b5a:	96 e0       	ldi	r25, 0x06	; 6
     b5c:	9a d6       	rcall	.+3380   	; 0x1892 <UART_0_puts>
	UART_0_puts(no_msg);
     b5e:	ce 01       	movw	r24, r28
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	97 d6       	rcall	.+3374   	; 0x1892 <UART_0_puts>
	UART_0_puts("\r\n");
     b64:	8f eb       	ldi	r24, 0xBF	; 191
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	94 d6       	rcall	.+3368   	; 0x1892 <UART_0_puts>
	
	// Exiting the function if no new messages have arrived
	if (no_of_msg==0){
     b6a:	cc 58       	subi	r28, 0x8C	; 140
     b6c:	de 4f       	sbci	r29, 0xFE	; 254
     b6e:	28 81       	ld	r18, Y
     b70:	39 81       	ldd	r19, Y+1	; 0x01
     b72:	c4 57       	subi	r28, 0x74	; 116
     b74:	d1 40       	sbci	r29, 0x01	; 1
     b76:	23 2b       	or	r18, r19
     b78:	09 f4       	brne	.+2      	; 0xb7c <get_sms+0x126>
     b7a:	56 c2       	rjmp	.+1196   	; 0x1028 <get_sms+0x5d2>
		return 1;
	}
	
	// Changing the message to readable format
	sim900_cmd("AT+CMGF=1\r\n",simresponse);
     b7c:	be 01       	movw	r22, r28
     b7e:	6f 54       	subi	r22, 0x4F	; 79
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	8a e8       	ldi	r24, 0x8A	; 138
     b84:	96 e0       	ldi	r25, 0x06	; 6
     b86:	20 dc       	rcall	.-1984   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")!=0){
     b88:	60 e1       	ldi	r22, 0x10	; 16
     b8a:	71 e0       	ldi	r23, 0x01	; 1
     b8c:	ce 01       	movw	r24, r28
     b8e:	8f 54       	subi	r24, 0x4F	; 79
     b90:	9f 4f       	sbci	r25, 0xFF	; 255
     b92:	ee d6       	rcall	.+3548   	; 0x1970 <strcmp>
     b94:	89 2b       	or	r24, r25
     b96:	09 f0       	breq	.+2      	; 0xb9a <get_sms+0x144>
     b98:	49 c2       	rjmp	.+1170   	; 0x102c <get_sms+0x5d6>
		return 0;
	}
	UART_0_puts("Messages converted to Readable Format...\r\n");
     b9a:	86 e9       	ldi	r24, 0x96	; 150
     b9c:	96 e0       	ldi	r25, 0x06	; 6
     b9e:	79 d6       	rcall	.+3314   	; 0x1892 <UART_0_puts>
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     ba0:	cc 58       	subi	r28, 0x8C	; 140
     ba2:	de 4f       	sbci	r29, 0xFE	; 254
     ba4:	88 81       	ld	r24, Y
     ba6:	99 81       	ldd	r25, Y+1	; 0x01
     ba8:	c4 57       	subi	r28, 0x74	; 116
     baa:	d1 40       	sbci	r29, 0x01	; 1
     bac:	18 16       	cp	r1, r24
     bae:	19 06       	cpc	r1, r25
     bb0:	0c f0       	brlt	.+2      	; 0xbb4 <get_sms+0x15e>
     bb2:	13 c2       	rjmp	.+1062   	; 0xfda <get_sms+0x584>
     bb4:	68 94       	set
     bb6:	22 24       	eor	r2, r2
     bb8:	21 f8       	bld	r2, 1
     bba:	31 2c       	mov	r3, r1
     bbc:	c3 58       	subi	r28, 0x83	; 131
     bbe:	de 4f       	sbci	r29, 0xFE	; 254
     bc0:	18 82       	st	Y, r1
     bc2:	cd 57       	subi	r28, 0x7D	; 125
     bc4:	d1 40       	sbci	r29, 0x01	; 1
     bc6:	c2 58       	subi	r28, 0x82	; 130
     bc8:	de 4f       	sbci	r29, 0xFE	; 254
     bca:	18 82       	st	Y, r1
     bcc:	ce 57       	subi	r28, 0x7E	; 126
     bce:	d1 40       	sbci	r29, 0x01	; 1
     bd0:	c1 58       	subi	r28, 0x81	; 129
     bd2:	de 4f       	sbci	r29, 0xFE	; 254
     bd4:	18 82       	st	Y, r1
     bd6:	cf 57       	subi	r28, 0x7F	; 127
     bd8:	d1 40       	sbci	r29, 0x01	; 1
			initial[0]=initial[1];
			dataarrived=wait_for_data();
			if (dataarrived==0){
				break;
			}
			initial[1]=UDR1;
     bda:	0e ec       	ldi	r16, 0xCE	; 206
     bdc:	10 e0       	ldi	r17, 0x00	; 0
     bde:	7e 01       	movw	r14, r28
     be0:	97 e0       	ldi	r25, 0x07	; 7
     be2:	e9 0e       	add	r14, r25
     be4:	f1 1c       	adc	r15, r1
     be6:	5e 01       	movw	r10, r28
     be8:	ee e9       	ldi	r30, 0x9E	; 158
     bea:	ae 0e       	add	r10, r30
     bec:	b1 1c       	adc	r11, r1
     bee:	ca 58       	subi	r28, 0x8A	; 138
     bf0:	de 4f       	sbci	r29, 0xFE	; 254
     bf2:	e8 82       	st	Y, r14
     bf4:	c6 57       	subi	r28, 0x76	; 118
     bf6:	d1 40       	sbci	r29, 0x01	; 1
     bf8:	8f 2c       	mov	r8, r15
     bfa:	3e 01       	movw	r6, r28
     bfc:	ff ec       	ldi	r31, 0xCF	; 207
     bfe:	6f 0e       	add	r6, r31
     c00:	71 1c       	adc	r7, r1
     c02:	2e 01       	movw	r4, r28
     c04:	20 e9       	ldi	r18, 0x90	; 144
     c06:	42 1a       	sub	r4, r18
     c08:	2e ef       	ldi	r18, 0xFE	; 254
     c0a:	52 0a       	sbc	r5, r18
			UART_0_puts("System Turned OFF....\r\n");
			cbi(PORTB,7);
			update_remote_control=1;
		}
		else if ((strncmp(msg,"SNO+E",5)==0) && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  To change serial number by Master
			strncpy(Serial_num,msg+4,11);
     c0c:	c3 01       	movw	r24, r6
     c0e:	04 96       	adiw	r24, 0x04	; 4
     c10:	c0 58       	subi	r28, 0x80	; 128
     c12:	de 4f       	sbci	r29, 0xFE	; 254
     c14:	99 83       	std	Y+1, r25	; 0x01
     c16:	88 83       	st	Y, r24
     c18:	c0 58       	subi	r28, 0x80	; 128
     c1a:	d1 40       	sbci	r29, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c1c:	4a e0       	ldi	r20, 0x0A	; 10
     c1e:	be 01       	movw	r22, r28
     c20:	6f 5f       	subi	r22, 0xFF	; 255
     c22:	7f 4f       	sbci	r23, 0xFF	; 255
     c24:	c1 01       	movw	r24, r2
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	d0 d6       	rcall	.+3488   	; 0x19ca <__itoa_ncheck>
	while (message_number<=no_of_msg){
		initial[0]='0';initial[1]='0';  // Re-initializing initial variable
		
		// Send command for reading the particular message
		itoa(message_number,no_msg,10);
		UART_1_puts("AT+CMGR=");
     c2a:	81 ec       	ldi	r24, 0xC1	; 193
     c2c:	96 e0       	ldi	r25, 0x06	; 6
     c2e:	57 d6       	rcall	.+3246   	; 0x18de <UART_1_puts>
		UART_1_puts(no_msg);
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	54 d6       	rcall	.+3240   	; 0x18de <UART_1_puts>
		UART_1_puts("\r\n");
     c36:	8f eb       	ldi	r24, 0xBF	; 191
     c38:	95 e0       	ldi	r25, 0x05	; 5
     c3a:	51 d6       	rcall	.+3234   	; 0x18de <UART_1_puts>
		
		//  For enabling reception
		sbi(UCSR1B,RXEN1);		
     c3c:	e9 ec       	ldi	r30, 0xC9	; 201
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 61       	ori	r24, 0x10	; 16
     c44:	80 83       	st	Z, r24
	UART_0_puts("Messages converted to Readable Format...\r\n");
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
		initial[0]='0';initial[1]='0';  // Re-initializing initial variable
     c46:	0f 2e       	mov	r0, r31
     c48:	f0 e3       	ldi	r31, 0x30	; 48
     c4a:	df 2e       	mov	r13, r31
     c4c:	f0 2d       	mov	r31, r0
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <get_sms+0x200>
     c50:	d8 2e       	mov	r13, r24
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <get_sms+0x200>
     c54:	d8 2e       	mov	r13, r24
		sbi(UCSR1B,RXEN1);		
		
		//  For receiving sender number
		while(!(initial[0]==0x0D && initial[1]==0x0A)){
			initial[0]=initial[1];
			dataarrived=wait_for_data();
     c56:	5f db       	rcall	.-2370   	; 0x316 <wait_for_data>
			if (dataarrived==0){
     c58:	81 11       	cpse	r24, r1
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <get_sms+0x214>
     c5c:	ca 58       	subi	r28, 0x8A	; 138
     c5e:	de 4f       	sbci	r29, 0xFE	; 254
     c60:	c8 80       	ld	r12, Y
     c62:	c6 57       	subi	r28, 0x76	; 118
     c64:	d1 40       	sbci	r29, 0x01	; 1
     c66:	d8 2c       	mov	r13, r8
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <get_sms+0x224>
				break;
			}
			initial[1]=UDR1;
     c6a:	f8 01       	movw	r30, r16
     c6c:	80 81       	ld	r24, Z
		
		//  For enabling reception
		sbi(UCSR1B,RXEN1);		
		
		//  For receiving sender number
		while(!(initial[0]==0x0D && initial[1]==0x0A)){
     c6e:	fd e0       	ldi	r31, 0x0D	; 13
     c70:	df 12       	cpse	r13, r31
     c72:	ee cf       	rjmp	.-36     	; 0xc50 <get_sms+0x1fa>
     c74:	8a 30       	cpi	r24, 0x0A	; 10
     c76:	71 f7       	brne	.-36     	; 0xc54 <get_sms+0x1fe>
     c78:	f1 cf       	rjmp	.-30     	; 0xc5c <get_sms+0x206>
     c7a:	9c 2c       	mov	r9, r12
     c7c:	9e 18       	sub	r9, r14
		}

		i=0;
		
		while(1){
			dataarrived=wait_for_data();
     c7e:	4b db       	rcall	.-2410   	; 0x316 <wait_for_data>
			if (dataarrived==0){
     c80:	88 23       	and	r24, r24
     c82:	51 f0       	breq	.+20     	; 0xc98 <get_sms+0x242>
				break;
			}
			response_number[i]=UDR1;
     c84:	f8 01       	movw	r30, r16
     c86:	80 81       	ld	r24, Z
     c88:	f6 01       	movw	r30, r12
     c8a:	81 93       	st	Z+, r24
     c8c:	6f 01       	movw	r12, r30
			if(response_number[i]==0x0D || i>=150){
     c8e:	8d 30       	cpi	r24, 0x0D	; 13
     c90:	19 f0       	breq	.+6      	; 0xc98 <get_sms+0x242>
     c92:	ea 15       	cp	r30, r10
     c94:	fb 05       	cpc	r31, r11
     c96:	89 f7       	brne	.-30     	; 0xc7a <get_sms+0x224>
			}
			i++;
		}
		
		//  Terminating strings
		response_number[i]="\0";
     c98:	f7 01       	movw	r30, r14
     c9a:	e9 0d       	add	r30, r9
     c9c:	f1 1d       	adc	r31, r1
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	31 e0       	ldi	r19, 0x01	; 1
     ca2:	20 83       	st	Z, r18
		
		//  For those odd unexplainable cases where this response comes empty with OK
		if (strcmp(response_number,"OK\0")==0){
     ca4:	60 e1       	ldi	r22, 0x10	; 16
     ca6:	71 e0       	ldi	r23, 0x01	; 1
     ca8:	ca 58       	subi	r28, 0x8A	; 138
     caa:	de 4f       	sbci	r29, 0xFE	; 254
     cac:	88 81       	ld	r24, Y
     cae:	c6 57       	subi	r28, 0x76	; 118
     cb0:	d1 40       	sbci	r29, 0x01	; 1
     cb2:	98 2d       	mov	r25, r8
     cb4:	5d d6       	rcall	.+3258   	; 0x1970 <strcmp>
     cb6:	89 2b       	or	r24, r25
     cb8:	11 f4       	brne	.+4      	; 0xcbe <get_sms+0x268>
			message_number++;
     cba:	c1 01       	movw	r24, r2
			continue;
     cbc:	37 c1       	rjmp	.+622    	; 0xf2c <get_sms+0x4d6>
		}
		
		//  Receiving message
		p=0;
		
		dataarrived=wait_for_data();
     cbe:	2b db       	rcall	.-2474   	; 0x316 <wait_for_data>
		if (dataarrived==1){
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <get_sms+0x272>
			initial[1]=UDR1;  // To eliminate Lf that comes after Cr but before message starts;
     cc4:	f8 01       	movw	r30, r16
     cc6:	80 81       	ld	r24, Z
     cc8:	63 01       	movw	r12, r6
     cca:	9c 2c       	mov	r9, r12
     ccc:	96 18       	sub	r9, r6
		}
		
		while(1){
			dataarrived=wait_for_data();
     cce:	23 db       	rcall	.-2490   	; 0x316 <wait_for_data>
			if (dataarrived==0){
     cd0:	88 23       	and	r24, r24
     cd2:	51 f0       	breq	.+20     	; 0xce8 <get_sms+0x292>
				break;
			}
			msg[p]=UDR1;
     cd4:	f8 01       	movw	r30, r16
     cd6:	80 81       	ld	r24, Z
     cd8:	f6 01       	movw	r30, r12
     cda:	81 93       	st	Z+, r24
     cdc:	6f 01       	movw	r12, r30
			if(msg[p]==0x0D || p>=160){
     cde:	8d 30       	cpi	r24, 0x0D	; 13
     ce0:	19 f0       	breq	.+6      	; 0xce8 <get_sms+0x292>
     ce2:	e4 15       	cp	r30, r4
     ce4:	f5 05       	cpc	r31, r5
     ce6:	89 f7       	brne	.-30     	; 0xcca <get_sms+0x274>
			}
			p++;
		}
		
		//  For receiving final OK
		sim900_response(dummy);
     ce8:	ce 01       	movw	r24, r28
     cea:	81 59       	subi	r24, 0x91	; 145
     cec:	9e 4f       	sbci	r25, 0xFE	; 254
     cee:	2b db       	rcall	.-2474   	; 0x346 <sim900_response>

		//  Terminating strings
		msg[p]="\0";	
     cf0:	f3 01       	movw	r30, r6
     cf2:	e9 0d       	add	r30, r9
     cf4:	f1 1d       	adc	r31, r1
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	31 e0       	ldi	r19, 0x01	; 1
     cfa:	20 83       	st	Z, r18
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
     cfc:	8f 81       	ldd	r24, Y+7	; 0x07
     cfe:	82 32       	cpi	r24, 0x22	; 34
     d00:	09 f4       	brne	.+2      	; 0xd04 <get_sms+0x2ae>
     d02:	96 c1       	rjmp	.+812    	; 0x1030 <get_sms+0x5da>
     d04:	fe 01       	movw	r30, r28
     d06:	38 96       	adiw	r30, 0x08	; 8
     d08:	20 e0       	ldi	r18, 0x00	; 0
			i++;
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
     d0c:	81 91       	ld	r24, Z+
     d0e:	82 32       	cpi	r24, 0x22	; 34
     d10:	e1 f7       	brne	.-8      	; 0xd0a <get_sms+0x2b4>
			i++;
		}
		i++;
     d12:	2f 5f       	subi	r18, 0xFF	; 255
		while (response_number[i]!='\"' && i<150){
     d14:	f7 01       	movw	r30, r14
     d16:	e2 0f       	add	r30, r18
     d18:	f1 1d       	adc	r31, r1
     d1a:	80 81       	ld	r24, Z
     d1c:	82 32       	cpi	r24, 0x22	; 34
     d1e:	69 f0       	breq	.+26     	; 0xd3a <get_sms+0x2e4>
     d20:	26 39       	cpi	r18, 0x96	; 150
     d22:	10 f0       	brcs	.+4      	; 0xd28 <get_sms+0x2d2>
     d24:	0a c0       	rjmp	.+20     	; 0xd3a <get_sms+0x2e4>
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     d26:	21 e0       	ldi	r18, 0x01	; 1
		while (response_number[i]!='\"' && i<150){
			i++;
     d28:	2f 5f       	subi	r18, 0xFF	; 255
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     d2a:	f7 01       	movw	r30, r14
     d2c:	e2 0f       	add	r30, r18
     d2e:	f1 1d       	adc	r31, r1
     d30:	80 81       	ld	r24, Z
     d32:	82 32       	cpi	r24, 0x22	; 34
     d34:	11 f0       	breq	.+4      	; 0xd3a <get_sms+0x2e4>
     d36:	26 39       	cpi	r18, 0x96	; 150
     d38:	b8 f3       	brcs	.-18     	; 0xd28 <get_sms+0x2d2>
			i++;
		}
		i++;
     d3a:	2f 5f       	subi	r18, 0xFF	; 255
		while (response_number[i]!='\"' && i<150){
     d3c:	f7 01       	movw	r30, r14
     d3e:	e2 0f       	add	r30, r18
     d40:	f1 1d       	adc	r31, r1
     d42:	80 81       	ld	r24, Z
     d44:	82 32       	cpi	r24, 0x22	; 34
     d46:	79 f0       	breq	.+30     	; 0xd66 <get_sms+0x310>
     d48:	26 39       	cpi	r18, 0x96	; 150
     d4a:	10 f0       	brcs	.+4      	; 0xd50 <get_sms+0x2fa>
     d4c:	0c c0       	rjmp	.+24     	; 0xd66 <get_sms+0x310>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     d4e:	22 e0       	ldi	r18, 0x02	; 2
		while (response_number[i]!='\"' && i<150){
			i++;
     d50:	2f 5f       	subi	r18, 0xFF	; 255
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     d52:	f7 01       	movw	r30, r14
     d54:	e2 0f       	add	r30, r18
     d56:	f1 1d       	adc	r31, r1
     d58:	80 81       	ld	r24, Z
     d5a:	82 32       	cpi	r24, 0x22	; 34
     d5c:	21 f0       	breq	.+8      	; 0xd66 <get_sms+0x310>
     d5e:	26 39       	cpi	r18, 0x96	; 150
     d60:	b9 f7       	brne	.-18     	; 0xd50 <get_sms+0x2fa>

		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	21 c0       	rjmp	.+66     	; 0xda8 <get_sms+0x352>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	82 0f       	add	r24, r18
		while (response_number[i]!='\"' && p<20 && i<150){
     d6a:	f7 01       	movw	r30, r14
     d6c:	e8 0f       	add	r30, r24
     d6e:	f1 1d       	adc	r31, r1
     d70:	90 81       	ld	r25, Z
     d72:	92 32       	cpi	r25, 0x22	; 34
     d74:	b1 f0       	breq	.+44     	; 0xda2 <get_sms+0x34c>
     d76:	86 39       	cpi	r24, 0x96	; 150
     d78:	b0 f4       	brcc	.+44     	; 0xda6 <get_sms+0x350>
     d7a:	fe 01       	movw	r30, r28
     d7c:	e3 56       	subi	r30, 0x63	; 99
     d7e:	ff 4f       	sbci	r31, 0xFF	; 255
     d80:	45 e1       	ldi	r20, 0x15	; 21
     d82:	42 0f       	add	r20, r18
			contact_no[p]=response_number[i];
     d84:	91 93       	st	Z+, r25
			p++;i++;
     d86:	38 2f       	mov	r19, r24
     d88:	32 1b       	sub	r19, r18
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && p<20 && i<150){
     d8c:	d7 01       	movw	r26, r14
     d8e:	a8 0f       	add	r26, r24
     d90:	b1 1d       	adc	r27, r1
     d92:	9c 91       	ld	r25, X
     d94:	92 32       	cpi	r25, 0x22	; 34
     d96:	41 f0       	breq	.+16     	; 0xda8 <get_sms+0x352>
     d98:	84 17       	cp	r24, r20
     d9a:	31 f0       	breq	.+12     	; 0xda8 <get_sms+0x352>
     d9c:	86 39       	cpi	r24, 0x96	; 150
     d9e:	91 f7       	brne	.-28     	; 0xd84 <get_sms+0x32e>
     da0:	03 c0       	rjmp	.+6      	; 0xda8 <get_sms+0x352>

		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <get_sms+0x352>
     da6:	30 e0       	ldi	r19, 0x00	; 0
		i++;
		while (response_number[i]!='\"' && p<20 && i<150){
			contact_no[p]=response_number[i];
			p++;i++;
		}
		contact_no[p]='\0';
     da8:	ed e9       	ldi	r30, 0x9D	; 157
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	ec 0f       	add	r30, r28
     dae:	fd 1f       	adc	r31, r29
     db0:	e3 0f       	add	r30, r19
     db2:	f1 1d       	adc	r31, r1
     db4:	10 82       	st	Z, r1
		
		// If message doesn't match authenticated source, move to next message
		if (!((strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,MASTER_NUMBER)==0))){
     db6:	c9 58       	subi	r28, 0x89	; 137
     db8:	de 4f       	sbci	r29, 0xFE	; 254
     dba:	68 81       	ld	r22, Y
     dbc:	79 81       	ldd	r23, Y+1	; 0x01
     dbe:	c7 57       	subi	r28, 0x77	; 119
     dc0:	d1 40       	sbci	r29, 0x01	; 1
     dc2:	ce 01       	movw	r24, r28
     dc4:	83 56       	subi	r24, 0x63	; 99
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	d3 d5       	rcall	.+2982   	; 0x1970 <strcmp>
     dca:	6c 01       	movw	r12, r24
     dcc:	89 2b       	or	r24, r25
     dce:	59 f0       	breq	.+22     	; 0xde6 <get_sms+0x390>
     dd0:	6e e3       	ldi	r22, 0x3E	; 62
     dd2:	72 e0       	ldi	r23, 0x02	; 2
     dd4:	ce 01       	movw	r24, r28
     dd6:	83 56       	subi	r24, 0x63	; 99
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	ca d5       	rcall	.+2964   	; 0x1970 <strcmp>
     ddc:	89 2b       	or	r24, r25
     dde:	09 f4       	brne	.+2      	; 0xde2 <get_sms+0x38c>
     de0:	2c c1       	rjmp	.+600    	; 0x103a <get_sms+0x5e4>
			message_number++;
     de2:	c1 01       	movw	r24, r2
			continue;
     de4:	a3 c0       	rjmp	.+326    	; 0xf2c <get_sms+0x4d6>
		}
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
     de6:	f3 01       	movw	r30, r6
     de8:	80 81       	ld	r24, Z
     dea:	8b 32       	cpi	r24, 0x2B	; 43
     dec:	29 f5       	brne	.+74     	; 0xe38 <get_sms+0x3e2>
     dee:	6e e3       	ldi	r22, 0x3E	; 62
     df0:	72 e0       	ldi	r23, 0x02	; 2
     df2:	ce 01       	movw	r24, r28
     df4:	83 56       	subi	r24, 0x63	; 99
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	bb d5       	rcall	.+2934   	; 0x1970 <strcmp>
     dfa:	89 2b       	or	r24, r25
     dfc:	09 f0       	breq	.+2      	; 0xe00 <get_sms+0x3aa>
     dfe:	22 c1       	rjmp	.+580    	; 0x1044 <get_sms+0x5ee>
			strcpy(customer_no,msg);
     e00:	b3 01       	movw	r22, r6
     e02:	c9 58       	subi	r28, 0x89	; 137
     e04:	de 4f       	sbci	r29, 0xFE	; 254
     e06:	88 81       	ld	r24, Y
     e08:	99 81       	ldd	r25, Y+1	; 0x01
     e0a:	c7 57       	subi	r28, 0x77	; 119
     e0c:	d1 40       	sbci	r29, 0x01	; 1
     e0e:	b9 d5       	rcall	.+2930   	; 0x1982 <strcpy>
			UART_0_puts("Customer No. changed to ");
     e10:	8a ec       	ldi	r24, 0xCA	; 202
     e12:	96 e0       	ldi	r25, 0x06	; 6
     e14:	3e d5       	rcall	.+2684   	; 0x1892 <UART_0_puts>
			UART_0_puts(customer_no);
     e16:	c9 58       	subi	r28, 0x89	; 137
     e18:	de 4f       	sbci	r29, 0xFE	; 254
     e1a:	88 81       	ld	r24, Y
     e1c:	99 81       	ldd	r25, Y+1	; 0x01
     e1e:	c7 57       	subi	r28, 0x77	; 119
     e20:	d1 40       	sbci	r29, 0x01	; 1
     e22:	37 d5       	rcall	.+2670   	; 0x1892 <UART_0_puts>
			UART_0_puts("\r\n");
     e24:	8f eb       	ldi	r24, 0xBF	; 191
     e26:	95 e0       	ldi	r25, 0x05	; 5
     e28:	34 d5       	rcall	.+2664   	; 0x1892 <UART_0_puts>
			update_customer_no=1;
     e2a:	f1 e0       	ldi	r31, 0x01	; 1
     e2c:	c1 58       	subi	r28, 0x81	; 129
     e2e:	de 4f       	sbci	r29, 0xFE	; 254
     e30:	f8 83       	st	Y, r31
     e32:	cf 57       	subi	r28, 0x7F	; 127
     e34:	d1 40       	sbci	r29, 0x01	; 1
     e36:	79 c0       	rjmp	.+242    	; 0xf2a <get_sms+0x4d4>
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch on by Customer/Master
     e38:	63 ee       	ldi	r22, 0xE3	; 227
     e3a:	76 e0       	ldi	r23, 0x06	; 6
     e3c:	c3 01       	movw	r24, r6
     e3e:	7a d5       	rcall	.+2804   	; 0x1934 <strcasecmp>
     e40:	89 2b       	or	r24, r25
     e42:	e9 f4       	brne	.+58     	; 0xe7e <get_sms+0x428>
     e44:	6e e3       	ldi	r22, 0x3E	; 62
     e46:	72 e0       	ldi	r23, 0x02	; 2
     e48:	ce 01       	movw	r24, r28
     e4a:	83 56       	subi	r24, 0x63	; 99
     e4c:	9f 4f       	sbci	r25, 0xFF	; 255
     e4e:	90 d5       	rcall	.+2848   	; 0x1970 <strcmp>
     e50:	89 2b       	or	r24, r25
     e52:	11 f0       	breq	.+4      	; 0xe58 <get_sms+0x402>
     e54:	cd 28       	or	r12, r13
     e56:	b9 f5       	brne	.+110    	; 0xec6 <get_sms+0x470>
			*system_on=0x31;
     e58:	81 e3       	ldi	r24, 0x31	; 49
     e5a:	c5 58       	subi	r28, 0x85	; 133
     e5c:	de 4f       	sbci	r29, 0xFE	; 254
     e5e:	e8 81       	ld	r30, Y
     e60:	f9 81       	ldd	r31, Y+1	; 0x01
     e62:	cb 57       	subi	r28, 0x7B	; 123
     e64:	d1 40       	sbci	r29, 0x01	; 1
     e66:	80 83       	st	Z, r24
			UART_0_puts("System Turned ON....\r\n");
     e68:	86 ee       	ldi	r24, 0xE6	; 230
     e6a:	96 e0       	ldi	r25, 0x06	; 6
     e6c:	12 d5       	rcall	.+2596   	; 0x1892 <UART_0_puts>
			sbi(PORTB,7);
     e6e:	2f 9a       	sbi	0x05, 7	; 5
			update_remote_control=1;
     e70:	f1 e0       	ldi	r31, 0x01	; 1
     e72:	c3 58       	subi	r28, 0x83	; 131
     e74:	de 4f       	sbci	r29, 0xFE	; 254
     e76:	f8 83       	st	Y, r31
     e78:	cd 57       	subi	r28, 0x7D	; 125
     e7a:	d1 40       	sbci	r29, 0x01	; 1
     e7c:	56 c0       	rjmp	.+172    	; 0xf2a <get_sms+0x4d4>
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch off by Customer/Master
     e7e:	6d ef       	ldi	r22, 0xFD	; 253
     e80:	76 e0       	ldi	r23, 0x06	; 6
     e82:	c3 01       	movw	r24, r6
     e84:	57 d5       	rcall	.+2734   	; 0x1934 <strcasecmp>
     e86:	89 2b       	or	r24, r25
     e88:	f1 f4       	brne	.+60     	; 0xec6 <get_sms+0x470>
     e8a:	6e e3       	ldi	r22, 0x3E	; 62
     e8c:	72 e0       	ldi	r23, 0x02	; 2
     e8e:	ce 01       	movw	r24, r28
     e90:	83 56       	subi	r24, 0x63	; 99
     e92:	9f 4f       	sbci	r25, 0xFF	; 255
     e94:	6d d5       	rcall	.+2778   	; 0x1970 <strcmp>
     e96:	89 2b       	or	r24, r25
     e98:	19 f0       	breq	.+6      	; 0xea0 <get_sms+0x44a>
     e9a:	cd 28       	or	r12, r13
     e9c:	09 f0       	breq	.+2      	; 0xea0 <get_sms+0x44a>
     e9e:	45 c0       	rjmp	.+138    	; 0xf2a <get_sms+0x4d4>
			*system_on=0x30;
     ea0:	80 e3       	ldi	r24, 0x30	; 48
     ea2:	c5 58       	subi	r28, 0x85	; 133
     ea4:	de 4f       	sbci	r29, 0xFE	; 254
     ea6:	e8 81       	ld	r30, Y
     ea8:	f9 81       	ldd	r31, Y+1	; 0x01
     eaa:	cb 57       	subi	r28, 0x7B	; 123
     eac:	d1 40       	sbci	r29, 0x01	; 1
     eae:	80 83       	st	Z, r24
			UART_0_puts("System Turned OFF....\r\n");
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	97 e0       	ldi	r25, 0x07	; 7
     eb4:	ee d4       	rcall	.+2524   	; 0x1892 <UART_0_puts>
			cbi(PORTB,7);
     eb6:	2f 98       	cbi	0x05, 7	; 5
			update_remote_control=1;
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	c3 58       	subi	r28, 0x83	; 131
     ebc:	de 4f       	sbci	r29, 0xFE	; 254
     ebe:	f8 83       	st	Y, r31
     ec0:	cd 57       	subi	r28, 0x7D	; 125
     ec2:	d1 40       	sbci	r29, 0x01	; 1
     ec4:	32 c0       	rjmp	.+100    	; 0xf2a <get_sms+0x4d4>
		}
		else if ((strncmp(msg,"SNO+E",5)==0) && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  To change serial number by Master
     ec6:	45 e0       	ldi	r20, 0x05	; 5
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	69 e1       	ldi	r22, 0x19	; 25
     ecc:	77 e0       	ldi	r23, 0x07	; 7
     ece:	c3 01       	movw	r24, r6
     ed0:	5f d5       	rcall	.+2750   	; 0x1990 <strncmp>
     ed2:	89 2b       	or	r24, r25
     ed4:	51 f5       	brne	.+84     	; 0xf2a <get_sms+0x4d4>
     ed6:	6e e3       	ldi	r22, 0x3E	; 62
     ed8:	72 e0       	ldi	r23, 0x02	; 2
     eda:	ce 01       	movw	r24, r28
     edc:	83 56       	subi	r24, 0x63	; 99
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	47 d5       	rcall	.+2702   	; 0x1970 <strcmp>
     ee2:	89 2b       	or	r24, r25
     ee4:	11 f5       	brne	.+68     	; 0xf2a <get_sms+0x4d4>
			strncpy(Serial_num,msg+4,11);
     ee6:	4b e0       	ldi	r20, 0x0B	; 11
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	c0 58       	subi	r28, 0x80	; 128
     eec:	de 4f       	sbci	r29, 0xFE	; 254
     eee:	68 81       	ld	r22, Y
     ef0:	79 81       	ldd	r23, Y+1	; 0x01
     ef2:	c0 58       	subi	r28, 0x80	; 128
     ef4:	d1 40       	sbci	r29, 0x01	; 1
     ef6:	c7 58       	subi	r28, 0x87	; 135
     ef8:	de 4f       	sbci	r29, 0xFE	; 254
     efa:	88 81       	ld	r24, Y
     efc:	99 81       	ldd	r25, Y+1	; 0x01
     efe:	c9 57       	subi	r28, 0x79	; 121
     f00:	d1 40       	sbci	r29, 0x01	; 1
     f02:	54 d5       	rcall	.+2728   	; 0x19ac <strncpy>
			
			UART_0_puts("Serial No. changed to ");
     f04:	8f e1       	ldi	r24, 0x1F	; 31
     f06:	97 e0       	ldi	r25, 0x07	; 7
     f08:	c4 d4       	rcall	.+2440   	; 0x1892 <UART_0_puts>
			UART_0_puts(Serial_num);
     f0a:	c7 58       	subi	r28, 0x87	; 135
     f0c:	de 4f       	sbci	r29, 0xFE	; 254
     f0e:	88 81       	ld	r24, Y
     f10:	99 81       	ldd	r25, Y+1	; 0x01
     f12:	c9 57       	subi	r28, 0x79	; 121
     f14:	d1 40       	sbci	r29, 0x01	; 1
     f16:	bd d4       	rcall	.+2426   	; 0x1892 <UART_0_puts>
			UART_0_puts("\r\n");
     f18:	8f eb       	ldi	r24, 0xBF	; 191
     f1a:	95 e0       	ldi	r25, 0x05	; 5
     f1c:	ba d4       	rcall	.+2420   	; 0x1892 <UART_0_puts>
			update_serial_no=1;
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	c2 58       	subi	r28, 0x82	; 130
     f22:	de 4f       	sbci	r29, 0xFE	; 254
     f24:	28 83       	st	Y, r18
     f26:	ce 57       	subi	r28, 0x7E	; 126
     f28:	d1 40       	sbci	r29, 0x01	; 1
		}
	
		message_number++;
     f2a:	c1 01       	movw	r24, r2
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	23 1a       	sub	r2, r19
     f30:	33 0a       	sbc	r3, r19
	}
	UART_0_puts("Messages converted to Readable Format...\r\n");
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     f32:	cc 58       	subi	r28, 0x8C	; 140
     f34:	de 4f       	sbci	r29, 0xFE	; 254
     f36:	e8 81       	ld	r30, Y
     f38:	f9 81       	ldd	r31, Y+1	; 0x01
     f3a:	c4 57       	subi	r28, 0x74	; 116
     f3c:	d1 40       	sbci	r29, 0x01	; 1
     f3e:	e8 17       	cp	r30, r24
     f40:	f9 07       	cpc	r31, r25
     f42:	0c f0       	brlt	.+2      	; 0xf46 <get_sms+0x4f0>
     f44:	6b ce       	rjmp	.-810    	; 0xc1c <get_sms+0x1c6>
     f46:	c2 58       	subi	r28, 0x82	; 130
     f48:	de 4f       	sbci	r29, 0xFE	; 254
     f4a:	b8 80       	ld	r11, Y
     f4c:	ce 57       	subi	r28, 0x7E	; 126
     f4e:	d1 40       	sbci	r29, 0x01	; 1
	
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     f50:	c1 58       	subi	r28, 0x81	; 129
     f52:	de 4f       	sbci	r29, 0xFE	; 254
     f54:	f8 81       	ld	r31, Y
     f56:	cf 57       	subi	r28, 0x7F	; 127
     f58:	d1 40       	sbci	r29, 0x01	; 1
     f5a:	f1 11       	cpse	r31, r1
     f5c:	7b c0       	rjmp	.+246    	; 0x1054 <get_sms+0x5fe>
     f5e:	11 c0       	rjmp	.+34     	; 0xf82 <get_sms+0x52c>
		i=0;
		while (i<=12){
			eeprom_update_byte((uint8_t*)(i+16),customer_no[i]);
     f60:	f8 01       	movw	r30, r16
     f62:	61 91       	ld	r22, Z+
     f64:	8f 01       	movw	r16, r30
     f66:	c6 01       	movw	r24, r12
     f68:	8e 0f       	add	r24, r30
     f6a:	9f 1f       	adc	r25, r31
     f6c:	71 d5       	rcall	.+2786   	; 0x1a50 <eeprom_update_byte>
     f6e:	8f e0       	ldi	r24, 0x0F	; 15
     f70:	97 e2       	ldi	r25, 0x27	; 39
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <get_sms+0x51c>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <get_sms+0x522>
     f78:	00 00       	nop
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
		i=0;
		while (i<=12){
     f7a:	0e 15       	cp	r16, r14
     f7c:	1f 05       	cpc	r17, r15
     f7e:	81 f7       	brne	.-32     	; 0xf60 <get_sms+0x50a>
     f80:	7e c0       	rjmp	.+252    	; 0x107e <get_sms+0x628>
			i++;
		}
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
     f82:	c2 58       	subi	r28, 0x82	; 130
     f84:	de 4f       	sbci	r29, 0xFE	; 254
     f86:	98 81       	ld	r25, Y
     f88:	ce 57       	subi	r28, 0x7E	; 126
     f8a:	d1 40       	sbci	r29, 0x01	; 1
     f8c:	99 23       	and	r25, r25
     f8e:	51 f1       	breq	.+84     	; 0xfe4 <get_sms+0x58e>
     f90:	c7 58       	subi	r28, 0x87	; 135
     f92:	de 4f       	sbci	r29, 0xFE	; 254
     f94:	e8 80       	ld	r14, Y
     f96:	f9 80       	ldd	r15, Y+1	; 0x01
     f98:	c9 57       	subi	r28, 0x79	; 121
     f9a:	d1 40       	sbci	r29, 0x01	; 1
     f9c:	eb e0       	ldi	r30, 0x0B	; 11
     f9e:	ee 0e       	add	r14, r30
     fa0:	f1 1c       	adc	r15, r1
	
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     fa2:	c7 58       	subi	r28, 0x87	; 135
     fa4:	de 4f       	sbci	r29, 0xFE	; 254
     fa6:	08 81       	ld	r16, Y
     fa8:	19 81       	ldd	r17, Y+1	; 0x01
     faa:	c9 57       	subi	r28, 0x79	; 121
     fac:	d1 40       	sbci	r29, 0x01	; 1
     fae:	8f e1       	ldi	r24, 0x1F	; 31
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	6c 01       	movw	r12, r24
     fb4:	c0 1a       	sub	r12, r16
     fb6:	d1 0a       	sbc	r13, r17
	
	// To update serial number in EEPROM
	if (update_serial_no){
		i=0;
		while (i<=10){
			eeprom_update_byte((uint8_t*)(i+32),Serial_num[i]);
     fb8:	f8 01       	movw	r30, r16
     fba:	61 91       	ld	r22, Z+
     fbc:	8f 01       	movw	r16, r30
     fbe:	c6 01       	movw	r24, r12
     fc0:	8e 0f       	add	r24, r30
     fc2:	9f 1f       	adc	r25, r31
     fc4:	45 d5       	rcall	.+2698   	; 0x1a50 <eeprom_update_byte>
     fc6:	8f e0       	ldi	r24, 0x0F	; 15
     fc8:	97 e2       	ldi	r25, 0x27	; 39
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <get_sms+0x574>
     fce:	00 c0       	rjmp	.+0      	; 0xfd0 <get_sms+0x57a>
     fd0:	00 00       	nop
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
		i=0;
		while (i<=10){
     fd2:	0e 15       	cp	r16, r14
     fd4:	1f 05       	cpc	r17, r15
     fd6:	81 f7       	brne	.-32     	; 0xfb8 <get_sms+0x562>
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <get_sms+0x58e>
}

uint8_t get_sms(uint8_t* system_on,char* customer_no,char* Serial_num){
	
	uint8_t i=0,p=0,dataarrived=0;
	uint8_t update_customer_no=0,update_serial_no=0,update_remote_control=0;
     fda:	c3 58       	subi	r28, 0x83	; 131
     fdc:	de 4f       	sbci	r29, 0xFE	; 254
     fde:	18 82       	st	Y, r1
     fe0:	cd 57       	subi	r28, 0x7D	; 125
     fe2:	d1 40       	sbci	r29, 0x01	; 1
			i++;
		}
	}
	
	// To update system on/off status in EEPROM
	if (update_remote_control){
     fe4:	c3 58       	subi	r28, 0x83	; 131
     fe6:	de 4f       	sbci	r29, 0xFE	; 254
     fe8:	98 81       	ld	r25, Y
     fea:	cd 57       	subi	r28, 0x7D	; 125
     fec:	d1 40       	sbci	r29, 0x01	; 1
     fee:	99 23       	and	r25, r25
     ff0:	81 f0       	breq	.+32     	; 0x1012 <get_sms+0x5bc>
		eeprom_update_byte((uint8_t*)30,*system_on);
     ff2:	c5 58       	subi	r28, 0x85	; 133
     ff4:	de 4f       	sbci	r29, 0xFE	; 254
     ff6:	e8 81       	ld	r30, Y
     ff8:	f9 81       	ldd	r31, Y+1	; 0x01
     ffa:	cb 57       	subi	r28, 0x7B	; 123
     ffc:	d1 40       	sbci	r29, 0x01	; 1
     ffe:	60 81       	ld	r22, Z
    1000:	8e e1       	ldi	r24, 0x1E	; 30
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	25 d5       	rcall	.+2634   	; 0x1a50 <eeprom_update_byte>
    1006:	8f e0       	ldi	r24, 0x0F	; 15
    1008:	97 e2       	ldi	r25, 0x27	; 39
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <get_sms+0x5b4>
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <get_sms+0x5ba>
    1010:	00 00       	nop
		_delay_ms(5);  //  EEPROM write time is 3.3ms in data sheet
	}
		
	// To delete all messages
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
    1012:	be 01       	movw	r22, r28
    1014:	6f 54       	subi	r22, 0x4F	; 79
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	86 e3       	ldi	r24, 0x36	; 54
    101a:	97 e0       	ldi	r25, 0x07	; 7
    101c:	d5 d9       	rcall	.-3158   	; 0x3c8 <sim900_cmd>
	UART_0_puts("Deleting Read messages...\r\n");
    101e:	8c e4       	ldi	r24, 0x4C	; 76
    1020:	97 e0       	ldi	r25, 0x07	; 7
    1022:	37 d4       	rcall	.+2158   	; 0x1892 <UART_0_puts>
	
	return 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	44 c0       	rjmp	.+136    	; 0x10b0 <get_sms+0x65a>
	UART_0_puts(no_msg);
	UART_0_puts("\r\n");
	
	// Exiting the function if no new messages have arrived
	if (no_of_msg==0){
		return 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	42 c0       	rjmp	.+132    	; 0x10b0 <get_sms+0x65a>
	}
	
	// Changing the message to readable format
	sim900_cmd("AT+CMGF=1\r\n",simresponse);
	if (strcmp(simresponse,"OK\0")!=0){
		return 0;
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	40 c0       	rjmp	.+128    	; 0x10b0 <get_sms+0x65a>
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	82 32       	cpi	r24, 0x22	; 34
    1034:	09 f0       	breq	.+2      	; 0x1038 <get_sms+0x5e2>
    1036:	77 ce       	rjmp	.-786    	; 0xd26 <get_sms+0x2d0>
    1038:	25 c0       	rjmp	.+74     	; 0x1084 <get_sms+0x62e>
		if (!((strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,MASTER_NUMBER)==0))){
			message_number++;
			continue;
		}
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
    103a:	f3 01       	movw	r30, r6
    103c:	80 81       	ld	r24, Z
    103e:	8b 32       	cpi	r24, 0x2B	; 43
    1040:	39 f5       	brne	.+78     	; 0x1090 <get_sms+0x63a>
    1042:	de ce       	rjmp	.-580    	; 0xe00 <get_sms+0x3aa>
			UART_0_puts("Customer No. changed to ");
			UART_0_puts(customer_no);
			UART_0_puts("\r\n");
			update_customer_no=1;
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch on by Customer/Master
    1044:	63 ee       	ldi	r22, 0xE3	; 227
    1046:	76 e0       	ldi	r23, 0x06	; 6
    1048:	c3 01       	movw	r24, r6
    104a:	74 d4       	rcall	.+2280   	; 0x1934 <strcasecmp>
    104c:	89 2b       	or	r24, r25
    104e:	09 f4       	brne	.+2      	; 0x1052 <get_sms+0x5fc>
    1050:	03 cf       	rjmp	.-506    	; 0xe58 <get_sms+0x402>
    1052:	26 c0       	rjmp	.+76     	; 0x10a0 <get_sms+0x64a>
    1054:	c9 58       	subi	r28, 0x89	; 137
    1056:	de 4f       	sbci	r29, 0xFE	; 254
    1058:	e8 80       	ld	r14, Y
    105a:	f9 80       	ldd	r15, Y+1	; 0x01
    105c:	c7 57       	subi	r28, 0x77	; 119
    105e:	d1 40       	sbci	r29, 0x01	; 1
    1060:	fd e0       	ldi	r31, 0x0D	; 13
    1062:	ef 0e       	add	r14, r31
    1064:	f1 1c       	adc	r15, r1
	
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
    1066:	c9 58       	subi	r28, 0x89	; 137
    1068:	de 4f       	sbci	r29, 0xFE	; 254
    106a:	08 81       	ld	r16, Y
    106c:	19 81       	ldd	r17, Y+1	; 0x01
    106e:	c7 57       	subi	r28, 0x77	; 119
    1070:	d1 40       	sbci	r29, 0x01	; 1
    1072:	8f e0       	ldi	r24, 0x0F	; 15
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	6c 01       	movw	r12, r24
    1078:	c0 1a       	sub	r12, r16
    107a:	d1 0a       	sbc	r13, r17
    107c:	71 cf       	rjmp	.-286    	; 0xf60 <get_sms+0x50a>
			i++;
		}
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
    107e:	b1 10       	cpse	r11, r1
    1080:	87 cf       	rjmp	.-242    	; 0xf90 <get_sms+0x53a>
    1082:	b0 cf       	rjmp	.-160    	; 0xfe4 <get_sms+0x58e>
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	82 32       	cpi	r24, 0x22	; 34
    1088:	09 f0       	breq	.+2      	; 0x108c <get_sms+0x636>
    108a:	61 ce       	rjmp	.-830    	; 0xd4e <get_sms+0x2f8>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
    108c:	22 e0       	ldi	r18, 0x02	; 2
    108e:	6b ce       	rjmp	.-810    	; 0xd66 <get_sms+0x310>
			UART_0_puts("Customer No. changed to ");
			UART_0_puts(customer_no);
			UART_0_puts("\r\n");
			update_customer_no=1;
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch on by Customer/Master
    1090:	63 ee       	ldi	r22, 0xE3	; 227
    1092:	76 e0       	ldi	r23, 0x06	; 6
    1094:	c3 01       	movw	r24, r6
    1096:	4e d4       	rcall	.+2204   	; 0x1934 <strcasecmp>
    1098:	89 2b       	or	r24, r25
    109a:	09 f4       	brne	.+2      	; 0x109e <get_sms+0x648>
    109c:	dd ce       	rjmp	.-582    	; 0xe58 <get_sms+0x402>
    109e:	ef ce       	rjmp	.-546    	; 0xe7e <get_sms+0x428>
			*system_on=0x31;
			UART_0_puts("System Turned ON....\r\n");
			sbi(PORTB,7);
			update_remote_control=1;
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch off by Customer/Master
    10a0:	6d ef       	ldi	r22, 0xFD	; 253
    10a2:	76 e0       	ldi	r23, 0x06	; 6
    10a4:	c3 01       	movw	r24, r6
    10a6:	46 d4       	rcall	.+2188   	; 0x1934 <strcasecmp>
    10a8:	89 2b       	or	r24, r25
    10aa:	09 f4       	brne	.+2      	; 0x10ae <get_sms+0x658>
    10ac:	f9 ce       	rjmp	.-526    	; 0xea0 <get_sms+0x44a>
    10ae:	0b cf       	rjmp	.-490    	; 0xec6 <get_sms+0x470>
	// To delete all messages
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
	UART_0_puts("Deleting Read messages...\r\n");
	
	return 1;
}
    10b0:	cf 57       	subi	r28, 0x7F	; 127
    10b2:	de 4f       	sbci	r29, 0xFE	; 254
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	9f 90       	pop	r9
    10d4:	8f 90       	pop	r8
    10d6:	7f 90       	pop	r7
    10d8:	6f 90       	pop	r6
    10da:	5f 90       	pop	r5
    10dc:	4f 90       	pop	r4
    10de:	3f 90       	pop	r3
    10e0:	2f 90       	pop	r2
    10e2:	08 95       	ret

000010e4 <Log_data>:
		}
	}
	return 0;
} 

uint8_t Log_data(char* responseimp,char* Serial_num,char* loc_lat,char* loc_long){
    10e4:	4f 92       	push	r4
    10e6:	5f 92       	push	r5
    10e8:	6f 92       	push	r6
    10ea:	7f 92       	push	r7
    10ec:	8f 92       	push	r8
    10ee:	9f 92       	push	r9
    10f0:	af 92       	push	r10
    10f2:	bf 92       	push	r11
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	d2 50       	subi	r29, 0x02	; 2
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	4c 01       	movw	r8, r24
    1116:	5b 01       	movw	r10, r22
    1118:	3a 01       	movw	r6, r20
    111a:	29 01       	movw	r4, r18
	char simresponse[512],var_remote,dummy;
	uint8_t tabname_length=0,dataarrived=0,e=32,l=0,i=0;
	
	//  If Serial_num gets erased mysteriously
	tabname_length=strlen(Serial_num);
    111c:	fb 01       	movw	r30, r22
    111e:	01 90       	ld	r0, Z+
    1120:	00 20       	and	r0, r0
    1122:	e9 f7       	brne	.-6      	; 0x111e <Log_data+0x3a>
    1124:	ec 50       	subi	r30, 0x0C	; 12
	if (tabname_length!=11){
    1126:	e6 17       	cp	r30, r22
    1128:	b1 f0       	breq	.+44     	; 0x1156 <Log_data+0x72>
    112a:	6b 01       	movw	r12, r22
    112c:	2b e0       	ldi	r18, 0x0B	; 11
    112e:	c2 0e       	add	r12, r18
    1130:	d1 1c       	adc	r13, r1
    1132:	8b 01       	movw	r16, r22
    1134:	80 e2       	ldi	r24, 0x20	; 32
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	7c 01       	movw	r14, r24
    113a:	e6 1a       	sub	r14, r22
    113c:	f7 0a       	sbc	r15, r23
		while (l<11){
			Serial_num[i]=eeprom_read_byte((uint8_t*)e);
    113e:	c7 01       	movw	r24, r14
    1140:	80 0f       	add	r24, r16
    1142:	91 1f       	adc	r25, r17
    1144:	7d d4       	rcall	.+2298   	; 0x1a40 <eeprom_read_byte>
    1146:	f8 01       	movw	r30, r16
    1148:	81 93       	st	Z+, r24
    114a:	8f 01       	movw	r16, r30
	uint8_t tabname_length=0,dataarrived=0,e=32,l=0,i=0;
	
	//  If Serial_num gets erased mysteriously
	tabname_length=strlen(Serial_num);
	if (tabname_length!=11){
		while (l<11){
    114c:	ec 15       	cp	r30, r12
    114e:	fd 05       	cpc	r31, r13
    1150:	b1 f7       	brne	.-20     	; 0x113e <Log_data+0x5a>
			Serial_num[i]=eeprom_read_byte((uint8_t*)e);
			i++;e++;l++;
		}
		Serial_num[i]='\0';
    1152:	f5 01       	movw	r30, r10
    1154:	13 86       	std	Z+11, r1	; 0x0b
	}
	UART_0_puts("Starting CHIP...\r\n");
    1156:	88 e6       	ldi	r24, 0x68	; 104
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	9b d3       	rcall	.+1846   	; 0x1892 <UART_0_puts>
	UART_0_puts(Serial_num);
    115c:	c5 01       	movw	r24, r10
    115e:	99 d3       	rcall	.+1842   	; 0x1892 <UART_0_puts>
	UART_0_puts("\r\n");
    1160:	8f eb       	ldi	r24, 0xBF	; 191
    1162:	95 e0       	ldi	r25, 0x05	; 5
    1164:	96 d3       	rcall	.+1836   	; 0x1892 <UART_0_puts>
	
	//  GPRS services connected and getting ready to Log
	sim900_cmd("AT+CIPSTART=\"TCP\"\,\"52.74.151.81\"\,\"80\"\r\n\0",simresponse);
    1166:	be 01       	movw	r22, r28
    1168:	6f 5f       	subi	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8d e4       	ldi	r24, 0x4D	; 77
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	2b d9       	rcall	.-3498   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")==0){
    1172:	60 e1       	ldi	r22, 0x10	; 16
    1174:	71 e0       	ldi	r23, 0x01	; 1
    1176:	ce 01       	movw	r24, r28
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	fa d3       	rcall	.+2036   	; 0x1970 <strcmp>
    117c:	89 2b       	or	r24, r25
    117e:	09 f0       	breq	.+2      	; 0x1182 <Log_data+0x9e>
    1180:	71 c0       	rjmp	.+226    	; 0x1264 <Log_data+0x180>
		
		//  Enabling data reception again to verify connection
		sbi(UCSR1B,RXEN1);
    1182:	09 ec       	ldi	r16, 0xC9	; 201
    1184:	10 e0       	ldi	r17, 0x00	; 0
    1186:	f8 01       	movw	r30, r16
    1188:	80 81       	ld	r24, Z
    118a:	80 61       	ori	r24, 0x10	; 16
    118c:	80 83       	st	Z, r24
		
		//  Verifying connection
		sim900_response(simresponse);
    118e:	ce 01       	movw	r24, r28
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	d9 d8       	rcall	.-3662   	; 0x346 <sim900_response>
		UART_0_puts("Sending Data...\r\n");
    1194:	8b e7       	ldi	r24, 0x7B	; 123
    1196:	97 e0       	ldi	r25, 0x07	; 7
    1198:	7c d3       	rcall	.+1784   	; 0x1892 <UART_0_puts>
		
		//  Start sending the data							
		UART_1_puts("AT+CIPSEND\r\n\0");
    119a:	86 e7       	ldi	r24, 0x76	; 118
    119c:	92 e0       	ldi	r25, 0x02	; 2
    119e:	9f d3       	rcall	.+1854   	; 0x18de <UART_1_puts>
    11a0:	ff ef       	ldi	r31, 0xFF	; 255
    11a2:	24 e3       	ldi	r18, 0x34	; 52
    11a4:	8c e0       	ldi	r24, 0x0C	; 12
    11a6:	f1 50       	subi	r31, 0x01	; 1
    11a8:	20 40       	sbci	r18, 0x00	; 0
    11aa:	80 40       	sbci	r24, 0x00	; 0
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <Log_data+0xc2>
    11ae:	00 c0       	rjmp	.+0      	; 0x11b0 <Log_data+0xcc>
    11b0:	00 00       	nop
		_delay_ms(500);

		// Sending data
		UART_1_puts("GET /datalogging/write.php?tabname=\0");
    11b2:	84 e8       	ldi	r24, 0x84	; 132
    11b4:	92 e0       	ldi	r25, 0x02	; 2
    11b6:	93 d3       	rcall	.+1830   	; 0x18de <UART_1_puts>
 		UART_1_puts(Serial_num);
    11b8:	c5 01       	movw	r24, r10
    11ba:	91 d3       	rcall	.+1826   	; 0x18de <UART_1_puts>
 		UART_1_putc('&');
    11bc:	86 e2       	ldi	r24, 0x26	; 38
    11be:	87 d3       	rcall	.+1806   	; 0x18ce <UART_1_putc>
		UART_1_puts(responseimp);
    11c0:	c4 01       	movw	r24, r8
    11c2:	8d d3       	rcall	.+1818   	; 0x18de <UART_1_puts>
		
		UART_1_puts("&A46=");
    11c4:	8d e8       	ldi	r24, 0x8D	; 141
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	8a d3       	rcall	.+1812   	; 0x18de <UART_1_puts>
 		UART_1_puts(loc_lat);
    11ca:	c3 01       	movw	r24, r6
    11cc:	88 d3       	rcall	.+1808   	; 0x18de <UART_1_puts>
 		UART_1_puts("&A47=");
    11ce:	83 e9       	ldi	r24, 0x93	; 147
    11d0:	97 e0       	ldi	r25, 0x07	; 7
    11d2:	85 d3       	rcall	.+1802   	; 0x18de <UART_1_puts>
 		UART_1_puts(loc_long);
    11d4:	c2 01       	movw	r24, r4
    11d6:	83 d3       	rcall	.+1798   	; 0x18de <UART_1_puts>
		UART_1_puts(" HTTP/1.1\r\n\0");
    11d8:	89 ea       	ldi	r24, 0xA9	; 169
    11da:	92 e0       	ldi	r25, 0x02	; 2
    11dc:	80 d3       	rcall	.+1792   	; 0x18de <UART_1_puts>
		UART_1_puts("Host:52.74.151.81\r\nAccept: */*\r\nAccept-Language: en-us\r\nConnection: Keep-Alive\r\n\r\n\x1A\0");
    11de:	86 eb       	ldi	r24, 0xB6	; 182
    11e0:	92 e0       	ldi	r25, 0x02	; 2
    11e2:	7d d3       	rcall	.+1786   	; 0x18de <UART_1_puts>
		
		//  Enabling data reception
		sbi(UCSR1B,RXEN1);
    11e4:	f8 01       	movw	r30, r16
    11e6:	80 81       	ld	r24, Z
    11e8:	80 61       	ori	r24, 0x10	; 16
    11ea:	80 83       	st	Z, r24
		
		//  Disabling data reception UART0
		cbi(UCSR0B,RXEN0);
    11ec:	e1 ec       	ldi	r30, 0xC1	; 193
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 7e       	andi	r24, 0xEF	; 239
    11f4:	80 83       	st	Z, r24
		
		while (dummy!='$'){
    11f6:	10 e0       	ldi	r17, 0x00	; 0
			dataarrived=wait_for_data();
			if (dataarrived==0){
				break;
			}
			dummy=UDR1;
    11f8:	0f 2e       	mov	r0, r31
    11fa:	fe ec       	ldi	r31, 0xCE	; 206
    11fc:	ef 2e       	mov	r14, r31
    11fe:	f1 2c       	mov	r15, r1
    1200:	f0 2d       	mov	r31, r0
		
		//  Disabling data reception UART0
		cbi(UCSR0B,RXEN0);
		
		while (dummy!='$'){
			dataarrived=wait_for_data();
    1202:	89 d8       	rcall	.-3822   	; 0x316 <wait_for_data>
			if (dataarrived==0){
    1204:	88 23       	and	r24, r24
    1206:	29 f0       	breq	.+10     	; 0x1212 <Log_data+0x12e>
				break;
			}
			dummy=UDR1;
    1208:	f7 01       	movw	r30, r14
    120a:	10 81       	ld	r17, Z
		sbi(UCSR1B,RXEN1);
		
		//  Disabling data reception UART0
		cbi(UCSR0B,RXEN0);
		
		while (dummy!='$'){
    120c:	14 32       	cpi	r17, 0x24	; 36
    120e:	c9 f7       	brne	.-14     	; 0x1202 <Log_data+0x11e>
    1210:	2d c0       	rjmp	.+90     	; 0x126c <Log_data+0x188>
			if (dataarrived==0){
				break;
			}
			dummy=UDR1;
		}
		dataarrived=wait_for_data();
    1212:	81 d8       	rcall	.-3838   	; 0x316 <wait_for_data>
		var_remote=UDR1;
    1214:	00 91 ce 00 	lds	r16, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		
		//  Enabling data reception UART0
		sbi(UCSR0B,RXEN0);
    1218:	e1 ec       	ldi	r30, 0xC1	; 193
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 61       	ori	r24, 0x10	; 16
    1220:	80 83       	st	Z, r24
		if (dummy=='$'){
    1222:	14 32       	cpi	r17, 0x24	; 36
    1224:	49 f4       	brne	.+18     	; 0x1238 <Log_data+0x154>
			UART_0_puts("Data Sent Successfully to ");
    1226:	89 e9       	ldi	r24, 0x99	; 153
    1228:	97 e0       	ldi	r25, 0x07	; 7
    122a:	33 d3       	rcall	.+1638   	; 0x1892 <UART_0_puts>
			UART_0_puts(Serial_num);
    122c:	c5 01       	movw	r24, r10
    122e:	31 d3       	rcall	.+1634   	; 0x1892 <UART_0_puts>
			UART_0_puts("\r\n");
    1230:	8f eb       	ldi	r24, 0xBF	; 191
    1232:	95 e0       	ldi	r25, 0x05	; 5
    1234:	2e d3       	rcall	.+1628   	; 0x1892 <UART_0_puts>
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <Log_data+0x160>
		}
		else{
			UART_0_puts("Data Sent returns ERROR...\r\n");
    1238:	84 eb       	ldi	r24, 0xB4	; 180
    123a:	97 e0       	ldi	r25, 0x07	; 7
    123c:	2a d3       	rcall	.+1620   	; 0x1892 <UART_0_puts>
			UART_0_puts("Check String or SIMCARD balance...\r\n");
    123e:	81 ed       	ldi	r24, 0xD1	; 209
    1240:	97 e0       	ldi	r25, 0x07	; 7
    1242:	27 d3       	rcall	.+1614   	; 0x1892 <UART_0_puts>
		}
		if (var_remote=='1'){
    1244:	01 33       	cpi	r16, 0x31	; 49
    1246:	31 f4       	brne	.+12     	; 0x1254 <Log_data+0x170>
			cli();
    1248:	f8 94       	cli
			flag_datafreeze=1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <flag_datafreeze>
			sei();
    1250:	78 94       	sei
    1252:	15 c0       	rjmp	.+42     	; 0x127e <Log_data+0x19a>
		}
		else if(var_remote=='2'){
    1254:	02 33       	cpi	r16, 0x32	; 50
    1256:	41 f4       	brne	.+16     	; 0x1268 <Log_data+0x184>
			cli();
    1258:	f8 94       	cli
			flag_datafreeze=0;
    125a:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <flag_datafreeze>
			sei();
    125e:	78 94       	sei
		}
				
		return 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0d c0       	rjmp	.+26     	; 0x127e <Log_data+0x19a>
	}
	
	return 0;
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0b c0       	rjmp	.+22     	; 0x127e <Log_data+0x19a>
			cli();
			flag_datafreeze=0;
			sei();
		}
				
		return 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	09 c0       	rjmp	.+18     	; 0x127e <Log_data+0x19a>
			if (dataarrived==0){
				break;
			}
			dummy=UDR1;
		}
		dataarrived=wait_for_data();
    126c:	54 d8       	rcall	.-3928   	; 0x316 <wait_for_data>
		var_remote=UDR1;
    126e:	00 91 ce 00 	lds	r16, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		
		//  Enabling data reception UART0
		sbi(UCSR0B,RXEN0);
    1272:	e1 ec       	ldi	r30, 0xC1	; 193
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	80 61       	ori	r24, 0x10	; 16
    127a:	80 83       	st	Z, r24
    127c:	d4 cf       	rjmp	.-88     	; 0x1226 <Log_data+0x142>
				
		return 1;
	}
	
	return 0;
}
    127e:	de 5f       	subi	r29, 0xFE	; 254
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
    12aa:	08 95       	ret

000012ac <dataLog>:
	UART_0_puts("Deleting Read messages...\r\n");
	
	return 1;
}

uint8_t dataLog(uint8_t system_on,char* apn,char* Serial_num,uint8_t signal_strength,char* user,char* loc_lat,char* loc_long,uint8_t flag_cooldown){
    12ac:	3f 92       	push	r3
    12ae:	4f 92       	push	r4
    12b0:	5f 92       	push	r5
    12b2:	6f 92       	push	r6
    12b4:	7f 92       	push	r7
    12b6:	8f 92       	push	r8
    12b8:	9f 92       	push	r9
    12ba:	af 92       	push	r10
    12bc:	bf 92       	push	r11
    12be:	cf 92       	push	r12
    12c0:	df 92       	push	r13
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	d2 50       	subi	r29, 0x02	; 2
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	b8 2e       	mov	r11, r24
    12e0:	4b 01       	movw	r8, r22
    12e2:	2a 01       	movw	r4, r20
    12e4:	32 2e       	mov	r3, r18
    12e6:	37 01       	movw	r6, r14
    12e8:	0f 2e       	mov	r0, r31
    12ea:	f6 e0       	ldi	r31, 0x06	; 6
    12ec:	ff 2e       	mov	r15, r31
    12ee:	f0 2d       	mov	r31, r0
	char responseimp[512];
	
	// To acquire GPRS settings
	data_counter=NumberOfAttempts;  // Number of attempts to be made if APN fetch fails
	while (data_counter!=0){
		flag_fetch_gprs = fetch_gprs();
    12f0:	b8 da       	rcall	.-2704   	; 0x862 <fetch_gprs>
		data_counter--;
		if(flag_fetch_gprs==1){  // GPRS settings Fetch successful
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	21 f0       	breq	.+8      	; 0x12fe <dataLog+0x52>
    12f6:	fa 94       	dec	r15
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
    12f8:	f1 10       	cpse	r15, r1
    12fa:	fa cf       	rjmp	.-12     	; 0x12f0 <dataLog+0x44>
    12fc:	25 c0       	rjmp	.+74     	; 0x1348 <dataLog+0x9c>
	
	//For Testing
	//strcpy(responseimp,"A01=1&A02=2");
	
	// Acquiring data for logging
	get_data(system_on,responseimp,2,signal_strength,user,flag_cooldown);
    12fe:	ea 2c       	mov	r14, r10
    1300:	23 2d       	mov	r18, r3
    1302:	42 e0       	ldi	r20, 0x02	; 2
    1304:	be 01       	movw	r22, r28
    1306:	6f 5f       	subi	r22, 0xFF	; 255
    1308:	7f 4f       	sbci	r23, 0xFF	; 255
    130a:	8b 2d       	mov	r24, r11
    130c:	0e 94 66 00 	call	0xcc	; 0xcc <get_data>
    1310:	0f 2e       	mov	r0, r31
    1312:	f6 e0       	ldi	r31, 0x06	; 6
    1314:	ff 2e       	mov	r15, r31
    1316:	f0 2d       	mov	r31, r0
	// Acquiring data for logging and setting APN
	data_counter=NumberOfAttempts;  // Number of attempts to be made if APN set fails
	while (data_counter!=0){
		//Setting APN
		flag_set_apn = set_apn(apn);
    1318:	c4 01       	movw	r24, r8
    131a:	ec da       	rcall	.-2600   	; 0x8f4 <set_apn>
		data_counter--;
		if(flag_set_apn==1){  // APN set successful
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	21 f0       	breq	.+8      	; 0x1328 <dataLog+0x7c>
    1320:	fa 94       	dec	r15
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
    1322:	f1 10       	cpse	r15, r1
    1324:	f9 cf       	rjmp	.-14     	; 0x1318 <dataLog+0x6c>
    1326:	10 c0       	rjmp	.+32     	; 0x1348 <dataLog+0x9c>
    1328:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	// Data Logging
	data_counter=NumberOfAttempts;  // Number of attempts to be made if Dynamic IP allocation fails
	while (data_counter!=0){
		flag_Log_data = Log_data(responseimp,Serial_num,loc_lat,loc_long);
    132a:	96 01       	movw	r18, r12
    132c:	a3 01       	movw	r20, r6
    132e:	b2 01       	movw	r22, r4
    1330:	ce 01       	movw	r24, r28
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	d7 de       	rcall	.-594    	; 0x10e4 <Log_data>
		data_counter--;
		if(flag_Log_data==1){  // Data Logging successful
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	29 f0       	breq	.+10     	; 0x1344 <dataLog+0x98>
    133a:	11 50       	subi	r17, 0x01	; 1
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
    133c:	b1 f7       	brne	.-20     	; 0x132a <dataLog+0x7e>
			return 1;
    133e:	ff 24       	eor	r15, r15
    1340:	f3 94       	inc	r15
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <dataLog+0x9c>
		}		
	}
	
	return 1;
    1344:	ff 24       	eor	r15, r15
    1346:	f3 94       	inc	r15
}
    1348:	8f 2d       	mov	r24, r15
    134a:	de 5f       	subi	r29, 0xFE	; 254
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	ff 90       	pop	r15
    1360:	ef 90       	pop	r14
    1362:	df 90       	pop	r13
    1364:	cf 90       	pop	r12
    1366:	bf 90       	pop	r11
    1368:	af 90       	pop	r10
    136a:	9f 90       	pop	r9
    136c:	8f 90       	pop	r8
    136e:	7f 90       	pop	r7
    1370:	6f 90       	pop	r6
    1372:	5f 90       	pop	r5
    1374:	4f 90       	pop	r4
    1376:	3f 90       	pop	r3
    1378:	08 95       	ret

0000137a <get_loc>:
	cbi(TCCR1B,CS12);
	
	return 1;  //  Data arrived
}

 void get_loc(char* apn,char* loc_lat,char* loc_long){
    137a:	2f 92       	push	r2
    137c:	3f 92       	push	r3
    137e:	4f 92       	push	r4
    1380:	5f 92       	push	r5
    1382:	6f 92       	push	r6
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	c7 58       	subi	r28, 0x87	; 135
    13a4:	d1 09       	sbc	r29, r1
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	4c 01       	movw	r8, r24
    13b2:	5b 01       	movw	r10, r22
    13b4:	6a 01       	movw	r12, r20
	char simresponse[70],set_apn_str[60],dummy[5];
	uint8_t i=0,p=0,number_attempts=0,allokay=1;
	
	//  Initializing Latitude and Longitude if fetch is unsuccessful
	loc_lat[0]='0';loc_lat[1]='\0';
    13b6:	80 e3       	ldi	r24, 0x30	; 48
    13b8:	fb 01       	movw	r30, r22
    13ba:	80 83       	st	Z, r24
    13bc:	11 82       	std	Z+1, r1	; 0x01
	loc_long[0]='0';loc_long[1]='\0';
    13be:	fa 01       	movw	r30, r20
    13c0:	80 83       	st	Z, r24
    13c2:	11 82       	std	Z+1, r1	; 0x01
    13c4:	12 e0       	ldi	r17, 0x02	; 2
	return 1;  //  Data arrived
}

 void get_loc(char* apn,char* loc_lat,char* loc_long){
	char simresponse[70],set_apn_str[60],dummy[5];
	uint8_t i=0,p=0,number_attempts=0,allokay=1;
    13c6:	01 e0       	ldi	r16, 0x01	; 1
			continue;
		}
		UART_0_puts("Connection Type set to GPRS successfully...\r\n");
		UART_0_puts("Setting APN for Loc....\r\n");
		//  Setting APN
		set_apn_str[0]='\0';
    13c8:	7e 01       	movw	r14, r28
    13ca:	f7 e4       	ldi	r31, 0x47	; 71
    13cc:	ef 0e       	add	r14, r31
    13ce:	f1 1c       	adc	r15, r1
		strcat(set_apn_str,"AT+SAPBR=3,1,\"APN\",\"");
    13d0:	0f 2e       	mov	r0, r31
    13d2:	f5 e1       	ldi	r31, 0x15	; 21
    13d4:	3f 2e       	mov	r3, r31
    13d6:	f0 2d       	mov	r31, r0
		strcat(set_apn_str,apn);
		strcat(set_apn_str,"\"\r\n\0");
    13d8:	0f 2e       	mov	r0, r31
    13da:	f2 e2       	ldi	r31, 0x22	; 34
    13dc:	4f 2e       	mov	r4, r31
    13de:	fd e0       	ldi	r31, 0x0D	; 13
    13e0:	5f 2e       	mov	r5, r31
    13e2:	fa e0       	ldi	r31, 0x0A	; 10
    13e4:	6f 2e       	mov	r6, r31
    13e6:	71 2c       	mov	r7, r1
    13e8:	f0 2d       	mov	r31, r0
    13ea:	24 2e       	mov	r2, r20
    13ec:	16 c0       	rjmp	.+44     	; 0x141a <get_loc+0xa0>
	number_attempts=NumberOfAttempts-4;  //  Because some ICs don't have this functionality so reducing number of attempts to save time
	
	while (number_attempts>0){
		number_attempts--;
		
		if (allokay==0){
    13ee:	01 11       	cpse	r16, r1
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <get_loc+0xa0>
			allokay=1;
			UART_0_puts("Deactivating Bearer...\r\n");
    13f2:	86 ef       	ldi	r24, 0xF6	; 246
    13f4:	97 e0       	ldi	r25, 0x07	; 7
    13f6:	4d d2       	rcall	.+1178   	; 0x1892 <UART_0_puts>
			//  Deactivitate Bearer
			sim900_cmd("AT+SAPBR=0,1\r\n\0",simresponse);
    13f8:	be 01       	movw	r22, r28
    13fa:	6f 5f       	subi	r22, 0xFF	; 255
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	8b e0       	ldi	r24, 0x0B	; 11
    1400:	93 e0       	ldi	r25, 0x03	; 3
    1402:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
    1406:	2f ef       	ldi	r18, 0xFF	; 255
    1408:	84 e3       	ldi	r24, 0x34	; 52
    140a:	9c e0       	ldi	r25, 0x0C	; 12
    140c:	21 50       	subi	r18, 0x01	; 1
    140e:	80 40       	sbci	r24, 0x00	; 0
    1410:	90 40       	sbci	r25, 0x00	; 0
    1412:	e1 f7       	brne	.-8      	; 0x140c <get_loc+0x92>
    1414:	00 c0       	rjmp	.+0      	; 0x1416 <get_loc+0x9c>
    1416:	00 00       	nop
	
	while (number_attempts>0){
		number_attempts--;
		
		if (allokay==0){
			allokay=1;
    1418:	01 e0       	ldi	r16, 0x01	; 1
			UART_0_puts("Deactivating Bearer...\r\n");
			//  Deactivitate Bearer
			sim900_cmd("AT+SAPBR=0,1\r\n\0",simresponse);
			_delay_ms(500);  //  Waiting for response
		}
		UART_0_puts("setting Connection type as GPRS...\r\n");
    141a:	8f e0       	ldi	r24, 0x0F	; 15
    141c:	98 e0       	ldi	r25, 0x08	; 8
    141e:	39 d2       	rcall	.+1138   	; 0x1892 <UART_0_puts>
		//  Setting connection type as GPRS
		sim900_cmd("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r\n\0",simresponse);
    1420:	be 01       	movw	r22, r28
    1422:	6f 5f       	subi	r22, 0xFF	; 255
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	8b e1       	ldi	r24, 0x1B	; 27
    1428:	93 e0       	ldi	r25, 0x03	; 3
    142a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")!=0){
    142e:	60 e1       	ldi	r22, 0x10	; 16
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	ce 01       	movw	r24, r28
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	9c d2       	rcall	.+1336   	; 0x1970 <strcmp>
    1438:	89 2b       	or	r24, r25
    143a:	21 f0       	breq	.+8      	; 0x1444 <get_loc+0xca>
			UART_0_puts("Response returns ERROR...\r\n");
    143c:	84 e3       	ldi	r24, 0x34	; 52
    143e:	98 e0       	ldi	r25, 0x08	; 8
    1440:	28 d2       	rcall	.+1104   	; 0x1892 <UART_0_puts>
			continue;
    1442:	0b c1       	rjmp	.+534    	; 0x165a <get_loc+0x2e0>
		}
		UART_0_puts("Connection Type set to GPRS successfully...\r\n");
    1444:	80 e5       	ldi	r24, 0x50	; 80
    1446:	98 e0       	ldi	r25, 0x08	; 8
    1448:	24 d2       	rcall	.+1096   	; 0x1892 <UART_0_puts>
		UART_0_puts("Setting APN for Loc....\r\n");
    144a:	8e e7       	ldi	r24, 0x7E	; 126
    144c:	98 e0       	ldi	r25, 0x08	; 8
    144e:	21 d2       	rcall	.+1090   	; 0x1892 <UART_0_puts>
		//  Setting APN
		set_apn_str[0]='\0';
    1450:	f7 01       	movw	r30, r14
    1452:	10 82       	st	Z, r1
		strcat(set_apn_str,"AT+SAPBR=3,1,\"APN\",\"");
    1454:	d7 01       	movw	r26, r14
    1456:	0d 90       	ld	r0, X+
    1458:	00 20       	and	r0, r0
    145a:	e9 f7       	brne	.-6      	; 0x1456 <get_loc+0xdc>
    145c:	11 97       	sbiw	r26, 0x01	; 1
    145e:	e8 e9       	ldi	r30, 0x98	; 152
    1460:	f8 e0       	ldi	r31, 0x08	; 8
    1462:	83 2d       	mov	r24, r3
    1464:	01 90       	ld	r0, Z+
    1466:	0d 92       	st	X+, r0
    1468:	8a 95       	dec	r24
    146a:	e1 f7       	brne	.-8      	; 0x1464 <get_loc+0xea>
		strcat(set_apn_str,apn);
    146c:	b4 01       	movw	r22, r8
    146e:	c7 01       	movw	r24, r14
    1470:	74 d2       	rcall	.+1256   	; 0x195a <strcat>
		strcat(set_apn_str,"\"\r\n\0");
    1472:	f7 01       	movw	r30, r14
    1474:	01 90       	ld	r0, Z+
    1476:	00 20       	and	r0, r0
    1478:	e9 f7       	brne	.-6      	; 0x1474 <get_loc+0xfa>
    147a:	31 97       	sbiw	r30, 0x01	; 1
    147c:	40 82       	st	Z, r4
    147e:	51 82       	std	Z+1, r5	; 0x01
    1480:	62 82       	std	Z+2, r6	; 0x02
    1482:	73 82       	std	Z+3, r7	; 0x03
		sim900_cmd(set_apn_str,simresponse);
    1484:	be 01       	movw	r22, r28
    1486:	6f 5f       	subi	r22, 0xFF	; 255
    1488:	7f 4f       	sbci	r23, 0xFF	; 255
    148a:	c7 01       	movw	r24, r14
    148c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")!=0){
    1490:	60 e1       	ldi	r22, 0x10	; 16
    1492:	71 e0       	ldi	r23, 0x01	; 1
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	6b d2       	rcall	.+1238   	; 0x1970 <strcmp>
    149a:	89 2b       	or	r24, r25
    149c:	21 f0       	breq	.+8      	; 0x14a6 <get_loc+0x12c>
			UART_0_puts("APN not set...returns ERROR...\r\n");
    149e:	8d ea       	ldi	r24, 0xAD	; 173
    14a0:	98 e0       	ldi	r25, 0x08	; 8
    14a2:	f7 d1       	rcall	.+1006   	; 0x1892 <UART_0_puts>
			continue;
    14a4:	da c0       	rjmp	.+436    	; 0x165a <get_loc+0x2e0>
		}
		UART_0_puts("APN set successfully to ");
    14a6:	8e ec       	ldi	r24, 0xCE	; 206
    14a8:	98 e0       	ldi	r25, 0x08	; 8
    14aa:	f3 d1       	rcall	.+998    	; 0x1892 <UART_0_puts>
		UART_0_puts(apn);
    14ac:	c4 01       	movw	r24, r8
    14ae:	f1 d1       	rcall	.+994    	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
    14b0:	8f eb       	ldi	r24, 0xBF	; 191
    14b2:	95 e0       	ldi	r25, 0x05	; 5
    14b4:	ee d1       	rcall	.+988    	; 0x1892 <UART_0_puts>
		
		//  Open Bearer
		sim900_cmd("AT+SAPBR=1,1\r\n\0",simresponse);
    14b6:	be 01       	movw	r22, r28
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	8c e3       	ldi	r24, 0x3C	; 60
    14be:	93 e0       	ldi	r25, 0x03	; 3
    14c0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")!=0){
    14c4:	60 e1       	ldi	r22, 0x10	; 16
    14c6:	71 e0       	ldi	r23, 0x01	; 1
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	51 d2       	rcall	.+1186   	; 0x1970 <strcmp>
    14ce:	89 2b       	or	r24, r25
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <get_loc+0x15a>
    14d2:	d3 c0       	rjmp	.+422    	; 0x167a <get_loc+0x300>
			allokay=0;
			continue;
		}
	
		//  Query Bearer
		sim900_cmd("AT+SAPBR=2,1\r\n\0",simresponse);
    14d4:	be 01       	movw	r22, r28
    14d6:	6f 5f       	subi	r22, 0xFF	; 255
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8c e4       	ldi	r24, 0x4C	; 76
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
		if(strcmp(simresponse,"ERROR\0")==0){
    14e2:	62 ee       	ldi	r22, 0xE2	; 226
    14e4:	71 e0       	ldi	r23, 0x01	; 1
    14e6:	ce 01       	movw	r24, r28
    14e8:	01 96       	adiw	r24, 0x01	; 1
    14ea:	42 d2       	rcall	.+1156   	; 0x1970 <strcmp>
    14ec:	89 2b       	or	r24, r25
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <get_loc+0x178>
    14f0:	b4 c0       	rjmp	.+360    	; 0x165a <get_loc+0x2e0>
			continue;
		}
		//  Enable reception again for OK
		sbi(UCSR1B,RXEN1);
    14f2:	e9 ec       	ldi	r30, 0xC9	; 201
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	80 61       	ori	r24, 0x10	; 16
    14fa:	80 83       	st	Z, r24
		sim900_response(simresponse);
    14fc:	ce 01       	movw	r24, r28
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	0e 94 a3 01 	call	0x346	; 0x346 <sim900_response>
		if (strcmp(simresponse,"OK\0")!=0){
    1504:	60 e1       	ldi	r22, 0x10	; 16
    1506:	71 e0       	ldi	r23, 0x01	; 1
    1508:	ce 01       	movw	r24, r28
    150a:	01 96       	adiw	r24, 0x01	; 1
    150c:	31 d2       	rcall	.+1122   	; 0x1970 <strcmp>
    150e:	89 2b       	or	r24, r25
    1510:	09 f0       	breq	.+2      	; 0x1514 <get_loc+0x19a>
    1512:	b3 c0       	rjmp	.+358    	; 0x167a <get_loc+0x300>
			allokay=0;
			continue;
		}
		UART_0_puts("Fetching Location Coordinates...\r\n");
    1514:	87 ee       	ldi	r24, 0xE7	; 231
    1516:	98 e0       	ldi	r25, 0x08	; 8
    1518:	bc d1       	rcall	.+888    	; 0x1892 <UART_0_puts>
		//  Get Latitude and Longitude
		sim900_cmd("AT+CIPGSMLOC=1,1\r\n\0",simresponse);
    151a:	be 01       	movw	r22, r28
    151c:	6f 5f       	subi	r22, 0xFF	; 255
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8c e5       	ldi	r24, 0x5C	; 92
    1522:	93 e0       	ldi	r25, 0x03	; 3
    1524:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
	    if(strcmp(simresponse,"ERROR\0")==0){
    1528:	62 ee       	ldi	r22, 0xE2	; 226
    152a:	71 e0       	ldi	r23, 0x01	; 1
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	1f d2       	rcall	.+1086   	; 0x1970 <strcmp>
    1532:	89 2b       	or	r24, r25
    1534:	21 f4       	brne	.+8      	; 0x153e <get_loc+0x1c4>
			UART_0_puts("Location Not found....Retrying...\r\n");
    1536:	8a e0       	ldi	r24, 0x0A	; 10
    1538:	99 e0       	ldi	r25, 0x09	; 9
    153a:	ab d1       	rcall	.+854    	; 0x1892 <UART_0_puts>
			continue;
    153c:	8e c0       	rjmp	.+284    	; 0x165a <get_loc+0x2e0>
		}
		
		//  Enable reception again for OK
		sbi(UCSR1B,RXEN1);
    153e:	e9 ec       	ldi	r30, 0xC9	; 201
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	80 61       	ori	r24, 0x10	; 16
    1546:	80 83       	st	Z, r24
		sim900_response(dummy);
    1548:	ce 01       	movw	r24, r28
    154a:	8d 57       	subi	r24, 0x7D	; 125
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	0e 94 a3 01 	call	0x346	; 0x346 <sim900_response>
		if (strcmp(dummy,"OK\0")!=0){
    1552:	60 e1       	ldi	r22, 0x10	; 16
    1554:	71 e0       	ldi	r23, 0x01	; 1
    1556:	ce 01       	movw	r24, r28
    1558:	8d 57       	subi	r24, 0x7D	; 125
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	09 d2       	rcall	.+1042   	; 0x1970 <strcmp>
    155e:	89 2b       	or	r24, r25
    1560:	09 f0       	breq	.+2      	; 0x1564 <get_loc+0x1ea>
    1562:	8b c0       	rjmp	.+278    	; 0x167a <get_loc+0x300>
			allokay=0;
			continue;
		}
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	8c 32       	cpi	r24, 0x2C	; 44
    1568:	09 f4       	brne	.+2      	; 0x156c <get_loc+0x1f2>
    156a:	7b c0       	rjmp	.+246    	; 0x1662 <get_loc+0x2e8>
    156c:	fe 01       	movw	r30, r28
    156e:	32 96       	adiw	r30, 0x02	; 2
    1570:	80 e0       	ldi	r24, 0x00	; 0
			i++;
    1572:	8f 5f       	subi	r24, 0xFF	; 255
			allokay=0;
			continue;
		}
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
    1574:	91 91       	ld	r25, Z+
    1576:	9c 32       	cpi	r25, 0x2C	; 44
    1578:	e1 f7       	brne	.-8      	; 0x1572 <get_loc+0x1f8>
			i++;
		}
		i++;
    157a:	8f 5f       	subi	r24, 0xFF	; 255
		while (simresponse[i]!=0x2C && i<70){
    157c:	e1 e0       	ldi	r30, 0x01	; 1
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	ec 0f       	add	r30, r28
    1582:	fd 1f       	adc	r31, r29
    1584:	e8 0f       	add	r30, r24
    1586:	f1 1d       	adc	r31, r1
    1588:	90 81       	ld	r25, Z
    158a:	9c 32       	cpi	r25, 0x2C	; 44
    158c:	b1 f0       	breq	.+44     	; 0x15ba <get_loc+0x240>
    158e:	86 34       	cpi	r24, 0x46	; 70
    1590:	10 f0       	brcs	.+4      	; 0x1596 <get_loc+0x21c>
    1592:	15 c0       	rjmp	.+42     	; 0x15be <get_loc+0x244>
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	ec 2d       	mov	r30, r12
    1598:	fd 2d       	mov	r31, r13
		while (simresponse[i]!=0x2C && i<70){
			loc_long[p]=simresponse[i];
    159a:	91 93       	st	Z+, r25
    159c:	2e 2f       	mov	r18, r30
    159e:	22 19       	sub	r18, r2
			p++;i++;	 
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
		while (simresponse[i]!=0x2C && i<70){
    15a2:	a1 e0       	ldi	r26, 0x01	; 1
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ac 0f       	add	r26, r28
    15a8:	bd 1f       	adc	r27, r29
    15aa:	a8 0f       	add	r26, r24
    15ac:	b1 1d       	adc	r27, r1
    15ae:	9c 91       	ld	r25, X
    15b0:	9c 32       	cpi	r25, 0x2C	; 44
    15b2:	31 f0       	breq	.+12     	; 0x15c0 <get_loc+0x246>
    15b4:	86 34       	cpi	r24, 0x46	; 70
    15b6:	88 f3       	brcs	.-30     	; 0x159a <get_loc+0x220>
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <get_loc+0x246>
		if (strcmp(dummy,"OK\0")!=0){
			allokay=0;
			continue;
		}
	 
		i=0;p=0;
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <get_loc+0x246>
    15be:	20 e0       	ldi	r18, 0x00	; 0
		i++;
		while (simresponse[i]!=0x2C && i<70){
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
    15c0:	f6 01       	movw	r30, r12
    15c2:	e2 0f       	add	r30, r18
    15c4:	f1 1d       	adc	r31, r1
    15c6:	10 82       	st	Z, r1
		i++;
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	98 0f       	add	r25, r24
		p=0;
		while (simresponse[i]!=0x2C && i<70){
    15cc:	e1 e0       	ldi	r30, 0x01	; 1
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	ec 0f       	add	r30, r28
    15d2:	fd 1f       	adc	r31, r29
    15d4:	e9 0f       	add	r30, r25
    15d6:	f1 1d       	adc	r31, r1
    15d8:	20 81       	ld	r18, Z
    15da:	2c 32       	cpi	r18, 0x2C	; 44
    15dc:	b1 f0       	breq	.+44     	; 0x160a <get_loc+0x290>
    15de:	96 34       	cpi	r25, 0x46	; 70
    15e0:	18 f0       	brcs	.+6      	; 0x15e8 <get_loc+0x26e>
    15e2:	15 c0       	rjmp	.+42     	; 0x160e <get_loc+0x294>
	 
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
		while (simresponse[i]!=0x2C && i<70){
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
    15e6:	92 e0       	ldi	r25, 0x02	; 2
    15e8:	f5 01       	movw	r30, r10
		p=0;
		while (simresponse[i]!=0x2C && i<70){
			loc_lat[p]=simresponse[i];
    15ea:	21 93       	st	Z+, r18
			p++;i++;
    15ec:	39 2f       	mov	r19, r25
    15ee:	38 1b       	sub	r19, r24
    15f0:	9f 5f       	subi	r25, 0xFF	; 255
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
		p=0;
		while (simresponse[i]!=0x2C && i<70){
    15f2:	a1 e0       	ldi	r26, 0x01	; 1
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ac 0f       	add	r26, r28
    15f8:	bd 1f       	adc	r27, r29
    15fa:	a9 0f       	add	r26, r25
    15fc:	b1 1d       	adc	r27, r1
    15fe:	2c 91       	ld	r18, X
    1600:	2c 32       	cpi	r18, 0x2C	; 44
    1602:	31 f0       	breq	.+12     	; 0x1610 <get_loc+0x296>
    1604:	96 34       	cpi	r25, 0x46	; 70
    1606:	89 f7       	brne	.-30     	; 0x15ea <get_loc+0x270>
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <get_loc+0x296>
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
		p=0;
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <get_loc+0x296>
    160e:	30 e0       	ldi	r19, 0x00	; 0
		while (simresponse[i]!=0x2C && i<70){
			loc_lat[p]=simresponse[i];
			p++;i++;
		}
		loc_lat[p]='\0';
    1610:	f5 01       	movw	r30, r10
    1612:	e3 0f       	add	r30, r19
    1614:	f1 1d       	adc	r31, r1
    1616:	10 82       	st	Z, r1
		UART_0_puts("Location Fetched Successfully...\r\n");
    1618:	8e e2       	ldi	r24, 0x2E	; 46
    161a:	99 e0       	ldi	r25, 0x09	; 9
    161c:	3a d1       	rcall	.+628    	; 0x1892 <UART_0_puts>
		UART_0_puts("Latitude=");
    161e:	81 e5       	ldi	r24, 0x51	; 81
    1620:	99 e0       	ldi	r25, 0x09	; 9
    1622:	37 d1       	rcall	.+622    	; 0x1892 <UART_0_puts>
		UART_0_puts(loc_lat);
    1624:	c5 01       	movw	r24, r10
    1626:	35 d1       	rcall	.+618    	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
    1628:	8f eb       	ldi	r24, 0xBF	; 191
    162a:	95 e0       	ldi	r25, 0x05	; 5
    162c:	32 d1       	rcall	.+612    	; 0x1892 <UART_0_puts>
		UART_0_puts("Longitude=");
    162e:	8b e5       	ldi	r24, 0x5B	; 91
    1630:	99 e0       	ldi	r25, 0x09	; 9
    1632:	2f d1       	rcall	.+606    	; 0x1892 <UART_0_puts>
		UART_0_puts(loc_long);
    1634:	c6 01       	movw	r24, r12
    1636:	2d d1       	rcall	.+602    	; 0x1892 <UART_0_puts>
		UART_0_puts("\r\n");
    1638:	8f eb       	ldi	r24, 0xBF	; 191
    163a:	95 e0       	ldi	r25, 0x05	; 5
    163c:	2a d1       	rcall	.+596    	; 0x1892 <UART_0_puts>
		//  Deactivitate Bearer 
		sim900_cmd("AT+SAPBR=0,1\r\n\0",simresponse);
    163e:	be 01       	movw	r22, r28
    1640:	6f 5f       	subi	r22, 0xFF	; 255
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	8b e0       	ldi	r24, 0x0B	; 11
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <sim900_cmd>
		if (strcmp(simresponse,"OK\0")==0){
    164c:	60 e1       	ldi	r22, 0x10	; 16
    164e:	71 e0       	ldi	r23, 0x01	; 1
    1650:	ce 01       	movw	r24, r28
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	8d d1       	rcall	.+794    	; 0x1970 <strcmp>
    1656:	89 2b       	or	r24, r25
    1658:	99 f0       	breq	.+38     	; 0x1680 <get_loc+0x306>
    165a:	11 50       	subi	r17, 0x01	; 1
	loc_long[0]='0';loc_long[1]='\0';
	
	//  No. of attempts
	number_attempts=NumberOfAttempts-4;  //  Because some ICs don't have this functionality so reducing number of attempts to save time
	
	while (number_attempts>0){
    165c:	09 f0       	breq	.+2      	; 0x1660 <get_loc+0x2e6>
    165e:	c7 ce       	rjmp	.-626    	; 0x13ee <get_loc+0x74>
    1660:	0f c0       	rjmp	.+30     	; 0x1680 <get_loc+0x306>
		i=0;p=0;
		while (simresponse[i]!=0x2C && i<70){  //  0x2C IS FOR ,
			i++;
		}
		i++;
		while (simresponse[i]!=0x2C && i<70){
    1662:	9a 81       	ldd	r25, Y+2	; 0x02
    1664:	9c 32       	cpi	r25, 0x2C	; 44
    1666:	09 f0       	breq	.+2      	; 0x166a <get_loc+0x2f0>
    1668:	95 cf       	rjmp	.-214    	; 0x1594 <get_loc+0x21a>
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
    166a:	f6 01       	movw	r30, r12
    166c:	10 82       	st	Z, r1
		i++;
		p=0;
		while (simresponse[i]!=0x2C && i<70){
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	2c 32       	cpi	r18, 0x2C	; 44
    1672:	09 f0       	breq	.+2      	; 0x1676 <get_loc+0x2fc>
    1674:	b7 cf       	rjmp	.-146    	; 0x15e4 <get_loc+0x26a>
			loc_long[p]=simresponse[i];
			p++;i++;	 
		}
		loc_long[p]='\0';
		i++;
		p=0;
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	cb cf       	rjmp	.-106    	; 0x1610 <get_loc+0x296>
    167a:	11 50       	subi	r17, 0x01	; 1
	loc_long[0]='0';loc_long[1]='\0';
	
	//  No. of attempts
	number_attempts=NumberOfAttempts-4;  //  Because some ICs don't have this functionality so reducing number of attempts to save time
	
	while (number_attempts>0){
    167c:	09 f0       	breq	.+2      	; 0x1680 <get_loc+0x306>
    167e:	b9 ce       	rjmp	.-654    	; 0x13f2 <get_loc+0x78>
		}
	}
 
	return;
	 
    1680:	c9 57       	subi	r28, 0x79	; 121
    1682:	df 4f       	sbci	r29, 0xFF	; 255
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	7f 90       	pop	r7
    16a8:	6f 90       	pop	r6
    16aa:	5f 90       	pop	r5
    16ac:	4f 90       	pop	r4
    16ae:	3f 90       	pop	r3
    16b0:	2f 90       	pop	r2
    16b2:	08 95       	ret

000016b4 <main>:
uint8_t wait_for_data();
void get_loc(char* apn,char* loc_lat,char* loc_long);
void reset_SIM900();


void main(){
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	c4 58       	subi	r28, 0x84	; 132
    16be:	d2 40       	sbci	r29, 0x02	; 2
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
	
	DDRD = 0xFA;
    16ca:	8a ef       	ldi	r24, 0xFA	; 250
    16cc:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	84 b9       	out	0x04, r24	; 4
	
	// To prevent timer from triggering
	sbi(PORTB,6);
    16d2:	2e 9a       	sbi	0x05, 6	; 5
    16d4:	2a ea       	ldi	r18, 0xAA	; 170
    16d6:	36 ee       	ldi	r19, 0xE6	; 230
    16d8:	86 e9       	ldi	r24, 0x96	; 150
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	21 50       	subi	r18, 0x01	; 1
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	80 40       	sbci	r24, 0x00	; 0
    16e2:	90 40       	sbci	r25, 0x00	; 0
    16e4:	d9 f7       	brne	.-10     	; 0x16dc <main+0x28>
    16e6:	00 00       	nop
	
	// Delay for SIM900 initialization <- To investigate why we need this delay here
	_delay_ms(20000);
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0,flag_datalog=0,flag_cooldown=0x89;
    16e8:	89 e8       	ldi	r24, 0x89	; 137
    16ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t dummy,data_counter=0;
	uint16_t e=0,l=0,i=0;
	char Serial_num[20],customer_no[20],apn[30],user[30],responseimp[512],loc_lat[15],loc_long[15];
		
	// Rg Making SIM900 Power ON
	sbi(PORTB,7);
    16ec:	2f 9a       	sbi	0x05, 7	; 5
	
	UART_0_init();
    16ee:	bb d0       	rcall	.+374    	; 0x1866 <UART_0_init>
	UART_1_init();
    16f0:	de d0       	rcall	.+444    	; 0x18ae <UART_1_init>
    16f2:	ef ec       	ldi	r30, 0xCF	; 207
    16f4:	f7 e0       	ldi	r31, 0x07	; 7
    16f6:	31 97       	sbiw	r30, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <main+0x42>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <main+0x48>
    16fc:	00 00       	nop
	
	// Enable Timer Interrupt
	_delay_ms(1);
	sbi(TIMSK1,TOIE1);
    16fe:	ef e6       	ldi	r30, 0x6F	; 111
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	80 83       	st	Z, r24
    1708:	8f ec       	ldi	r24, 0xCF	; 207
    170a:	97 e0       	ldi	r25, 0x07	; 7
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <main+0x58>
    1710:	00 c0       	rjmp	.+0      	; 0x1712 <main+0x5e>
    1712:	00 00       	nop
	_delay_ms(1);
	
	//  Enabling interrupts
	sei();
    1714:	78 94       	sei
	
	// To read previous system on/off status
	system_on=eeprom_read_byte((uint8_t*)30);
    1716:	8e e1       	ldi	r24, 0x1E	; 30
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	92 d1       	rcall	.+804    	; 0x1a40 <eeprom_read_byte>
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	ef e0       	ldi	r30, 0x0F	; 15
    1720:	f7 e2       	ldi	r31, 0x27	; 39
    1722:	31 97       	sbiw	r30, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <main+0x6e>
    1726:	00 c0       	rjmp	.+0      	; 0x1728 <main+0x74>
    1728:	00 00       	nop
	_delay_ms(5);
	
	//  Reception Enable 
	sbi(UCSR0B,RXEN0);
    172a:	e1 ec       	ldi	r30, 0xC1	; 193
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	80 61       	ori	r24, 0x10	; 16
    1732:	80 83       	st	Z, r24
	
	// Start Timer
	start_timer();
    1734:	0e 94 7f 01 	call	0x2fe	; 0x2fe <start_timer>

	//  Stop Timer
	cbi(TCCR1B,CS12);
    1738:	e1 e8       	ldi	r30, 0x81	; 129
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8b 7f       	andi	r24, 0xFB	; 251
    1740:	80 83       	st	Z, r24
    1742:	7e 01       	movw	r14, r28
    1744:	f3 e0       	ldi	r31, 0x03	; 3
    1746:	ef 0e       	add	r14, r31
    1748:	f1 1c       	adc	r15, r1

	// To read last updated Serial No. of controller
	e=32;l=0;i=0;
    174a:	00 e2       	ldi	r16, 0x20	; 32
    174c:	10 e0       	ldi	r17, 0x00	; 0
	while (l<11){
		Serial_num[i]=eeprom_read_byte((uint8_t*)e);
    174e:	c8 01       	movw	r24, r16
    1750:	77 d1       	rcall	.+750    	; 0x1a40 <eeprom_read_byte>
    1752:	f7 01       	movw	r30, r14
    1754:	81 93       	st	Z+, r24
    1756:	7f 01       	movw	r14, r30
		i++;e++;l++;
    1758:	0f 5f       	subi	r16, 0xFF	; 255
    175a:	1f 4f       	sbci	r17, 0xFF	; 255
	//  Stop Timer
	cbi(TCCR1B,CS12);

	// To read last updated Serial No. of controller
	e=32;l=0;i=0;
	while (l<11){
    175c:	0b 32       	cpi	r16, 0x2B	; 43
    175e:	11 05       	cpc	r17, r1
    1760:	b1 f7       	brne	.-20     	; 0x174e <main+0x9a>
		Serial_num[i]=eeprom_read_byte((uint8_t*)e);
		i++;e++;l++;
	}
	Serial_num[i]='\0';
    1762:	1e 86       	std	Y+14, r1	; 0x0e
    1764:	7e 01       	movw	r14, r28
    1766:	f7 e1       	ldi	r31, 0x17	; 23
    1768:	ef 0e       	add	r14, r31
    176a:	f1 1c       	adc	r15, r1
	
	// To read last updated customer number
	e=16;i=0;
    176c:	00 e1       	ldi	r16, 0x10	; 16
    176e:	10 e0       	ldi	r17, 0x00	; 0
	while (i<13){
		customer_no[i]=eeprom_read_byte((uint8_t*)e);
    1770:	c8 01       	movw	r24, r16
    1772:	66 d1       	rcall	.+716    	; 0x1a40 <eeprom_read_byte>
    1774:	f7 01       	movw	r30, r14
    1776:	81 93       	st	Z+, r24
    1778:	7f 01       	movw	r14, r30
		i++;e++;
    177a:	0f 5f       	subi	r16, 0xFF	; 255
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	Serial_num[i]='\0';
	
	// To read last updated customer number
	e=16;i=0;
	while (i<13){
    177e:	0d 31       	cpi	r16, 0x1D	; 29
    1780:	11 05       	cpc	r17, r1
    1782:	b1 f7       	brne	.-20     	; 0x1770 <main+0xbc>
		customer_no[i]=eeprom_read_byte((uint8_t*)e);
		i++;e++;
	}
	customer_no[i]='\0';
    1784:	1c a2       	std	Y+36, r1	; 0x24
	
	// Delay for SIM900 initialization <- To investigate why we need this delay here
	_delay_ms(20000);
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0,flag_datalog=0,flag_cooldown=0x89;
	uint8_t dummy,data_counter=0;
    1786:	b1 2c       	mov	r11, r1
	sbi(PORTB,6);
	
	// Delay for SIM900 initialization <- To investigate why we need this delay here
	_delay_ms(20000);
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0,flag_datalog=0,flag_cooldown=0x89;
    1788:	91 2c       	mov	r9, r1
    178a:	90 e0       	ldi	r25, 0x00	; 0
		while (flag_get_apn!=1){
			flag_get_apn = get_apn(apn,user);
			data_counter++;
			if(data_counter>10){
				// Acquiring data for resetting
				get_data(system_on,responseimp,2,signal_strength,user,&flag_cooldown);
    178c:	3e 01       	movw	r6, r28
    178e:	f2 e0       	ldi	r31, 0x02	; 2
    1790:	6f 0e       	add	r6, r31
    1792:	71 1c       	adc	r7, r1
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <main+0xe4>
    1796:	91 e0       	ldi	r25, 0x01	; 1
	customer_no[i]='\0';

	while(1){
		
		//Initial 1 Hr period will be cooldown period before starting the Datafreeze Algo
		counter_main++;
    1798:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <__data_end>
    179c:	8f 5f       	subi	r24, 0xFF	; 255
    179e:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <__data_end>
		if (counter_main>45){
    17a2:	8e 32       	cpi	r24, 0x2E	; 46
    17a4:	40 f0       	brcs	.+16     	; 0x17b6 <main+0x102>
			flag_cooldown=0x88;
    17a6:	88 e8       	ldi	r24, 0x88	; 136
    17a8:	8a 83       	std	Y+2, r24	; 0x02
			counter_main=50;
    17aa:	82 e3       	ldi	r24, 0x32	; 50
    17ac:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <__data_end>
			}else{
			flag_cooldown=0x89;
		}
		
		// To fetch APN
		while (flag_get_apn!=1){
    17b0:	91 30       	cpi	r25, 0x01	; 1
    17b2:	21 f4       	brne	.+8      	; 0x17bc <main+0x108>
    17b4:	20 c0       	rjmp	.+64     	; 0x17f6 <main+0x142>
		counter_main++;
		if (counter_main>45){
			flag_cooldown=0x88;
			counter_main=50;
			}else{
			flag_cooldown=0x89;
    17b6:	89 e8       	ldi	r24, 0x89	; 137
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	fa cf       	rjmp	.-12     	; 0x17b0 <main+0xfc>
			flag_get_apn = get_apn(apn,user);
			data_counter++;
			if(data_counter>10){
				// Acquiring data for resetting
				get_data(system_on,responseimp,2,signal_strength,user,&flag_cooldown);
				data_counter=0;
    17bc:	d1 2c       	mov	r13, r1
			flag_cooldown=0x89;
		}
		
		// To fetch APN
		while (flag_get_apn!=1){
			flag_get_apn = get_apn(apn,user);
    17be:	be 01       	movw	r22, r28
    17c0:	67 5b       	subi	r22, 0xB7	; 183
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	ce 01       	movw	r24, r28
    17c6:	8b 96       	adiw	r24, 0x2b	; 43
    17c8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <get_apn>
    17cc:	f8 2e       	mov	r15, r24
			data_counter++;
    17ce:	b3 94       	inc	r11
			if(data_counter>10){
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	2b 15       	cp	r18, r11
    17d4:	68 f4       	brcc	.+26     	; 0x17f0 <main+0x13c>
				// Acquiring data for resetting
				get_data(system_on,responseimp,2,signal_strength,user,&flag_cooldown);
    17d6:	e6 2c       	mov	r14, r6
    17d8:	8e 01       	movw	r16, r28
    17da:	07 5b       	subi	r16, 0xB7	; 183
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	29 2d       	mov	r18, r9
    17e0:	42 e0       	ldi	r20, 0x02	; 2
    17e2:	be 01       	movw	r22, r28
    17e4:	69 59       	subi	r22, 0x99	; 153
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	0e 94 66 00 	call	0xcc	; 0xcc <get_data>
				data_counter=0;
    17ee:	bd 2c       	mov	r11, r13
			}else{
			flag_cooldown=0x89;
		}
		
		// To fetch APN
		while (flag_get_apn!=1){
    17f0:	31 e0       	ldi	r19, 0x01	; 1
    17f2:	f3 12       	cpse	r15, r19
    17f4:	e4 cf       	rjmp	.-56     	; 0x17be <main+0x10a>
			
			}
		}
		
		//  Get Location
		get_loc(apn,loc_lat,loc_long);
    17f6:	ae 01       	movw	r20, r28
    17f8:	4a 58       	subi	r20, 0x8A	; 138
    17fa:	5d 4f       	sbci	r21, 0xFD	; 253
    17fc:	be 01       	movw	r22, r28
    17fe:	69 59       	subi	r22, 0x99	; 153
    1800:	7d 4f       	sbci	r23, 0xFD	; 253
    1802:	ce 01       	movw	r24, r28
    1804:	8b 96       	adiw	r24, 0x2b	; 43
    1806:	b9 dd       	rcall	.-1166   	; 0x137a <get_loc>
		
		//  To get signal strength
		signal_strength=get_signalstrength();
    1808:	df d8       	rcall	.-3650   	; 0x9c8 <get_signalstrength>
    180a:	98 2e       	mov	r9, r24
		
		// To fetch SMS 	
		data_counter=NumberOfAttempts; // Number of attempts to be made if SMS fetch fails
    180c:	0f 2e       	mov	r0, r31
    180e:	f6 e0       	ldi	r31, 0x06	; 6
    1810:	bf 2e       	mov	r11, r31
    1812:	f0 2d       	mov	r31, r0
		while (data_counter!=0){
			flag_get_sms = get_sms(&system_on,customer_no,Serial_num);
    1814:	ae 01       	movw	r20, r28
    1816:	4d 5f       	subi	r20, 0xFD	; 253
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	be 01       	movw	r22, r28
    181c:	69 5e       	subi	r22, 0xE9	; 233
    181e:	7f 4f       	sbci	r23, 0xFF	; 255
    1820:	ce 01       	movw	r24, r28
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	18 d9       	rcall	.-3536   	; 0xa56 <get_sms>
			data_counter--;
    1826:	ba 94       	dec	r11
			if(flag_get_sms==1){  // SMS Fetch successful
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	11 f0       	breq	.+4      	; 0x1830 <main+0x17c>
		//  To get signal strength
		signal_strength=get_signalstrength();
		
		// To fetch SMS 	
		data_counter=NumberOfAttempts; // Number of attempts to be made if SMS fetch fails
		while (data_counter!=0){
    182c:	b1 10       	cpse	r11, r1
    182e:	f2 cf       	rjmp	.-28     	; 0x1814 <main+0x160>
				break;
			}
		}
		
 		// Logging Data
		flag_datalog = dataLog(system_on,apn,Serial_num,signal_strength,user,loc_lat,loc_long,flag_cooldown);
    1830:	aa 80       	ldd	r10, Y+2	; 0x02
    1832:	ce 01       	movw	r24, r28
    1834:	8a 58       	subi	r24, 0x8A	; 138
    1836:	9d 4f       	sbci	r25, 0xFD	; 253
    1838:	6c 01       	movw	r12, r24
    183a:	fe 01       	movw	r30, r28
    183c:	e9 59       	subi	r30, 0x99	; 153
    183e:	fd 4f       	sbci	r31, 0xFD	; 253
    1840:	7f 01       	movw	r14, r30
    1842:	8e 01       	movw	r16, r28
    1844:	07 5b       	subi	r16, 0xB7	; 183
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	29 2d       	mov	r18, r9
    184a:	ae 01       	movw	r20, r28
    184c:	4d 5f       	subi	r20, 0xFD	; 253
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
    1850:	be 01       	movw	r22, r28
    1852:	65 5d       	subi	r22, 0xD5	; 213
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	29 dd       	rcall	.-1454   	; 0x12ac <dataLog>
		if(flag_datalog==0){
    185a:	81 11       	cpse	r24, r1
    185c:	9c cf       	rjmp	.-200    	; 0x1796 <main+0xe2>
			reset_SIM900();  //  Reset SIM900 to get CGATT=1 sooner
    185e:	0e 94 0e 04 	call	0x81c	; 0x81c <reset_SIM900>
			flag_get_apn=0;  //  Getting APN again since we're resetting the chip
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	99 cf       	rjmp	.-206    	; 0x1798 <main+0xe4>

00001866 <UART_0_init>:
#include <util/delay.h>
#include "UART_0.h"

void UART_0_init()
{
	UBRR0H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
    1866:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
    186a:	83 e3       	ldi	r24, 0x33	; 51
    186c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0A=0x00;
    1870:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

	UCSR0C=0b10000110;
    1874:	86 e8       	ldi	r24, 0x86	; 134
    1876:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR0B=0x18; 
    187a:	88 e1       	ldi	r24, 0x18	; 24
    187c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1880:	08 95       	ret

00001882 <UART_0_putc>:
}
void UART_0_putc(unsigned char data)
{

	while ( !(UCSR0A & (1<<UDRE0)) );  /* Wait for empty transmit buffer */
    1882:	e0 ec       	ldi	r30, 0xC0	; 192
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	90 81       	ld	r25, Z
    1888:	95 ff       	sbrs	r25, 5
    188a:	fd cf       	rjmp	.-6      	; 0x1886 <UART_0_putc+0x4>

	UDR0 = data;         /* Start transmition */
    188c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1890:	08 95       	ret

00001892 <UART_0_puts>:

}
void UART_0_puts(char *str)
{
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
    1898:	88 81       	ld	r24, Y
    189a:	88 23       	and	r24, r24
    189c:	29 f0       	breq	.+10     	; 0x18a8 <UART_0_puts+0x16>
    189e:	21 96       	adiw	r28, 0x01	; 1
		
		UART_0_putc( *str++ );
    18a0:	f0 df       	rcall	.-32     	; 0x1882 <UART_0_putc>

}
void UART_0_puts(char *str)
{
	
	while( *str != '\0' ){
    18a2:	89 91       	ld	r24, Y+
    18a4:	81 11       	cpse	r24, r1
    18a6:	fc cf       	rjmp	.-8      	; 0x18a0 <UART_0_puts+0xe>
		
		UART_0_putc( *str++ );
	}
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <UART_1_init>:
#include <util/delay.h>
#include "UART_1.h"

void UART_1_init()
{
	UBRR1H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
    18ae:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
    18b2:	83 e3       	ldi	r24, 0x33	; 51
    18b4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1A=0x00;
    18b8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B=0x00;
    18bc:	e9 ec       	ldi	r30, 0xC9	; 201
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	10 82       	st	Z, r1

	UCSR1C=0b10000110;
    18c2:	86 e8       	ldi	r24, 0x86	; 134
    18c4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR1B=0x18;
    18c8:	88 e1       	ldi	r24, 0x18	; 24
    18ca:	80 83       	st	Z, r24
    18cc:	08 95       	ret

000018ce <UART_1_putc>:
}
void UART_1_putc(unsigned char data)
{

	while ( !(UCSR1A & (1<<UDRE1)) );  /* Wait for empty transmit buffer */
    18ce:	e8 ec       	ldi	r30, 0xC8	; 200
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	90 81       	ld	r25, Z
    18d4:	95 ff       	sbrs	r25, 5
    18d6:	fd cf       	rjmp	.-6      	; 0x18d2 <UART_1_putc+0x4>

	UDR1 = data;         /* Start transmition */
    18d8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    18dc:	08 95       	ret

000018de <UART_1_puts>:

}
void UART_1_puts(char *str)
{
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
    18e4:	88 81       	ld	r24, Y
    18e6:	88 23       	and	r24, r24
    18e8:	29 f0       	breq	.+10     	; 0x18f4 <UART_1_puts+0x16>
    18ea:	21 96       	adiw	r28, 0x01	; 1
		
		UART_1_putc( *str++ );
    18ec:	f0 df       	rcall	.-32     	; 0x18ce <UART_1_putc>

}
void UART_1_puts(char *str)
{
	
	while( *str != '\0' ){
    18ee:	89 91       	ld	r24, Y+
    18f0:	81 11       	cpse	r24, r1
    18f2:	fc cf       	rjmp	.-8      	; 0x18ec <UART_1_puts+0xe>
		
		UART_1_putc( *str++ );
	}
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <atoi>:
    18fa:	fc 01       	movw	r30, r24
    18fc:	88 27       	eor	r24, r24
    18fe:	99 27       	eor	r25, r25
    1900:	e8 94       	clt
    1902:	21 91       	ld	r18, Z+
    1904:	20 32       	cpi	r18, 0x20	; 32
    1906:	e9 f3       	breq	.-6      	; 0x1902 <atoi+0x8>
    1908:	29 30       	cpi	r18, 0x09	; 9
    190a:	10 f0       	brcs	.+4      	; 0x1910 <atoi+0x16>
    190c:	2e 30       	cpi	r18, 0x0E	; 14
    190e:	c8 f3       	brcs	.-14     	; 0x1902 <atoi+0x8>
    1910:	2b 32       	cpi	r18, 0x2B	; 43
    1912:	39 f0       	breq	.+14     	; 0x1922 <atoi+0x28>
    1914:	2d 32       	cpi	r18, 0x2D	; 45
    1916:	31 f4       	brne	.+12     	; 0x1924 <atoi+0x2a>
    1918:	68 94       	set
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <atoi+0x28>
    191c:	60 d0       	rcall	.+192    	; 0x19de <__mulhi_const_10>
    191e:	82 0f       	add	r24, r18
    1920:	91 1d       	adc	r25, r1
    1922:	21 91       	ld	r18, Z+
    1924:	20 53       	subi	r18, 0x30	; 48
    1926:	2a 30       	cpi	r18, 0x0A	; 10
    1928:	c8 f3       	brcs	.-14     	; 0x191c <atoi+0x22>
    192a:	1e f4       	brtc	.+6      	; 0x1932 <atoi+0x38>
    192c:	90 95       	com	r25
    192e:	81 95       	neg	r24
    1930:	9f 4f       	sbci	r25, 0xFF	; 255
    1932:	08 95       	ret

00001934 <strcasecmp>:
    1934:	fb 01       	movw	r30, r22
    1936:	dc 01       	movw	r26, r24
    1938:	8d 91       	ld	r24, X+
    193a:	81 34       	cpi	r24, 0x41	; 65
    193c:	1c f0       	brlt	.+6      	; 0x1944 <strcasecmp+0x10>
    193e:	8b 35       	cpi	r24, 0x5B	; 91
    1940:	0c f4       	brge	.+2      	; 0x1944 <strcasecmp+0x10>
    1942:	80 5e       	subi	r24, 0xE0	; 224
    1944:	61 91       	ld	r22, Z+
    1946:	61 34       	cpi	r22, 0x41	; 65
    1948:	1c f0       	brlt	.+6      	; 0x1950 <strcasecmp+0x1c>
    194a:	6b 35       	cpi	r22, 0x5B	; 91
    194c:	0c f4       	brge	.+2      	; 0x1950 <strcasecmp+0x1c>
    194e:	60 5e       	subi	r22, 0xE0	; 224
    1950:	86 1b       	sub	r24, r22
    1952:	61 11       	cpse	r22, r1
    1954:	89 f3       	breq	.-30     	; 0x1938 <strcasecmp+0x4>
    1956:	99 0b       	sbc	r25, r25
    1958:	08 95       	ret

0000195a <strcat>:
    195a:	fb 01       	movw	r30, r22
    195c:	dc 01       	movw	r26, r24
    195e:	0d 90       	ld	r0, X+
    1960:	00 20       	and	r0, r0
    1962:	e9 f7       	brne	.-6      	; 0x195e <strcat+0x4>
    1964:	11 97       	sbiw	r26, 0x01	; 1
    1966:	01 90       	ld	r0, Z+
    1968:	0d 92       	st	X+, r0
    196a:	00 20       	and	r0, r0
    196c:	e1 f7       	brne	.-8      	; 0x1966 <strcat+0xc>
    196e:	08 95       	ret

00001970 <strcmp>:
    1970:	fb 01       	movw	r30, r22
    1972:	dc 01       	movw	r26, r24
    1974:	8d 91       	ld	r24, X+
    1976:	01 90       	ld	r0, Z+
    1978:	80 19       	sub	r24, r0
    197a:	01 10       	cpse	r0, r1
    197c:	d9 f3       	breq	.-10     	; 0x1974 <strcmp+0x4>
    197e:	99 0b       	sbc	r25, r25
    1980:	08 95       	ret

00001982 <strcpy>:
    1982:	fb 01       	movw	r30, r22
    1984:	dc 01       	movw	r26, r24
    1986:	01 90       	ld	r0, Z+
    1988:	0d 92       	st	X+, r0
    198a:	00 20       	and	r0, r0
    198c:	e1 f7       	brne	.-8      	; 0x1986 <strcpy+0x4>
    198e:	08 95       	ret

00001990 <strncmp>:
    1990:	fb 01       	movw	r30, r22
    1992:	dc 01       	movw	r26, r24
    1994:	41 50       	subi	r20, 0x01	; 1
    1996:	50 40       	sbci	r21, 0x00	; 0
    1998:	30 f0       	brcs	.+12     	; 0x19a6 <strncmp+0x16>
    199a:	8d 91       	ld	r24, X+
    199c:	01 90       	ld	r0, Z+
    199e:	80 19       	sub	r24, r0
    19a0:	19 f4       	brne	.+6      	; 0x19a8 <strncmp+0x18>
    19a2:	00 20       	and	r0, r0
    19a4:	b9 f7       	brne	.-18     	; 0x1994 <strncmp+0x4>
    19a6:	88 1b       	sub	r24, r24
    19a8:	99 0b       	sbc	r25, r25
    19aa:	08 95       	ret

000019ac <strncpy>:
    19ac:	fb 01       	movw	r30, r22
    19ae:	dc 01       	movw	r26, r24
    19b0:	41 50       	subi	r20, 0x01	; 1
    19b2:	50 40       	sbci	r21, 0x00	; 0
    19b4:	48 f0       	brcs	.+18     	; 0x19c8 <strncpy+0x1c>
    19b6:	01 90       	ld	r0, Z+
    19b8:	0d 92       	st	X+, r0
    19ba:	00 20       	and	r0, r0
    19bc:	c9 f7       	brne	.-14     	; 0x19b0 <strncpy+0x4>
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <strncpy+0x16>
    19c0:	1d 92       	st	X+, r1
    19c2:	41 50       	subi	r20, 0x01	; 1
    19c4:	50 40       	sbci	r21, 0x00	; 0
    19c6:	e0 f7       	brcc	.-8      	; 0x19c0 <strncpy+0x14>
    19c8:	08 95       	ret

000019ca <__itoa_ncheck>:
    19ca:	bb 27       	eor	r27, r27
    19cc:	4a 30       	cpi	r20, 0x0A	; 10
    19ce:	31 f4       	brne	.+12     	; 0x19dc <__itoa_ncheck+0x12>
    19d0:	99 23       	and	r25, r25
    19d2:	22 f4       	brpl	.+8      	; 0x19dc <__itoa_ncheck+0x12>
    19d4:	bd e2       	ldi	r27, 0x2D	; 45
    19d6:	90 95       	com	r25
    19d8:	81 95       	neg	r24
    19da:	9f 4f       	sbci	r25, 0xFF	; 255
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <__utoa_common>

000019de <__mulhi_const_10>:
    19de:	7a e0       	ldi	r23, 0x0A	; 10
    19e0:	97 9f       	mul	r25, r23
    19e2:	90 2d       	mov	r25, r0
    19e4:	87 9f       	mul	r24, r23
    19e6:	80 2d       	mov	r24, r0
    19e8:	91 0d       	add	r25, r1
    19ea:	11 24       	eor	r1, r1
    19ec:	08 95       	ret

000019ee <__utoa_ncheck>:
    19ee:	bb 27       	eor	r27, r27

000019f0 <__utoa_common>:
    19f0:	fb 01       	movw	r30, r22
    19f2:	55 27       	eor	r21, r21
    19f4:	aa 27       	eor	r26, r26
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	aa 1f       	adc	r26, r26
    19fc:	a4 17       	cp	r26, r20
    19fe:	10 f0       	brcs	.+4      	; 0x1a04 <__utoa_common+0x14>
    1a00:	a4 1b       	sub	r26, r20
    1a02:	83 95       	inc	r24
    1a04:	50 51       	subi	r21, 0x10	; 16
    1a06:	b9 f7       	brne	.-18     	; 0x19f6 <__utoa_common+0x6>
    1a08:	a0 5d       	subi	r26, 0xD0	; 208
    1a0a:	aa 33       	cpi	r26, 0x3A	; 58
    1a0c:	08 f0       	brcs	.+2      	; 0x1a10 <__utoa_common+0x20>
    1a0e:	a9 5d       	subi	r26, 0xD9	; 217
    1a10:	a1 93       	st	Z+, r26
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	79 f7       	brne	.-34     	; 0x19f4 <__utoa_common+0x4>
    1a16:	b1 11       	cpse	r27, r1
    1a18:	b1 93       	st	Z+, r27
    1a1a:	11 92       	st	Z+, r1
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	00 c0       	rjmp	.+0      	; 0x1a20 <strrev>

00001a20 <strrev>:
    1a20:	dc 01       	movw	r26, r24
    1a22:	fc 01       	movw	r30, r24
    1a24:	67 2f       	mov	r22, r23
    1a26:	71 91       	ld	r23, Z+
    1a28:	77 23       	and	r23, r23
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <strrev+0x4>
    1a2c:	32 97       	sbiw	r30, 0x02	; 2
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <strrev+0x18>
    1a30:	7c 91       	ld	r23, X
    1a32:	6d 93       	st	X+, r22
    1a34:	70 83       	st	Z, r23
    1a36:	62 91       	ld	r22, -Z
    1a38:	ae 17       	cp	r26, r30
    1a3a:	bf 07       	cpc	r27, r31
    1a3c:	c8 f3       	brcs	.-14     	; 0x1a30 <strrev+0x10>
    1a3e:	08 95       	ret

00001a40 <eeprom_read_byte>:
    1a40:	f9 99       	sbic	0x1f, 1	; 31
    1a42:	fe cf       	rjmp	.-4      	; 0x1a40 <eeprom_read_byte>
    1a44:	92 bd       	out	0x22, r25	; 34
    1a46:	81 bd       	out	0x21, r24	; 33
    1a48:	f8 9a       	sbi	0x1f, 0	; 31
    1a4a:	99 27       	eor	r25, r25
    1a4c:	80 b5       	in	r24, 0x20	; 32
    1a4e:	08 95       	ret

00001a50 <eeprom_update_byte>:
    1a50:	26 2f       	mov	r18, r22

00001a52 <eeprom_update_r18>:
    1a52:	f9 99       	sbic	0x1f, 1	; 31
    1a54:	fe cf       	rjmp	.-4      	; 0x1a52 <eeprom_update_r18>
    1a56:	92 bd       	out	0x22, r25	; 34
    1a58:	81 bd       	out	0x21, r24	; 33
    1a5a:	f8 9a       	sbi	0x1f, 0	; 31
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	00 b4       	in	r0, 0x20	; 32
    1a60:	02 16       	cp	r0, r18
    1a62:	39 f0       	breq	.+14     	; 0x1a72 <eeprom_update_r18+0x20>
    1a64:	1f ba       	out	0x1f, r1	; 31
    1a66:	20 bd       	out	0x20, r18	; 32
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	fa 9a       	sbi	0x1f, 2	; 31
    1a6e:	f9 9a       	sbi	0x1f, 1	; 31
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	08 95       	ret

00001a74 <_exit>:
    1a74:	f8 94       	cli

00001a76 <__stop_program>:
    1a76:	ff cf       	rjmp	.-2      	; 0x1a76 <__stop_program>

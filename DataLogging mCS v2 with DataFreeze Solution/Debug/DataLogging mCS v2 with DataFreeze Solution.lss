
DataLogging mCS v2 with DataFreeze Solution.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000071e  00800100  00001688  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  0080081e  0080081e  00001e3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dce  00000000  00000000  00001fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000057f  00000000  00000000  00004d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001351  00000000  00000000  000052f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  0000664c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057c  00000000  00000000  00006aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002031  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000904d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	3a c1       	rjmp	.+628    	; 0x2b2 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	18 e0       	ldi	r17, 0x08	; 8
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e8       	ldi	r30, 0x88	; 136
      a0:	f6 e1       	ldi	r31, 0x16	; 22
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 31       	cpi	r26, 0x1E	; 30
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	ae e1       	ldi	r26, 0x1E	; 30
      b6:	b8 e0       	ldi	r27, 0x08	; 8
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3e       	cpi	r26, 0xEB	; 235
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 77 09 	call	0x12ee	; 0x12ee <main>
      c6:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <get_data>:
		return 1;
	}
	return 0;
}

void get_data(uint8_t system_on, char* responseimp,uint8_t  signal_status, uint8_t signal_strength,char* user,uint8_t flag_cooldown){
      cc:	8f 92       	push	r8
      ce:	9f 92       	push	r9
      d0:	bf 92       	push	r11
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	00 d0       	rcall	.+0      	; 0xe4 <get_data+0x18>
      e4:	00 d0       	rcall	.+0      	; 0xe6 <get_data+0x1a>
      e6:	cd b7       	in	r28, 0x3d	; 61
      e8:	de b7       	in	r29, 0x3e	; 62
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	6b 01       	movw	r12, r22
      ee:	4a 83       	std	Y+2, r20	; 0x02
      f0:	2b 83       	std	Y+3, r18	; 0x03
      f2:	ec 82       	std	Y+4, r14	; 0x04
	
	int t=0,takedata=0,dataarrived=0;
	char dataimp,ch1[3],ch2[3];
	
	UART_0_puts("Fetching DATA...\r\n");
      f4:	8b e0       	ldi	r24, 0x0B	; 11
      f6:	93 e0       	ldi	r25, 0x03	; 3
      f8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
      fc:	e1 ec       	ldi	r30, 0xC1	; 193
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	80 61       	ori	r24, 0x10	; 16
     104:	80 83       	st	Z, r24
	return 0;
}

void get_data(uint8_t system_on, char* responseimp,uint8_t  signal_status, uint8_t signal_strength,char* user,uint8_t flag_cooldown){
	
	int t=0,takedata=0,dataarrived=0;
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
	UART_0_puts("Fetching DATA...\r\n");
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(1){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
     10e:	e0 ec       	ldi	r30, 0xC0	; 192
     110:	f0 e0       	ldi	r31, 0x00	; 0
		dataimp = UDR0;
     112:	0f 2e       	mov	r0, r31
     114:	f6 ec       	ldi	r31, 0xC6	; 198
     116:	8f 2e       	mov	r8, r31
     118:	91 2c       	mov	r9, r1
     11a:	f0 2d       	mov	r31, r0
			responseimp[t]=dataimp;
			t++;
		}
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
			takedata=1;
     11c:	bb 24       	eor	r11, r11
     11e:	b3 94       	inc	r11
     120:	e1 2c       	mov	r14, r1
			t=0;
     122:	f1 2c       	mov	r15, r1
     124:	90 e0       	ldi	r25, 0x00	; 0
	UART_0_puts("Fetching DATA...\r\n");
	//  Reception Enable
	sbi(UCSR0B,RXEN0);
	
	while(1){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
     126:	80 81       	ld	r24, Z
     128:	88 23       	and	r24, r24
     12a:	ec f7       	brge	.-6      	; 0x126 <get_data+0x5a>
		dataimp = UDR0;
     12c:	d4 01       	movw	r26, r8
     12e:	8c 91       	ld	r24, X
		
		// If last character # is received..
		if (((dataimp == 0x23) && (takedata == 1)) || t>=511){  //  #=0x23
     130:	83 32       	cpi	r24, 0x23	; 35
     132:	29 f4       	brne	.+10     	; 0x13e <get_data+0x72>
     134:	41 30       	cpi	r20, 0x01	; 1
     136:	51 05       	cpc	r21, r1
     138:	09 f0       	breq	.+2      	; 0x13c <get_data+0x70>
     13a:	a5 c0       	rjmp	.+330    	; 0x286 <get_data+0x1ba>
     13c:	05 c0       	rjmp	.+10     	; 0x148 <get_data+0x7c>
     13e:	2f 3f       	cpi	r18, 0xFF	; 255
     140:	b1 e0       	ldi	r27, 0x01	; 1
     142:	3b 07       	cpc	r19, r27
     144:	0c f4       	brge	.+2      	; 0x148 <get_data+0x7c>
     146:	88 c0       	rjmp	.+272    	; 0x258 <get_data+0x18c>
			//  Reception Disable
			cbi(UCSR0B,RXEN0);
     148:	e1 ec       	ldi	r30, 0xC1	; 193
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	8f 7e       	andi	r24, 0xEF	; 239
     150:	80 83       	st	Z, r24
			responseimp[t]='\0';
     152:	f6 01       	movw	r30, r12
     154:	e2 0f       	add	r30, r18
     156:	f3 1f       	adc	r31, r19
     158:	10 82       	st	Z, r1
			
			takedata = 0;
			if (strlen(responseimp)<10){
     15a:	f6 01       	movw	r30, r12
     15c:	01 90       	ld	r0, Z+
     15e:	00 20       	and	r0, r0
     160:	e9 f7       	brne	.-6      	; 0x15c <get_data+0x90>
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	ec 19       	sub	r30, r12
     166:	fd 09       	sbc	r31, r13
     168:	3a 97       	sbiw	r30, 0x0a	; 10
     16a:	78 f4       	brcc	.+30     	; 0x18a <get_data+0xbe>
				get_data(&system_on,responseimp,&signal_status,&signal_strength,user,&flag_cooldown);
     16c:	7e 01       	movw	r14, r28
     16e:	24 e0       	ldi	r18, 0x04	; 4
     170:	e2 0e       	add	r14, r18
     172:	f1 1c       	adc	r15, r1
     174:	9e 01       	movw	r18, r28
     176:	2d 5f       	subi	r18, 0xFD	; 253
     178:	3f 4f       	sbci	r19, 0xFF	; 255
     17a:	ae 01       	movw	r20, r28
     17c:	4e 5f       	subi	r20, 0xFE	; 254
     17e:	5f 4f       	sbci	r21, 0xFF	; 255
     180:	b6 01       	movw	r22, r12
     182:	8c 2f       	mov	r24, r28
     184:	8f 5f       	subi	r24, 0xFF	; 255
     186:	a2 df       	rcall	.-188    	; 0xcc <get_data>
				break;
     188:	84 c0       	rjmp	.+264    	; 0x292 <get_data+0x1c6>
			}
			if (flag_datafreeze==1 && flag_cooldown==0x88){
     18a:	80 91 1f 08 	lds	r24, 0x081F	; 0x80081f <flag_datafreeze>
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	09 f0       	breq	.+2      	; 0x194 <get_data+0xc8>
     192:	7f c0       	rjmp	.+254    	; 0x292 <get_data+0x1c6>
     194:	8c 81       	ldd	r24, Y+4	; 0x04
     196:	88 38       	cpi	r24, 0x88	; 136
     198:	09 f0       	breq	.+2      	; 0x19c <get_data+0xd0>
     19a:	7b c0       	rjmp	.+246    	; 0x292 <get_data+0x1c6>
				//Copying 68 bytes of responseimp to dataFreeze String for Auto Reset
				strncpy(str_datafreeze_main,str_datafreeze,68);
     19c:	44 e4       	ldi	r20, 0x44	; 68
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	67 e8       	ldi	r22, 0x87	; 135
     1a2:	78 e0       	ldi	r23, 0x08	; 8
     1a4:	83 e2       	ldi	r24, 0x23	; 35
     1a6:	98 e0       	ldi	r25, 0x08	; 8
     1a8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <strncpy>
				strncpy(str_datafreeze,responseimp,68);
     1ac:	44 e4       	ldi	r20, 0x44	; 68
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	b6 01       	movw	r22, r12
     1b2:	87 e8       	ldi	r24, 0x87	; 135
     1b4:	98 e0       	ldi	r25, 0x08	; 8
     1b6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <strncpy>
				
				UART_0_puts(str_datafreeze_main);
     1ba:	83 e2       	ldi	r24, 0x23	; 35
     1bc:	98 e0       	ldi	r25, 0x08	; 8
     1be:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
				UART_0_puts("\r\n");
     1c2:	8a e5       	ldi	r24, 0x5A	; 90
     1c4:	95 e0       	ldi	r25, 0x05	; 5
     1c6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
				UART_0_puts(str_datafreeze);
     1ca:	87 e8       	ldi	r24, 0x87	; 135
     1cc:	98 e0       	ldi	r25, 0x08	; 8
     1ce:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
				UART_0_puts("\r\n");
     1d2:	8a e5       	ldi	r24, 0x5A	; 90
     1d4:	95 e0       	ldi	r25, 0x05	; 5
     1d6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
				UART_0_puts("Counter =");
     1da:	8e e1       	ldi	r24, 0x1E	; 30
     1dc:	93 e0       	ldi	r25, 0x03	; 3
     1de:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
				UART_0_putc(counter_datafreeze+48);
     1e2:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <counter_datafreeze>
     1e6:	80 5d       	subi	r24, 0xD0	; 208
     1e8:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <UART_0_putc>
				UART_0_puts("\r\n");
     1ec:	8a e5       	ldi	r24, 0x5A	; 90
     1ee:	95 e0       	ldi	r25, 0x05	; 5
     1f0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	6f ef       	ldi	r22, 0xFF	; 255
     1f6:	83 ed       	ldi	r24, 0xD3	; 211
     1f8:	90 e3       	ldi	r25, 0x30	; 48
     1fa:	61 50       	subi	r22, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <get_data+0x12e>
     202:	00 c0       	rjmp	.+0      	; 0x204 <get_data+0x138>
     204:	00 00       	nop
				_delay_ms(2000);
	
				if (strcmp(str_datafreeze_main,str_datafreeze)==0){
     206:	67 e8       	ldi	r22, 0x87	; 135
     208:	78 e0       	ldi	r23, 0x08	; 8
     20a:	83 e2       	ldi	r24, 0x23	; 35
     20c:	98 e0       	ldi	r25, 0x08	; 8
     20e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strcmp>
     212:	89 2b       	or	r24, r25
     214:	31 f4       	brne	.+12     	; 0x222 <get_data+0x156>
					counter_datafreeze++;
     216:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <counter_datafreeze>
     21a:	8f 5f       	subi	r24, 0xFF	; 255
     21c:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <counter_datafreeze>
     220:	02 c0       	rjmp	.+4      	; 0x226 <get_data+0x15a>
					}else{
					counter_datafreeze=0;
     222:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <counter_datafreeze>
				}
				UART_0_puts("Data Recieved...\r\n");
     226:	88 e2       	ldi	r24, 0x28	; 40
     228:	93 e0       	ldi	r25, 0x03	; 3
     22a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
				if (counter_datafreeze>8){// 8 for reset after 10 data points
     22e:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <counter_datafreeze>
     232:	89 30       	cpi	r24, 0x09	; 9
     234:	70 f1       	brcs	.+92     	; 0x292 <get_data+0x1c6>
					UART_0_puts("RESETTING...\r\n");
     236:	8b e3       	ldi	r24, 0x3B	; 59
     238:	93 e0       	ldi	r25, 0x03	; 3
     23a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
     23e:	af ef       	ldi	r26, 0xFF	; 255
     240:	b1 e1       	ldi	r27, 0x11	; 17
     242:	2a e7       	ldi	r18, 0x7A	; 122
     244:	a1 50       	subi	r26, 0x01	; 1
     246:	b0 40       	sbci	r27, 0x00	; 0
     248:	20 40       	sbci	r18, 0x00	; 0
     24a:	e1 f7       	brne	.-8      	; 0x244 <get_data+0x178>
     24c:	00 c0       	rjmp	.+0      	; 0x24e <get_data+0x182>
     24e:	00 00       	nop
					_delay_ms(5000);
					counter_datafreeze=0;
     250:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <counter_datafreeze>
					//Reset the PCB Stack
					cbi(PORTB,6);
     254:	2e 98       	cbi	0x05, 6	; 5
     256:	1d c0       	rjmp	.+58     	; 0x292 <get_data+0x1c6>
			}
			
			break;
		}
		// Continue taking data
		if (takedata==1){
     258:	41 30       	cpi	r20, 0x01	; 1
     25a:	51 05       	cpc	r21, r1
     25c:	41 f4       	brne	.+16     	; 0x26e <get_data+0x1a2>
			responseimp[t]=dataimp;
     25e:	b6 01       	movw	r22, r12
     260:	62 0f       	add	r22, r18
     262:	73 1f       	adc	r23, r19
     264:	db 01       	movw	r26, r22
     266:	8c 93       	st	X, r24
			t++;
     268:	2f 5f       	subi	r18, 0xFF	; 255
     26a:	3f 4f       	sbci	r19, 0xFF	; 255
     26c:	5c cf       	rjmp	.-328    	; 0x126 <get_data+0x5a>
		}
		// If first character $ is received, start taking data..
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
     26e:	84 32       	cpi	r24, 0x24	; 36
     270:	09 f0       	breq	.+2      	; 0x274 <get_data+0x1a8>
     272:	59 cf       	rjmp	.-334    	; 0x126 <get_data+0x5a>
     274:	41 15       	cp	r20, r1
     276:	51 05       	cpc	r21, r1
     278:	09 f0       	breq	.+2      	; 0x27c <get_data+0x1b0>
     27a:	55 cf       	rjmp	.-342    	; 0x126 <get_data+0x5a>
			takedata=1;
     27c:	4b 2d       	mov	r20, r11
     27e:	5e 2d       	mov	r21, r14
			t=0;
     280:	2f 2d       	mov	r18, r15
     282:	39 2f       	mov	r19, r25
     284:	50 cf       	rjmp	.-352    	; 0x126 <get_data+0x5a>
	while(1){
		while(!((UCSR0A) & (1<<RXC0)));  // Wait while data is being received
		dataimp = UDR0;
		
		// If last character # is received..
		if (((dataimp == 0x23) && (takedata == 1)) || t>=511){  //  #=0x23
     286:	2f 3f       	cpi	r18, 0xFF	; 255
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	3b 07       	cpc	r19, r27
     28c:	0c f4       	brge	.+2      	; 0x290 <get_data+0x1c4>
     28e:	4b cf       	rjmp	.-362    	; 0x126 <get_data+0x5a>
     290:	5b cf       	rjmp	.-330    	; 0x148 <get_data+0x7c>
		if ((dataimp == 0x24) && (takedata == 0)){  //  $=0x24
			takedata=1;
			t=0;
		}
	}
}
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	bf 90       	pop	r11
     2ac:	9f 90       	pop	r9
     2ae:	8f 90       	pop	r8
     2b0:	08 95       	ret

000002b2 <__vector_15>:
		return 3;
	}
}

ISR(TIMER1_OVF_vect)
{
     2b2:	1f 92       	push	r1
     2b4:	0f 92       	push	r0
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	0f 92       	push	r0
     2ba:	11 24       	eor	r1, r1
     2bc:	0b b6       	in	r0, 0x3b	; 59
     2be:	0f 92       	push	r0
     2c0:	8f 93       	push	r24
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
	overflowcount++;
     2c6:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <overflowcount>
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (overflowcount>=10){  //  To account for 20 secs
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	18 f4       	brcc	.+6      	; 0x2d6 <__vector_15+0x24>
	}
}

ISR(TIMER1_OVF_vect)
{
	overflowcount++;
     2d0:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <overflowcount>
     2d4:	0a c0       	rjmp	.+20     	; 0x2ea <__vector_15+0x38>
	
	if (overflowcount>=10){  //  To account for 20 secs
		overflowcount = 0;
     2d6:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <overflowcount>
		skip = 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <skip>
		cbi(TCCR1B,CS12);
     2e0:	e1 e8       	ldi	r30, 0x81	; 129
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	8b 7f       	andi	r24, 0xFB	; 251
     2e8:	80 83       	st	Z, r24
	}
}
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	8f 91       	pop	r24
     2f0:	0f 90       	pop	r0
     2f2:	0b be       	out	0x3b, r0	; 59
     2f4:	0f 90       	pop	r0
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	0f 90       	pop	r0
     2fa:	1f 90       	pop	r1
     2fc:	18 95       	reti

000002fe <start_timer>:

void start_timer(){
	skip = 0;
     2fe:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <skip>
	TCNT1 = 0;
     302:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     306:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	sbi(TCCR1B,CS12);
     30a:	e1 e8       	ldi	r30, 0x81	; 129
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	80 81       	ld	r24, Z
     310:	84 60       	ori	r24, 0x04	; 4
     312:	80 83       	st	Z, r24
     314:	08 95       	ret

00000316 <wait_for_data>:
	_delay_ms(20000);
}

uint8_t wait_for_data(){
	// Start Timer
	start_timer();
     316:	f3 df       	rcall	.-26     	; 0x2fe <start_timer>
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
     318:	e8 ec       	ldi	r30, 0xC8	; 200
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	08 c0       	rjmp	.+16     	; 0x32e <wait_for_data+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     31e:	8a e1       	ldi	r24, 0x1A	; 26
     320:	8a 95       	dec	r24
     322:	f1 f7       	brne	.-4      	; 0x320 <wait_for_data+0xa>
     324:	00 c0       	rjmp	.+0      	; 0x326 <wait_for_data+0x10>
		_delay_us(10);
		if (skip==1){
     326:	80 91 22 08 	lds	r24, 0x0822	; 0x800822 <skip>
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	51 f0       	breq	.+20     	; 0x342 <wait_for_data+0x2c>
uint8_t wait_for_data(){
	// Start Timer
	start_timer();
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
     32e:	80 81       	ld	r24, Z
     330:	88 23       	and	r24, r24
     332:	ac f7       	brge	.-22     	; 0x31e <wait_for_data+0x8>
			return 0;  //  No data; timer expired
		}
	}
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
     334:	e1 e8       	ldi	r30, 0x81	; 129
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	80 81       	ld	r24, Z
     33a:	8b 7f       	andi	r24, 0xFB	; 251
     33c:	80 83       	st	Z, r24
	
	return 1;  //  Data arrived
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	08 95       	ret
	
	//  Waiting for data
	while (!(UCSR1A & (1<<RXC1))){
		_delay_us(10);
		if (skip==1){
			return 0;  //  No data; timer expired
     342:	80 e0       	ldi	r24, 0x00	; 0
	
	//  Stop Timer
	cbi(TCCR1B,CS12);
	
	return 1;  //  Data arrived
}
     344:	08 95       	ret

00000346 <sim900_response>:
	}
	
	return 0;
}

void sim900_response(char* response){
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	7c 01       	movw	r14, r24
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
     352:	c0 e3       	ldi	r28, 0x30	; 48
		if (dataarrived==0){
			UART_0_puts("No Response...\r\n");
			UART_0_puts("Re-Checking...\r\n");
			break;
		}
		initial[1]=UDR1;
     354:	0e ec       	ldi	r16, 0xCE	; 206
     356:	10 e0       	ldi	r17, 0x00	; 0
     358:	03 c0       	rjmp	.+6      	; 0x360 <sim900_response+0x1a>
     35a:	c9 2f       	mov	r28, r25
     35c:	01 c0       	rjmp	.+2      	; 0x360 <sim900_response+0x1a>
     35e:	c9 2f       	mov	r28, r25
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
		
	while(!(initial[0]==0x0D && initial[1]==0x0A)){
		initial[0]=initial[1];
		dataarrived=wait_for_data();
     360:	da df       	rcall	.-76     	; 0x316 <wait_for_data>
		if (dataarrived==0){
     362:	81 11       	cpse	r24, r1
     364:	0c c0       	rjmp	.+24     	; 0x37e <sim900_response+0x38>
			UART_0_puts("No Response...\r\n");
     366:	8a e4       	ldi	r24, 0x4A	; 74
     368:	93 e0       	ldi	r25, 0x03	; 3
     36a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
			UART_0_puts("Re-Checking...\r\n");
     36e:	8b e5       	ldi	r24, 0x5B	; 91
     370:	93 e0       	ldi	r25, 0x03	; 3
     372:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
     376:	c0 e0       	ldi	r28, 0x00	; 0
	while(1){		
		dataarrived=wait_for_data();
		if (dataarrived==0){
			break;
		}
		response[i]=UDR1;
     378:	0e ec       	ldi	r16, 0xCE	; 206
     37a:	10 e0       	ldi	r17, 0x00	; 0
     37c:	07 c0       	rjmp	.+14     	; 0x38c <sim900_response+0x46>
		if (dataarrived==0){
			UART_0_puts("No Response...\r\n");
			UART_0_puts("Re-Checking...\r\n");
			break;
		}
		initial[1]=UDR1;
     37e:	f8 01       	movw	r30, r16
     380:	90 81       	ld	r25, Z

void sim900_response(char* response){
	uint8_t i=0,dataarrived=0;
	char initial[]={'0','0'};
		
	while(!(initial[0]==0x0D && initial[1]==0x0A)){
     382:	cd 30       	cpi	r28, 0x0D	; 13
     384:	51 f7       	brne	.-44     	; 0x35a <sim900_response+0x14>
     386:	9a 30       	cpi	r25, 0x0A	; 10
     388:	51 f7       	brne	.-44     	; 0x35e <sim900_response+0x18>
     38a:	f5 cf       	rjmp	.-22     	; 0x376 <sim900_response+0x30>
		}
		initial[1]=UDR1;
	}

	while(1){		
		dataarrived=wait_for_data();
     38c:	c4 df       	rcall	.-120    	; 0x316 <wait_for_data>
		if (dataarrived==0){
     38e:	88 23       	and	r24, r24
     390:	51 f0       	breq	.+20     	; 0x3a6 <sim900_response+0x60>
			break;
		}
		response[i]=UDR1;
     392:	f8 01       	movw	r30, r16
     394:	90 81       	ld	r25, Z
     396:	f7 01       	movw	r30, r14
     398:	ec 0f       	add	r30, r28
     39a:	f1 1d       	adc	r31, r1
     39c:	90 83       	st	Z, r25
		if(response[i]==0x0D){
     39e:	9d 30       	cpi	r25, 0x0D	; 13
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <sim900_response+0x60>
			break;
		}
		i++;
     3a2:	cf 5f       	subi	r28, 0xFF	; 255
	}
     3a4:	f3 cf       	rjmp	.-26     	; 0x38c <sim900_response+0x46>

	//  Terminating string
	response[i]="\0";
     3a6:	f7 01       	movw	r30, r14
     3a8:	ec 0f       	add	r30, r28
     3aa:	f1 1d       	adc	r31, r1
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	80 83       	st	Z, r24

	//  Reception Disable
	cbi(UCSR1B,RXEN1);
     3b2:	e9 ec       	ldi	r30, 0xC9	; 201
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 81       	ld	r24, Z
     3b8:	8f 7e       	andi	r24, 0xEF	; 239
     3ba:	80 83       	st	Z, r24
} 
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	08 95       	ret

000003c8 <sim900_cmd>:
		UART_0_puts("APN not found...\r\n");
		return 0;
	}
}

void sim900_cmd(char* str,char* response){	
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
     3d2:	8b 01       	movw	r16, r22
	uint8_t i=0;
	char initial[]={'0','0'};

	//  Send Command
	while( *str != '\0' ){
     3d4:	88 81       	ld	r24, Y
     3d6:	88 23       	and	r24, r24
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <sim900_cmd+0x1e>
     3da:	21 96       	adiw	r28, 0x01	; 1
		UART_1_putc( *str++ );
     3dc:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <UART_1_putc>
void sim900_cmd(char* str,char* response){	
	uint8_t i=0;
	char initial[]={'0','0'};

	//  Send Command
	while( *str != '\0' ){
     3e0:	89 91       	ld	r24, Y+
     3e2:	81 11       	cpse	r24, r1
     3e4:	fb cf       	rjmp	.-10     	; 0x3dc <sim900_cmd+0x14>
		UART_1_putc( *str++ );
	}
	
	//  Reception Enable
	sbi(UCSR1B,RXEN1);
     3e6:	e9 ec       	ldi	r30, 0xC9	; 201
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	90 81       	ld	r25, Z
     3ec:	90 61       	ori	r25, 0x10	; 16
     3ee:	90 83       	st	Z, r25
	
	sim900_response(response);
     3f0:	c8 01       	movw	r24, r16
     3f2:	a9 df       	rcall	.-174    	; 0x346 <sim900_response>
}
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	0f 91       	pop	r16
     3fc:	08 95       	ret

000003fe <get_apn>:
		}
		
	}
}
 
uint8_t get_apn(char* apn,char* user){
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	c8 5c       	subi	r28, 0xC8	; 200
     410:	d1 09       	sbc	r29, r1
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	7c 01       	movw	r14, r24
     41e:	8b 01       	movw	r16, r22
	 
	uint8_t i=0,p=0;
	char simresponse[200];
	
	UART_0_puts("Checking SIM...\r\n");
     420:	8c e6       	ldi	r24, 0x6C	; 108
     422:	93 e0       	ldi	r25, 0x03	; 3
     424:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
	// SIM900 Echo disabled in response
	UART_1_puts("ATE0\r\n\0");  
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	0e 94 82 0a 	call	0x1504	; 0x1504 <UART_1_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	2f ef       	ldi	r18, 0xFF	; 255
     432:	84 e3       	ldi	r24, 0x34	; 52
     434:	9c e0       	ldi	r25, 0x0C	; 12
     436:	21 50       	subi	r18, 0x01	; 1
     438:	80 40       	sbci	r24, 0x00	; 0
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     440:	00 00       	nop
	_delay_ms(500);
	
	// SIM900 module check
	sim900_cmd("AT\r\n\0",simresponse);
     442:	be 01       	movw	r22, r28
     444:	6f 5f       	subi	r22, 0xFF	; 255
     446:	7f 4f       	sbci	r23, 0xFF	; 255
     448:	8a e0       	ldi	r24, 0x0A	; 10
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	bd df       	rcall	.-134    	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")!=0){
     44e:	60 e1       	ldi	r22, 0x10	; 16
     450:	71 e0       	ldi	r23, 0x01	; 1
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strcmp>
     45a:	89 2b       	or	r24, r25
     45c:	51 f0       	breq	.+20     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
		UART_0_puts("No Response...\r\n");
     45e:	8a e4       	ldi	r24, 0x4A	; 74
     460:	93 e0       	ldi	r25, 0x03	; 3
     462:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
		UART_0_puts("Rechecking...\r\n");
     466:	8e e7       	ldi	r24, 0x7E	; 126
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
		return 0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	67 c1       	rjmp	.+718    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	UART_0_puts("SIM Checked OK...\r\n");
     472:	8e e8       	ldi	r24, 0x8E	; 142
     474:	93 e0       	ldi	r25, 0x03	; 3
     476:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
	UART_0_puts("Checking SimCard...\r\n");
     47a:	82 ea       	ldi	r24, 0xA2	; 162
     47c:	93 e0       	ldi	r25, 0x03	; 3
     47e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
	
	// To check if SIM card is present	 
	sim900_cmd("AT+CSMINS?\r\n\0",simresponse); 
     482:	be 01       	movw	r22, r28
     484:	6f 5f       	subi	r22, 0xFF	; 255
     486:	7f 4f       	sbci	r23, 0xFF	; 255
     488:	84 e1       	ldi	r24, 0x14	; 20
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	9d df       	rcall	.-198    	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"+CSMINS: 0\,1\0")!=0){
     48e:	62 e2       	ldi	r22, 0x22	; 34
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strcmp>
     49a:	89 2b       	or	r24, r25
     49c:	51 f0       	breq	.+20     	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
		UART_0_puts("No Response...\r\n");
     49e:	8a e4       	ldi	r24, 0x4A	; 74
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
		UART_0_puts("Rechecking...\r\n");
     4a6:	8e e7       	ldi	r24, 0x7E	; 126
     4a8:	93 e0       	ldi	r25, 0x03	; 3
     4aa:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
		return 0;
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	47 c1       	rjmp	.+654    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	UART_0_puts("SimCard Present...\r\n");
     4b2:	88 eb       	ldi	r24, 0xB8	; 184
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <UART_0_puts>
	UART_0_puts("Checking SIMCARD Registration...\r\n");
     4ba:	8d ec       	ldi	r24, 0xCD	; 205
     4bc:	93 e0       	ldi	r25, 0x03	; 3
     4be:	fc d7       	rcall	.+4088   	; 0x14b8 <UART_0_puts>
	
	// To check if SIM card is registered
	sim900_cmd("AT+CREG?\r\n\0",simresponse);  
     4c0:	be 01       	movw	r22, r28
     4c2:	6f 5f       	subi	r22, 0xFF	; 255
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	80 e3       	ldi	r24, 0x30	; 48
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	7e df       	rcall	.-260    	; 0x3c8 <sim900_cmd>
	if (!((strcmp(simresponse,"+CREG: 0\,1\0")==0) || (strcmp(simresponse,"+CREG: 0\,5\0")==0))){
     4cc:	6c e3       	ldi	r22, 0x3C	; 60
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	ce 01       	movw	r24, r28
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strcmp>
     4d8:	89 2b       	or	r24, r25
     4da:	81 f0       	breq	.+32     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
     4dc:	68 e4       	ldi	r22, 0x48	; 72
     4de:	71 e0       	ldi	r23, 0x01	; 1
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strcmp>
     4e8:	89 2b       	or	r24, r25
     4ea:	41 f0       	breq	.+16     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
		UART_0_puts("No Response...\r\n");
     4ec:	8a e4       	ldi	r24, 0x4A	; 74
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	e3 d7       	rcall	.+4038   	; 0x14b8 <UART_0_puts>
		UART_0_puts("Rechecking...\r\n");
     4f2:	8e e7       	ldi	r24, 0x7E	; 126
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	e0 d7       	rcall	.+4032   	; 0x14b8 <UART_0_puts>
		return 0;
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	22 c1       	rjmp	.+580    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	UART_0_puts("SimCard Registered OK...\r\n");
     4fc:	80 ef       	ldi	r24, 0xF0	; 240
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	db d7       	rcall	.+4022   	; 0x14b8 <UART_0_puts>
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
     502:	be 01       	movw	r22, r28
     504:	6f 5f       	subi	r22, 0xFF	; 255
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	84 e5       	ldi	r24, 0x54	; 84
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	5d df       	rcall	.-326    	; 0x3c8 <sim900_cmd>
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
     50e:	89 81       	ldd	r24, Y+1	; 0x01
     510:	82 32       	cpi	r24, 0x22	; 34
     512:	41 f0       	breq	.+16     	; 0x524 <__FUSE_REGION_LENGTH__+0x124>
     514:	fe 01       	movw	r30, r28
     516:	32 96       	adiw	r30, 0x02	; 2
     518:	20 e0       	ldi	r18, 0x00	; 0
		i++;
     51a:	2f 5f       	subi	r18, 0xFF	; 255
	}
	UART_0_puts("SimCard Registered OK...\r\n");
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
     51c:	81 91       	ld	r24, Z+
     51e:	82 32       	cpi	r24, 0x22	; 34
     520:	e1 f7       	brne	.-8      	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
     522:	01 c0       	rjmp	.+2      	; 0x526 <__FUSE_REGION_LENGTH__+0x126>
		return 0;
	}
	UART_0_puts("SimCard Registered OK...\r\n");
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
     524:	20 e0       	ldi	r18, 0x00	; 0
	while (simresponse[i]!='\"' && i<200){
		i++;
	}
	i++;
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	92 0f       	add	r25, r18
	while (simresponse[i]!='\"' && p<30){
     52a:	fe 01       	movw	r30, r28
     52c:	e9 0f       	add	r30, r25
     52e:	f1 1d       	adc	r31, r1
     530:	31 81       	ldd	r19, Z+1	; 0x01
     532:	32 32       	cpi	r19, 0x22	; 34
     534:	99 f0       	breq	.+38     	; 0x55c <__FUSE_REGION_LENGTH__+0x15c>
     536:	f8 01       	movw	r30, r16
     538:	4f e1       	ldi	r20, 0x1F	; 31
     53a:	42 0f       	add	r20, r18
		user[p]=simresponse[i];
     53c:	31 93       	st	Z+, r19
		p++;i++;
     53e:	89 2f       	mov	r24, r25
     540:	82 1b       	sub	r24, r18
     542:	9f 5f       	subi	r25, 0xFF	; 255
	i=0;p=0;
	while (simresponse[i]!='\"' && i<200){
		i++;
	}
	i++;
	while (simresponse[i]!='\"' && p<30){
     544:	a1 e0       	ldi	r26, 0x01	; 1
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	ac 0f       	add	r26, r28
     54a:	bd 1f       	adc	r27, r29
     54c:	a9 0f       	add	r26, r25
     54e:	b1 1d       	adc	r27, r1
     550:	3c 91       	ld	r19, X
     552:	32 32       	cpi	r19, 0x22	; 34
     554:	21 f0       	breq	.+8      	; 0x55e <__FUSE_REGION_LENGTH__+0x15e>
     556:	94 13       	cpse	r25, r20
     558:	f1 cf       	rjmp	.-30     	; 0x53c <__FUSE_REGION_LENGTH__+0x13c>
     55a:	01 c0       	rjmp	.+2      	; 0x55e <__FUSE_REGION_LENGTH__+0x15e>
		return 0;
	}
	UART_0_puts("SimCard Registered OK...\r\n");
	// Returns name of Network Provider
	sim900_cmd("AT+CSPN?\r\n\0",simresponse);  
	i=0;p=0;
     55c:	80 e0       	ldi	r24, 0x00	; 0
	i++;
	while (simresponse[i]!='\"' && p<30){
		user[p]=simresponse[i];
		p++;i++;
	}
	user[p]='\0';
     55e:	f8 01       	movw	r30, r16
     560:	e8 0f       	add	r30, r24
     562:	f1 1d       	adc	r31, r1
     564:	10 82       	st	Z, r1
	UART_0_puts("SIM network provider...");
     566:	8b e0       	ldi	r24, 0x0B	; 11
     568:	94 e0       	ldi	r25, 0x04	; 4
     56a:	a6 d7       	rcall	.+3916   	; 0x14b8 <UART_0_puts>
	UART_0_puts(user);
     56c:	c8 01       	movw	r24, r16
     56e:	a4 d7       	rcall	.+3912   	; 0x14b8 <UART_0_puts>
	UART_0_puts("\r\n");
     570:	8a e5       	ldi	r24, 0x5A	; 90
     572:	95 e0       	ldi	r25, 0x05	; 5
     574:	a1 d7       	rcall	.+3906   	; 0x14b8 <UART_0_puts>
	
	//APN Compare and Assignment
	if (strcmp(user,"Hutch\0")==0){
     576:	60 e6       	ldi	r22, 0x60	; 96
     578:	71 e0       	ldi	r23, 0x01	; 1
     57a:	c8 01       	movw	r24, r16
     57c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <strcmp>
     580:	89 2b       	or	r24, r25
     582:	99 f4       	brne	.+38     	; 0x5aa <__FUSE_REGION_LENGTH__+0x1aa>
		strcpy(apn,"www");
     584:	87 e7       	ldi	r24, 0x77	; 119
     586:	97 e7       	ldi	r25, 0x77	; 119
     588:	a7 e7       	ldi	r26, 0x77	; 119
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	f7 01       	movw	r30, r14
     58e:	80 83       	st	Z, r24
     590:	91 83       	std	Z+1, r25	; 0x01
     592:	a2 83       	std	Z+2, r26	; 0x02
     594:	b3 83       	std	Z+3, r27	; 0x03
		UART_0_puts("APN...");
     596:	83 e2       	ldi	r24, 0x23	; 35
     598:	94 e0       	ldi	r25, 0x04	; 4
     59a:	8e d7       	rcall	.+3868   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     59c:	c7 01       	movw	r24, r14
     59e:	8c d7       	rcall	.+3864   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     5a0:	8a e5       	ldi	r24, 0x5A	; 90
     5a2:	95 e0       	ldi	r25, 0x05	; 5
     5a4:	89 d7       	rcall	.+3858   	; 0x14b8 <UART_0_puts>
		return 1;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	cb c0       	rjmp	.+406    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if ((strcmp(user,"Vodafone\0")==0) || (strcasecmp(user,"Vodafone IN\0")==0)){
     5aa:	67 e6       	ldi	r22, 0x67	; 103
     5ac:	71 e0       	ldi	r23, 0x01	; 1
     5ae:	c8 01       	movw	r24, r16
     5b0:	e7 d7       	rcall	.+4046   	; 0x1580 <strcmp>
     5b2:	89 2b       	or	r24, r25
     5b4:	31 f0       	breq	.+12     	; 0x5c2 <__FUSE_REGION_LENGTH__+0x1c2>
     5b6:	61 e7       	ldi	r22, 0x71	; 113
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	c8 01       	movw	r24, r16
     5bc:	ce d7       	rcall	.+3996   	; 0x155a <strcasecmp>
     5be:	89 2b       	or	r24, r25
     5c0:	99 f4       	brne	.+38     	; 0x5e8 <__FUSE_REGION_LENGTH__+0x1e8>
		strcpy(apn,"www");
     5c2:	87 e7       	ldi	r24, 0x77	; 119
     5c4:	97 e7       	ldi	r25, 0x77	; 119
     5c6:	a7 e7       	ldi	r26, 0x77	; 119
     5c8:	b0 e0       	ldi	r27, 0x00	; 0
     5ca:	f7 01       	movw	r30, r14
     5cc:	80 83       	st	Z, r24
     5ce:	91 83       	std	Z+1, r25	; 0x01
     5d0:	a2 83       	std	Z+2, r26	; 0x02
     5d2:	b3 83       	std	Z+3, r27	; 0x03
		UART_0_puts("APN...");
     5d4:	83 e2       	ldi	r24, 0x23	; 35
     5d6:	94 e0       	ldi	r25, 0x04	; 4
     5d8:	6f d7       	rcall	.+3806   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     5da:	c7 01       	movw	r24, r14
     5dc:	6d d7       	rcall	.+3802   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     5de:	8a e5       	ldi	r24, 0x5A	; 90
     5e0:	95 e0       	ldi	r25, 0x05	; 5
     5e2:	6a d7       	rcall	.+3796   	; 0x14b8 <UART_0_puts>
		return 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	ac c0       	rjmp	.+344    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if ((strcmp(user,"airtel\0")==0) || (strcmp(user,"Airtel\0")==0)){
     5e8:	6e e7       	ldi	r22, 0x7E	; 126
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	c8 01       	movw	r24, r16
     5ee:	c8 d7       	rcall	.+3984   	; 0x1580 <strcmp>
     5f0:	89 2b       	or	r24, r25
     5f2:	31 f0       	breq	.+12     	; 0x600 <__FUSE_REGION_LENGTH__+0x200>
     5f4:	66 e8       	ldi	r22, 0x86	; 134
     5f6:	71 e0       	ldi	r23, 0x01	; 1
     5f8:	c8 01       	movw	r24, r16
     5fa:	c2 d7       	rcall	.+3972   	; 0x1580 <strcmp>
     5fc:	89 2b       	or	r24, r25
     5fe:	91 f4       	brne	.+36     	; 0x624 <__FUSE_REGION_LENGTH__+0x224>
		strcpy(apn,"airtelgprs.com");
     600:	8f e0       	ldi	r24, 0x0F	; 15
     602:	ea e2       	ldi	r30, 0x2A	; 42
     604:	f4 e0       	ldi	r31, 0x04	; 4
     606:	d7 01       	movw	r26, r14
     608:	01 90       	ld	r0, Z+
     60a:	0d 92       	st	X+, r0
     60c:	8a 95       	dec	r24
     60e:	e1 f7       	brne	.-8      	; 0x608 <__FUSE_REGION_LENGTH__+0x208>
		UART_0_puts("APN...");
     610:	83 e2       	ldi	r24, 0x23	; 35
     612:	94 e0       	ldi	r25, 0x04	; 4
     614:	51 d7       	rcall	.+3746   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     616:	c7 01       	movw	r24, r14
     618:	4f d7       	rcall	.+3742   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     61a:	8a e5       	ldi	r24, 0x5A	; 90
     61c:	95 e0       	ldi	r25, 0x05	; 5
     61e:	4c d7       	rcall	.+3736   	; 0x14b8 <UART_0_puts>
		return 1;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	8e c0       	rjmp	.+284    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if((strcmp(user,"CellOne\0")==0)||(strcmp(user,"BSNL\0")==0)||(strcmp(user,"BSNL 3G\0")==0)){
     624:	6e e8       	ldi	r22, 0x8E	; 142
     626:	71 e0       	ldi	r23, 0x01	; 1
     628:	c8 01       	movw	r24, r16
     62a:	aa d7       	rcall	.+3924   	; 0x1580 <strcmp>
     62c:	89 2b       	or	r24, r25
     62e:	61 f0       	breq	.+24     	; 0x648 <__FUSE_REGION_LENGTH__+0x248>
     630:	67 e9       	ldi	r22, 0x97	; 151
     632:	71 e0       	ldi	r23, 0x01	; 1
     634:	c8 01       	movw	r24, r16
     636:	a4 d7       	rcall	.+3912   	; 0x1580 <strcmp>
     638:	89 2b       	or	r24, r25
     63a:	31 f0       	breq	.+12     	; 0x648 <__FUSE_REGION_LENGTH__+0x248>
     63c:	6d e9       	ldi	r22, 0x9D	; 157
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	c8 01       	movw	r24, r16
     642:	9e d7       	rcall	.+3900   	; 0x1580 <strcmp>
     644:	89 2b       	or	r24, r25
     646:	91 f4       	brne	.+36     	; 0x66c <__FUSE_REGION_LENGTH__+0x26c>
		strcpy(apn,"bsnlenet");
     648:	89 e0       	ldi	r24, 0x09	; 9
     64a:	e9 e3       	ldi	r30, 0x39	; 57
     64c:	f4 e0       	ldi	r31, 0x04	; 4
     64e:	d7 01       	movw	r26, r14
     650:	01 90       	ld	r0, Z+
     652:	0d 92       	st	X+, r0
     654:	8a 95       	dec	r24
     656:	e1 f7       	brne	.-8      	; 0x650 <__FUSE_REGION_LENGTH__+0x250>
		UART_0_puts("APN...");
     658:	83 e2       	ldi	r24, 0x23	; 35
     65a:	94 e0       	ldi	r25, 0x04	; 4
     65c:	2d d7       	rcall	.+3674   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     65e:	c7 01       	movw	r24, r14
     660:	2b d7       	rcall	.+3670   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     662:	8a e5       	ldi	r24, 0x5A	; 90
     664:	95 e0       	ldi	r25, 0x05	; 5
     666:	28 d7       	rcall	.+3664   	; 0x14b8 <UART_0_puts>
		return 1;;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	6a c0       	rjmp	.+212    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if(strcmp(user,"Reliance\0")==0){
     66c:	66 ea       	ldi	r22, 0xA6	; 166
     66e:	71 e0       	ldi	r23, 0x01	; 1
     670:	c8 01       	movw	r24, r16
     672:	86 d7       	rcall	.+3852   	; 0x1580 <strcmp>
     674:	89 2b       	or	r24, r25
     676:	91 f4       	brne	.+36     	; 0x69c <__FUSE_REGION_LENGTH__+0x29c>
		strcpy(apn,"rcomwap");
     678:	88 e0       	ldi	r24, 0x08	; 8
     67a:	e2 e4       	ldi	r30, 0x42	; 66
     67c:	f4 e0       	ldi	r31, 0x04	; 4
     67e:	d7 01       	movw	r26, r14
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <__FUSE_REGION_LENGTH__+0x280>
		UART_0_puts("APN...");
     688:	83 e2       	ldi	r24, 0x23	; 35
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	15 d7       	rcall	.+3626   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     68e:	c7 01       	movw	r24, r14
     690:	13 d7       	rcall	.+3622   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     692:	8a e5       	ldi	r24, 0x5A	; 90
     694:	95 e0       	ldi	r25, 0x05	; 5
     696:	10 d7       	rcall	.+3616   	; 0x14b8 <UART_0_puts>
		return 1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	52 c0       	rjmp	.+164    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if(strcmp(user,"TATA\0")==0){
     69c:	60 eb       	ldi	r22, 0xB0	; 176
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	c8 01       	movw	r24, r16
     6a2:	6e d7       	rcall	.+3804   	; 0x1580 <strcmp>
     6a4:	89 2b       	or	r24, r25
     6a6:	91 f4       	brne	.+36     	; 0x6cc <__FUSE_REGION_LENGTH__+0x2cc>
		strcpy(apn,"tata.docomo.internet");
     6a8:	85 e1       	ldi	r24, 0x15	; 21
     6aa:	ea e4       	ldi	r30, 0x4A	; 74
     6ac:	f4 e0       	ldi	r31, 0x04	; 4
     6ae:	d7 01       	movw	r26, r14
     6b0:	01 90       	ld	r0, Z+
     6b2:	0d 92       	st	X+, r0
     6b4:	8a 95       	dec	r24
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <__FUSE_REGION_LENGTH__+0x2b0>
		UART_0_puts("APN...");
     6b8:	83 e2       	ldi	r24, 0x23	; 35
     6ba:	94 e0       	ldi	r25, 0x04	; 4
     6bc:	fd d6       	rcall	.+3578   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     6be:	c7 01       	movw	r24, r14
     6c0:	fb d6       	rcall	.+3574   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     6c2:	8a e5       	ldi	r24, 0x5A	; 90
     6c4:	95 e0       	ldi	r25, 0x05	; 5
     6c6:	f8 d6       	rcall	.+3568   	; 0x14b8 <UART_0_puts>
		return 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	3a c0       	rjmp	.+116    	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if(strcmp(user,"Uninor\0")==0){
     6cc:	66 eb       	ldi	r22, 0xB6	; 182
     6ce:	71 e0       	ldi	r23, 0x01	; 1
     6d0:	c8 01       	movw	r24, r16
     6d2:	56 d7       	rcall	.+3756   	; 0x1580 <strcmp>
     6d4:	89 2b       	or	r24, r25
     6d6:	91 f4       	brne	.+36     	; 0x6fc <__FUSE_REGION_LENGTH__+0x2fc>
		strcpy(apn,"uninor");
     6d8:	87 e0       	ldi	r24, 0x07	; 7
     6da:	ef e5       	ldi	r30, 0x5F	; 95
     6dc:	f4 e0       	ldi	r31, 0x04	; 4
     6de:	d7 01       	movw	r26, r14
     6e0:	01 90       	ld	r0, Z+
     6e2:	0d 92       	st	X+, r0
     6e4:	8a 95       	dec	r24
     6e6:	e1 f7       	brne	.-8      	; 0x6e0 <__FUSE_REGION_LENGTH__+0x2e0>
		UART_0_puts("APN...");
     6e8:	83 e2       	ldi	r24, 0x23	; 35
     6ea:	94 e0       	ldi	r25, 0x04	; 4
     6ec:	e5 d6       	rcall	.+3530   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     6ee:	c7 01       	movw	r24, r14
     6f0:	e3 d6       	rcall	.+3526   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     6f2:	8a e5       	ldi	r24, 0x5A	; 90
     6f4:	95 e0       	ldi	r25, 0x05	; 5
     6f6:	e0 d6       	rcall	.+3520   	; 0x14b8 <UART_0_puts>
		return 1;
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	22 c0       	rjmp	.+68     	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else if((strcmp(user,"!dea\0")==0) || (strcasecmp(user,"Idea\0") == 0)){
     6fc:	6e eb       	ldi	r22, 0xBE	; 190
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	c8 01       	movw	r24, r16
     702:	3e d7       	rcall	.+3708   	; 0x1580 <strcmp>
     704:	89 2b       	or	r24, r25
     706:	31 f0       	breq	.+12     	; 0x714 <__FUSE_REGION_LENGTH__+0x314>
     708:	64 ec       	ldi	r22, 0xC4	; 196
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	c8 01       	movw	r24, r16
     70e:	25 d7       	rcall	.+3658   	; 0x155a <strcasecmp>
     710:	89 2b       	or	r24, r25
     712:	91 f4       	brne	.+36     	; 0x738 <__FUSE_REGION_LENGTH__+0x338>
		strcpy(apn,"isafe");
     714:	86 e0       	ldi	r24, 0x06	; 6
     716:	e6 e6       	ldi	r30, 0x66	; 102
     718:	f4 e0       	ldi	r31, 0x04	; 4
     71a:	d7 01       	movw	r26, r14
     71c:	01 90       	ld	r0, Z+
     71e:	0d 92       	st	X+, r0
     720:	8a 95       	dec	r24
     722:	e1 f7       	brne	.-8      	; 0x71c <__FUSE_REGION_LENGTH__+0x31c>
		UART_0_puts("APN...");
     724:	83 e2       	ldi	r24, 0x23	; 35
     726:	94 e0       	ldi	r25, 0x04	; 4
     728:	c7 d6       	rcall	.+3470   	; 0x14b8 <UART_0_puts>
		UART_0_puts(apn);
     72a:	c7 01       	movw	r24, r14
     72c:	c5 d6       	rcall	.+3466   	; 0x14b8 <UART_0_puts>
		UART_0_puts("\r\n");
     72e:	8a e5       	ldi	r24, 0x5A	; 90
     730:	95 e0       	ldi	r25, 0x05	; 5
     732:	c2 d6       	rcall	.+3460   	; 0x14b8 <UART_0_puts>
		return 1; 
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	04 c0       	rjmp	.+8      	; 0x740 <__FUSE_REGION_LENGTH__+0x340>
	}
	else{
		UART_0_puts("APN not found...\r\n");
     738:	8c e6       	ldi	r24, 0x6C	; 108
     73a:	94 e0       	ldi	r25, 0x04	; 4
     73c:	bd d6       	rcall	.+3450   	; 0x14b8 <UART_0_puts>
		return 0;
     73e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     740:	c8 53       	subi	r28, 0x38	; 56
     742:	df 4f       	sbci	r29, 0xFF	; 255
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	08 95       	ret

0000075c <allocate_dynaIP>:
	
		
	return 0;
}

uint8_t allocate_dynaIP(){
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	64 97       	sbiw	r28, 0x14	; 20
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
	char simresponse[20];
	
	//  To attach to GPRS connection
	sim900_cmd("AT+CIICR\r\n\0",simresponse);
     770:	be 01       	movw	r22, r28
     772:	6f 5f       	subi	r22, 0xFF	; 255
     774:	7f 4f       	sbci	r23, 0xFF	; 255
     776:	8a ec       	ldi	r24, 0xCA	; 202
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	26 de       	rcall	.-948    	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")==0){
     77c:	60 e1       	ldi	r22, 0x10	; 16
     77e:	71 e0       	ldi	r23, 0x01	; 1
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	fd d6       	rcall	.+3578   	; 0x1580 <strcmp>
     786:	89 2b       	or	r24, r25
     788:	81 f4       	brne	.+32     	; 0x7aa <allocate_dynaIP+0x4e>
		//  To allocate dynamic IP
		sim900_cmd("AT+CIFSR\r\n\0",simresponse);
     78a:	be 01       	movw	r22, r28
     78c:	6f 5f       	subi	r22, 0xFF	; 255
     78e:	7f 4f       	sbci	r23, 0xFF	; 255
     790:	86 ed       	ldi	r24, 0xD6	; 214
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	19 de       	rcall	.-974    	; 0x3c8 <sim900_cmd>
		if (strcmp(simresponse,"ERROR\0")!=0){
     796:	62 ee       	ldi	r22, 0xE2	; 226
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	ce 01       	movw	r24, r28
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	f0 d6       	rcall	.+3552   	; 0x1580 <strcmp>
     7a0:	21 e0       	ldi	r18, 0x01	; 1
     7a2:	89 2b       	or	r24, r25
     7a4:	19 f4       	brne	.+6      	; 0x7ac <allocate_dynaIP+0x50>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <allocate_dynaIP+0x50>
			return 1;
		}
	}
	return 0;
     7aa:	20 e0       	ldi	r18, 0x00	; 0
} 
     7ac:	82 2f       	mov	r24, r18
     7ae:	64 96       	adiw	r28, 0x14	; 20
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <reset_SIM900>:
	skip = 0;
	TCNT1 = 0;
	sbi(TCCR1B,CS12);
}

void reset_SIM900(){
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	64 97       	sbiw	r28, 0x14	; 20
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
	
	char simresponse[20];
	
	sim900_cmd("AT+CPOWD=1\r\n\0",simresponse);	
     7d4:	be 01       	movw	r22, r28
     7d6:	6f 5f       	subi	r22, 0xFF	; 255
     7d8:	7f 4f       	sbci	r23, 0xFF	; 255
     7da:	89 ee       	ldi	r24, 0xE9	; 233
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	f4 dd       	rcall	.-1048   	; 0x3c8 <sim900_cmd>
     7e0:	2a ea       	ldi	r18, 0xAA	; 170
     7e2:	36 ee       	ldi	r19, 0xE6	; 230
     7e4:	86 e9       	ldi	r24, 0x96	; 150
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	30 40       	sbci	r19, 0x00	; 0
     7ec:	80 40       	sbci	r24, 0x00	; 0
     7ee:	90 40       	sbci	r25, 0x00	; 0
     7f0:	d9 f7       	brne	.-10     	; 0x7e8 <reset_SIM900+0x28>
     7f2:	00 00       	nop
	_delay_ms(20000);
}
     7f4:	64 96       	adiw	r28, 0x14	; 20
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	cd bf       	out	0x3d, r28	; 61
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <fetch_gprs>:
	}
	
	return 1;
}

uint8_t fetch_gprs(){
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	64 97       	sbiw	r28, 0x14	; 20
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
	char simresponse[20];
	UART_0_puts("Searching GPRS...\r\n");
     81a:	8f e7       	ldi	r24, 0x7F	; 127
     81c:	94 e0       	ldi	r25, 0x04	; 4
     81e:	4c d6       	rcall	.+3224   	; 0x14b8 <UART_0_puts>
	
	sim900_cmd("AT+CGATT?\r\n",simresponse);
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	83 e9       	ldi	r24, 0x93	; 147
     828:	94 e0       	ldi	r25, 0x04	; 4
     82a:	ce dd       	rcall	.-1124   	; 0x3c8 <sim900_cmd>
	if(strcmp(simresponse,"+CGATT: 0\0")==0){  // If GPRS is not attached
     82c:	67 ef       	ldi	r22, 0xF7	; 247
     82e:	71 e0       	ldi	r23, 0x01	; 1
     830:	ce 01       	movw	r24, r28
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	a5 d6       	rcall	.+3402   	; 0x1580 <strcmp>
     836:	89 2b       	or	r24, r25
     838:	71 f4       	brne	.+28     	; 0x856 <fetch_gprs+0x50>
		UART_0_puts("GPRS returns ERROR...\r\n");
     83a:	8f e9       	ldi	r24, 0x9F	; 159
     83c:	94 e0       	ldi	r25, 0x04	; 4
     83e:	3c d6       	rcall	.+3192   	; 0x14b8 <UART_0_puts>
     840:	2f ef       	ldi	r18, 0xFF	; 255
     842:	81 e1       	ldi	r24, 0x11	; 17
     844:	9a e7       	ldi	r25, 0x7A	; 122
     846:	21 50       	subi	r18, 0x01	; 1
     848:	80 40       	sbci	r24, 0x00	; 0
     84a:	90 40       	sbci	r25, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <fetch_gprs+0x40>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <fetch_gprs+0x4a>
     850:	00 00       	nop
		sbi(UCSR1B,RXEN1);
		UART_0_puts("GPRS OK...\r\n");
		sim900_response(simresponse);
		return 1;
	}
	return 0;
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	15 c0       	rjmp	.+42     	; 0x880 <fetch_gprs+0x7a>
	
	sim900_cmd("AT+CGATT?\r\n",simresponse);
	if(strcmp(simresponse,"+CGATT: 0\0")==0){  // If GPRS is not attached
		UART_0_puts("GPRS returns ERROR...\r\n");
		_delay_ms(5000);
	}else if(strcmp(simresponse,"+CGATT: 1\0")==0){  // GPRS is attached properly
     856:	62 e0       	ldi	r22, 0x02	; 2
     858:	72 e0       	ldi	r23, 0x02	; 2
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	90 d6       	rcall	.+3360   	; 0x1580 <strcmp>
     860:	89 2b       	or	r24, r25
     862:	69 f4       	brne	.+26     	; 0x87e <fetch_gprs+0x78>
		//  Reception Enable again for OK
		sbi(UCSR1B,RXEN1);
     864:	e9 ec       	ldi	r30, 0xC9	; 201
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	80 61       	ori	r24, 0x10	; 16
     86c:	80 83       	st	Z, r24
		UART_0_puts("GPRS OK...\r\n");
     86e:	87 eb       	ldi	r24, 0xB7	; 183
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	22 d6       	rcall	.+3140   	; 0x14b8 <UART_0_puts>
		sim900_response(simresponse);
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	66 dd       	rcall	.-1332   	; 0x346 <sim900_response>
		return 1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	01 c0       	rjmp	.+2      	; 0x880 <fetch_gprs+0x7a>
	}
	return 0;
     87e:	80 e0       	ldi	r24, 0x00	; 0
}
     880:	64 96       	adiw	r28, 0x14	; 20
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <set_apn>:
			t=0;
		}
	}
}

uint8_t set_apn(char* apn){
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	2a 97       	sbiw	r28, 0x0a	; 10
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	8c 01       	movw	r16, r24
	char simresponse[10];
	uint8_t flag_allocate_dynaIP=0;
	
	UART_0_puts("Closing PDP Settings...\r\n");
     8ac:	84 ec       	ldi	r24, 0xC4	; 196
     8ae:	94 e0       	ldi	r25, 0x04	; 4
     8b0:	03 d6       	rcall	.+3078   	; 0x14b8 <UART_0_puts>
	//  Closing PDP connection
	sim900_cmd("AT+CIPSHUT\r\n\0",simresponse);	
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	8d e0       	ldi	r24, 0x0D	; 13
     8ba:	92 e0       	ldi	r25, 0x02	; 2
     8bc:	85 dd       	rcall	.-1270   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"SHUT OK\0")!=0){  //  Previous PDP connection not closed properly
     8be:	6b e1       	ldi	r22, 0x1B	; 27
     8c0:	72 e0       	ldi	r23, 0x02	; 2
     8c2:	ce 01       	movw	r24, r28
     8c4:	01 96       	adiw	r24, 0x01	; 1
     8c6:	5c d6       	rcall	.+3256   	; 0x1580 <strcmp>
     8c8:	89 2b       	or	r24, r25
     8ca:	41 f0       	breq	.+16     	; 0x8dc <set_apn+0x4a>
		UART_0_puts("PDP connection not closed properly...\r\n");
     8cc:	8e ed       	ldi	r24, 0xDE	; 222
     8ce:	94 e0       	ldi	r25, 0x04	; 4
     8d0:	f3 d5       	rcall	.+3046   	; 0x14b8 <UART_0_puts>
		UART_0_puts("Re-shutting...\r\n");
     8d2:	86 e0       	ldi	r24, 0x06	; 6
     8d4:	95 e0       	ldi	r25, 0x05	; 5
     8d6:	f0 d5       	rcall	.+3040   	; 0x14b8 <UART_0_puts>
		return 0;
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	39 c0       	rjmp	.+114    	; 0x94e <set_apn+0xbc>
	}
	UART_0_puts("PDP Settings closed Properly...\r\n");
     8dc:	87 e1       	ldi	r24, 0x17	; 23
     8de:	95 e0       	ldi	r25, 0x05	; 5
     8e0:	eb d5       	rcall	.+3030   	; 0x14b8 <UART_0_puts>
	UART_0_puts("Setting apn to ");
     8e2:	89 e3       	ldi	r24, 0x39	; 57
     8e4:	95 e0       	ldi	r25, 0x05	; 5
     8e6:	e8 d5       	rcall	.+3024   	; 0x14b8 <UART_0_puts>
	UART_0_puts(apn);
     8e8:	c8 01       	movw	r24, r16
     8ea:	e6 d5       	rcall	.+3020   	; 0x14b8 <UART_0_puts>
	UART_0_puts("\r\n");
     8ec:	8a e5       	ldi	r24, 0x5A	; 90
     8ee:	95 e0       	ldi	r25, 0x05	; 5
     8f0:	e3 d5       	rcall	.+3014   	; 0x14b8 <UART_0_puts>
	
	//  Reception Enable
	sbi(UCSR1B,RXEN1);
     8f2:	e9 ec       	ldi	r30, 0xC9	; 201
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	90 81       	ld	r25, Z
     8f8:	90 61       	ori	r25, 0x10	; 16
     8fa:	90 83       	st	Z, r25
	
	//  Setting APN
	UART_1_puts("AT+CSTT=\"");  //  To assign the APN username and password
     8fc:	89 e4       	ldi	r24, 0x49	; 73
     8fe:	95 e0       	ldi	r25, 0x05	; 5
     900:	01 d6       	rcall	.+3074   	; 0x1504 <UART_1_puts>
	UART_1_puts(apn);
     902:	c8 01       	movw	r24, r16
     904:	ff d5       	rcall	.+3070   	; 0x1504 <UART_1_puts>
	UART_1_puts("\"\,\"\"\,\"\"\r\n");
     906:	83 e5       	ldi	r24, 0x53	; 83
     908:	95 e0       	ldi	r25, 0x05	; 5
     90a:	fc d5       	rcall	.+3064   	; 0x1504 <UART_1_puts>
		
	// Getting response
	sim900_response(simresponse);
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	1a dd       	rcall	.-1484   	; 0x346 <sim900_response>
	
	if (strcmp(simresponse,"OK\0")!=0){  //  Not good
     912:	60 e1       	ldi	r22, 0x10	; 16
     914:	71 e0       	ldi	r23, 0x01	; 1
     916:	ce 01       	movw	r24, r28
     918:	01 96       	adiw	r24, 0x01	; 1
     91a:	32 d6       	rcall	.+3172   	; 0x1580 <strcmp>
     91c:	89 2b       	or	r24, r25
     91e:	41 f0       	breq	.+16     	; 0x930 <set_apn+0x9e>
		UART_0_puts("APN not set properly...\r\n");
     920:	8d e5       	ldi	r24, 0x5D	; 93
     922:	95 e0       	ldi	r25, 0x05	; 5
     924:	c9 d5       	rcall	.+2962   	; 0x14b8 <UART_0_puts>
		UART_0_puts("Re-setting APN...\r\n");
     926:	87 e7       	ldi	r24, 0x77	; 119
     928:	95 e0       	ldi	r25, 0x05	; 5
     92a:	c6 d5       	rcall	.+2956   	; 0x14b8 <UART_0_puts>
		return 0;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0f c0       	rjmp	.+30     	; 0x94e <set_apn+0xbc>
	}
	UART_0_puts("APN set properly...\r\n");
     930:	8b e8       	ldi	r24, 0x8B	; 139
     932:	95 e0       	ldi	r25, 0x05	; 5
     934:	c1 d5       	rcall	.+2946   	; 0x14b8 <UART_0_puts>
	UART_0_puts("Allocating Dynamic IP...\r\n");
     936:	81 ea       	ldi	r24, 0xA1	; 161
     938:	95 e0       	ldi	r25, 0x05	; 5
     93a:	be d5       	rcall	.+2940   	; 0x14b8 <UART_0_puts>
	// Allocating dynamic IP
	flag_allocate_dynaIP = allocate_dynaIP();
     93c:	0f df       	rcall	.-482    	; 0x75c <allocate_dynaIP>
	if(flag_allocate_dynaIP==1){  // Dynamic IP allocation successful
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	29 f4       	brne	.+10     	; 0x94c <set_apn+0xba>
		UART_0_puts("Dynamic IP Allocated successfully...\r\n");
     942:	8c eb       	ldi	r24, 0xBC	; 188
     944:	95 e0       	ldi	r25, 0x05	; 5
     946:	b8 d5       	rcall	.+2928   	; 0x14b8 <UART_0_puts>
		return 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	01 c0       	rjmp	.+2      	; 0x94e <set_apn+0xbc>
	}
	
		
	return 0;
     94c:	80 e0       	ldi	r24, 0x00	; 0
}
     94e:	2a 96       	adiw	r28, 0x0a	; 10
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <get_signalstrength>:

	//  Reception Disable
	cbi(UCSR1B,RXEN1);
} 

uint8_t get_signalstrength(){
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	c0 5d       	subi	r28, 0xD0	; 208
     96e:	d1 09       	sbc	r29, r1
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	f8 94       	cli
     974:	de bf       	out	0x3e, r29	; 62
     976:	0f be       	out	0x3f, r0	; 63
     978:	cd bf       	out	0x3d, r28	; 61
	char dummy[5],strength[3],simresponse[200];
	uint8_t signalstrength;
	
	//  To get signal strength
	sim900_cmd("AT+CSQ\r\n\0",simresponse); 
     97a:	be 01       	movw	r22, r28
     97c:	67 5f       	subi	r22, 0xF7	; 247
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	84 e2       	ldi	r24, 0x24	; 36
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	21 dd       	rcall	.-1470   	; 0x3c8 <sim900_cmd>
	
	//  Re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
     986:	e9 ec       	ldi	r30, 0xC9	; 201
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	80 61       	ori	r24, 0x10	; 16
     98e:	80 83       	st	Z, r24
	
	sim900_response(dummy);
     990:	ce 01       	movw	r24, r28
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	d8 dc       	rcall	.-1616   	; 0x346 <sim900_response>
	
	strength[0]=simresponse[6];
     996:	8f 85       	ldd	r24, Y+15	; 0x0f
     998:	8e 83       	std	Y+6, r24	; 0x06
	if (simresponse[7]!=','){
     99a:	88 89       	ldd	r24, Y+16	; 0x10
     99c:	8c 32       	cpi	r24, 0x2C	; 44
     99e:	19 f0       	breq	.+6      	; 0x9a6 <get_signalstrength+0x42>
		strength[1]=simresponse[7];
     9a0:	8f 83       	std	Y+7, r24	; 0x07
		strength[2]='\0';
     9a2:	18 86       	std	Y+8, r1	; 0x08
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <get_signalstrength+0x44>
	} else {
		strength[1]='\0';
     9a6:	1f 82       	std	Y+7, r1	; 0x07
	}	
	
	signalstrength=atoi(strength);
     9a8:	ce 01       	movw	r24, r28
     9aa:	06 96       	adiw	r24, 0x06	; 6
     9ac:	b9 d5       	rcall	.+2930   	; 0x1520 <atoi>
	
	if (signalstrength<10 || signalstrength==99){
     9ae:	8a 30       	cpi	r24, 0x0A	; 10
     9b0:	68 f0       	brcs	.+26     	; 0x9cc <get_signalstrength+0x68>
     9b2:	83 36       	cpi	r24, 0x63	; 99
     9b4:	69 f0       	breq	.+26     	; 0x9d0 <get_signalstrength+0x6c>
		return 0;
	} else if (signalstrength>=10 && signalstrength<20){
     9b6:	96 ef       	ldi	r25, 0xF6	; 246
     9b8:	98 0f       	add	r25, r24
     9ba:	9a 30       	cpi	r25, 0x0A	; 10
     9bc:	58 f0       	brcs	.+22     	; 0x9d4 <get_signalstrength+0x70>
		return 1;
	} else if (signalstrength>=20 && signalstrength<30){
     9be:	9c ee       	ldi	r25, 0xEC	; 236
     9c0:	98 0f       	add	r25, r24
     9c2:	9a 30       	cpi	r25, 0x0A	; 10
     9c4:	48 f0       	brcs	.+18     	; 0x9d8 <get_signalstrength+0x74>
		return 2;
	} else if (signalstrength>30){
     9c6:	8f 31       	cpi	r24, 0x1F	; 31
     9c8:	48 f4       	brcc	.+18     	; 0x9dc <get_signalstrength+0x78>
     9ca:	09 c0       	rjmp	.+18     	; 0x9de <get_signalstrength+0x7a>
	}	
	
	signalstrength=atoi(strength);
	
	if (signalstrength<10 || signalstrength==99){
		return 0;
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	07 c0       	rjmp	.+14     	; 0x9de <get_signalstrength+0x7a>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <get_signalstrength+0x7a>
	} else if (signalstrength>=10 && signalstrength<20){
		return 1;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <get_signalstrength+0x7a>
	} else if (signalstrength>=20 && signalstrength<30){
		return 2;
     9d8:	82 e0       	ldi	r24, 0x02	; 2
     9da:	01 c0       	rjmp	.+2      	; 0x9de <get_signalstrength+0x7a>
	} else if (signalstrength>30){
		return 3;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     9de:	c0 53       	subi	r28, 0x30	; 48
     9e0:	df 4f       	sbci	r29, 0xFF	; 255
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <get_sms>:
	sbi(UCSR1B,RXEN1);
	
	sim900_response(response);
}

uint8_t get_sms(uint8_t* system_on,char* customer_no,char* Serial_num){
     9f2:	2f 92       	push	r2
     9f4:	3f 92       	push	r3
     9f6:	4f 92       	push	r4
     9f8:	5f 92       	push	r5
     9fa:	6f 92       	push	r6
     9fc:	7f 92       	push	r7
     9fe:	8f 92       	push	r8
     a00:	9f 92       	push	r9
     a02:	af 92       	push	r10
     a04:	bf 92       	push	r11
     a06:	cf 92       	push	r12
     a08:	df 92       	push	r13
     a0a:	ef 92       	push	r14
     a0c:	ff 92       	push	r15
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	c1 58       	subi	r28, 0x81	; 129
     a1c:	d1 40       	sbci	r29, 0x01	; 1
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	c5 58       	subi	r28, 0x85	; 133
     a2a:	de 4f       	sbci	r29, 0xFE	; 254
     a2c:	99 83       	std	Y+1, r25	; 0x01
     a2e:	88 83       	st	Y, r24
     a30:	cb 57       	subi	r28, 0x7B	; 123
     a32:	d1 40       	sbci	r29, 0x01	; 1
     a34:	c9 58       	subi	r28, 0x89	; 137
     a36:	de 4f       	sbci	r29, 0xFE	; 254
     a38:	79 83       	std	Y+1, r23	; 0x01
     a3a:	68 83       	st	Y, r22
     a3c:	c7 57       	subi	r28, 0x77	; 119
     a3e:	d1 40       	sbci	r29, 0x01	; 1
     a40:	c7 58       	subi	r28, 0x87	; 135
     a42:	de 4f       	sbci	r29, 0xFE	; 254
     a44:	59 83       	std	Y+1, r21	; 0x01
     a46:	48 83       	st	Y, r20
     a48:	c9 57       	subi	r28, 0x79	; 121
     a4a:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t update_customer_no=0,update_serial_no=0,update_remote_control=0;
	int no_of_msg,message_number;
	char no_msg[6],response_number[150],contact_no[20],simresponse[30],msg[160],dummy[5];
	char initial[]={'0','0'};
	
	UART_0_puts("Checking no. of unread messages...\r\n");
     a4c:	83 ee       	ldi	r24, 0xE3	; 227
     a4e:	95 e0       	ldi	r25, 0x05	; 5
     a50:	33 d5       	rcall	.+2662   	; 0x14b8 <UART_0_puts>
	// Check no. of messages
	sim900_cmd("AT+CPMS=\"SM\"\r\n\0",simresponse);
     a52:	be 01       	movw	r22, r28
     a54:	6f 54       	subi	r22, 0x4F	; 79
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	8e e2       	ldi	r24, 0x2E	; 46
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	b5 dc       	rcall	.-1686   	; 0x3c8 <sim900_cmd>
	
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
     a5e:	e9 ec       	ldi	r30, 0xC9	; 201
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	80 61       	ori	r24, 0x10	; 16
     a66:	80 83       	st	Z, r24
	
	sim900_response(dummy);
     a68:	ce 01       	movw	r24, r28
     a6a:	81 59       	subi	r24, 0x91	; 145
     a6c:	9e 4f       	sbci	r25, 0xFE	; 254
     a6e:	6b dc       	rcall	.-1834   	; 0x346 <sim900_response>
	
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
     a70:	cf 54       	subi	r28, 0x4F	; 79
     a72:	df 4f       	sbci	r29, 0xFF	; 255
     a74:	88 81       	ld	r24, Y
     a76:	c1 5b       	subi	r28, 0xB1	; 177
     a78:	d0 40       	sbci	r29, 0x00	; 0
     a7a:	8a 33       	cpi	r24, 0x3A	; 58
     a7c:	49 f0       	breq	.+18     	; 0xa90 <get_sms+0x9e>
     a7e:	fe 01       	movw	r30, r28
     a80:	ee 54       	subi	r30, 0x4E	; 78
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	80 e0       	ldi	r24, 0x00	; 0
		i++;
     a86:	8f 5f       	subi	r24, 0xFF	; 255
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
     a88:	91 91       	ld	r25, Z+
     a8a:	9a 33       	cpi	r25, 0x3A	; 58
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <get_sms+0x94>
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <get_sms+0xa0>
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
     a90:	80 e0       	ldi	r24, 0x00	; 0
	while (simresponse[i]!='\:' && i<30){
		i++;
	}
	i++;i++;
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	98 0f       	add	r25, r24
	while (simresponse[i]!='\,' && p<6){
     a96:	e1 eb       	ldi	r30, 0xB1	; 177
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	ec 0f       	add	r30, r28
     a9c:	fd 1f       	adc	r31, r29
     a9e:	e9 0f       	add	r30, r25
     aa0:	f1 1d       	adc	r31, r1
     aa2:	20 81       	ld	r18, Z
     aa4:	2c 32       	cpi	r18, 0x2C	; 44
     aa6:	a9 f0       	breq	.+42     	; 0xad2 <get_sms+0xe0>
     aa8:	ae 01       	movw	r20, r28
     aaa:	4f 5f       	subi	r20, 0xFF	; 255
     aac:	5f 4f       	sbci	r21, 0xFF	; 255
     aae:	88 5f       	subi	r24, 0xF8	; 248
     ab0:	fa 01       	movw	r30, r20
		no_msg[p]=simresponse[i];
     ab2:	21 93       	st	Z+, r18
     ab4:	3e 2f       	mov	r19, r30
     ab6:	34 1b       	sub	r19, r20
		p++;i++;
     ab8:	9f 5f       	subi	r25, 0xFF	; 255
	i=0;p=0;
	while (simresponse[i]!='\:' && i<30){
		i++;
	}
	i++;i++;
	while (simresponse[i]!='\,' && p<6){
     aba:	a1 eb       	ldi	r26, 0xB1	; 177
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	ac 0f       	add	r26, r28
     ac0:	bd 1f       	adc	r27, r29
     ac2:	a9 0f       	add	r26, r25
     ac4:	b1 1d       	adc	r27, r1
     ac6:	2c 91       	ld	r18, X
     ac8:	2c 32       	cpi	r18, 0x2C	; 44
     aca:	21 f0       	breq	.+8      	; 0xad4 <get_sms+0xe2>
     acc:	98 13       	cpse	r25, r24
     ace:	f1 cf       	rjmp	.-30     	; 0xab2 <get_sms+0xc0>
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <get_sms+0xe2>
	//  For re-enabling reception for OK
	sbi(UCSR1B,RXEN1);
	
	sim900_response(dummy);
	
	i=0;p=0;
     ad2:	30 e0       	ldi	r19, 0x00	; 0
	i++;i++;
	while (simresponse[i]!='\,' && p<6){
		no_msg[p]=simresponse[i];
		p++;i++;
	}
	no_msg[p]='\0';
     ad4:	e1 e0       	ldi	r30, 0x01	; 1
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ec 0f       	add	r30, r28
     ada:	fd 1f       	adc	r31, r29
     adc:	e3 0f       	add	r30, r19
     ade:	f1 1d       	adc	r31, r1
     ae0:	10 82       	st	Z, r1
	no_of_msg = atoi(no_msg);  
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	1c d5       	rcall	.+2616   	; 0x1520 <atoi>
     ae8:	cc 58       	subi	r28, 0x8C	; 140
     aea:	de 4f       	sbci	r29, 0xFE	; 254
     aec:	99 83       	std	Y+1, r25	; 0x01
     aee:	88 83       	st	Y, r24
     af0:	c4 57       	subi	r28, 0x74	; 116
     af2:	d1 40       	sbci	r29, 0x01	; 1
	UART_0_puts("no. of unread messages are..");
     af4:	88 e0       	ldi	r24, 0x08	; 8
     af6:	96 e0       	ldi	r25, 0x06	; 6
     af8:	df d4       	rcall	.+2494   	; 0x14b8 <UART_0_puts>
	UART_0_puts(no_msg);
     afa:	ce 01       	movw	r24, r28
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	dc d4       	rcall	.+2488   	; 0x14b8 <UART_0_puts>
	UART_0_puts("\r\n");
     b00:	8a e5       	ldi	r24, 0x5A	; 90
     b02:	95 e0       	ldi	r25, 0x05	; 5
     b04:	d9 d4       	rcall	.+2482   	; 0x14b8 <UART_0_puts>
	
	// Exiting the function if no new messages have arrived
	if (no_of_msg==0){
     b06:	cc 58       	subi	r28, 0x8C	; 140
     b08:	de 4f       	sbci	r29, 0xFE	; 254
     b0a:	28 81       	ld	r18, Y
     b0c:	39 81       	ldd	r19, Y+1	; 0x01
     b0e:	c4 57       	subi	r28, 0x74	; 116
     b10:	d1 40       	sbci	r29, 0x01	; 1
     b12:	23 2b       	or	r18, r19
     b14:	09 f4       	brne	.+2      	; 0xb18 <get_sms+0x126>
     b16:	56 c2       	rjmp	.+1196   	; 0xfc4 <get_sms+0x5d2>
		return 1;
	}
	
	// Changing the message to readable format
	sim900_cmd("AT+CMGF=1\r\n",simresponse);
     b18:	be 01       	movw	r22, r28
     b1a:	6f 54       	subi	r22, 0x4F	; 79
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	85 e2       	ldi	r24, 0x25	; 37
     b20:	96 e0       	ldi	r25, 0x06	; 6
     b22:	52 dc       	rcall	.-1884   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")!=0){
     b24:	60 e1       	ldi	r22, 0x10	; 16
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	ce 01       	movw	r24, r28
     b2a:	8f 54       	subi	r24, 0x4F	; 79
     b2c:	9f 4f       	sbci	r25, 0xFF	; 255
     b2e:	28 d5       	rcall	.+2640   	; 0x1580 <strcmp>
     b30:	89 2b       	or	r24, r25
     b32:	09 f0       	breq	.+2      	; 0xb36 <get_sms+0x144>
     b34:	49 c2       	rjmp	.+1170   	; 0xfc8 <get_sms+0x5d6>
		return 0;
	}
	UART_0_puts("Messages converted to Readable Format...\r\n");
     b36:	81 e3       	ldi	r24, 0x31	; 49
     b38:	96 e0       	ldi	r25, 0x06	; 6
     b3a:	be d4       	rcall	.+2428   	; 0x14b8 <UART_0_puts>
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     b3c:	cc 58       	subi	r28, 0x8C	; 140
     b3e:	de 4f       	sbci	r29, 0xFE	; 254
     b40:	88 81       	ld	r24, Y
     b42:	99 81       	ldd	r25, Y+1	; 0x01
     b44:	c4 57       	subi	r28, 0x74	; 116
     b46:	d1 40       	sbci	r29, 0x01	; 1
     b48:	18 16       	cp	r1, r24
     b4a:	19 06       	cpc	r1, r25
     b4c:	0c f0       	brlt	.+2      	; 0xb50 <get_sms+0x15e>
     b4e:	13 c2       	rjmp	.+1062   	; 0xf76 <get_sms+0x584>
     b50:	68 94       	set
     b52:	22 24       	eor	r2, r2
     b54:	21 f8       	bld	r2, 1
     b56:	31 2c       	mov	r3, r1
     b58:	c3 58       	subi	r28, 0x83	; 131
     b5a:	de 4f       	sbci	r29, 0xFE	; 254
     b5c:	18 82       	st	Y, r1
     b5e:	cd 57       	subi	r28, 0x7D	; 125
     b60:	d1 40       	sbci	r29, 0x01	; 1
     b62:	c2 58       	subi	r28, 0x82	; 130
     b64:	de 4f       	sbci	r29, 0xFE	; 254
     b66:	18 82       	st	Y, r1
     b68:	ce 57       	subi	r28, 0x7E	; 126
     b6a:	d1 40       	sbci	r29, 0x01	; 1
     b6c:	c1 58       	subi	r28, 0x81	; 129
     b6e:	de 4f       	sbci	r29, 0xFE	; 254
     b70:	18 82       	st	Y, r1
     b72:	cf 57       	subi	r28, 0x7F	; 127
     b74:	d1 40       	sbci	r29, 0x01	; 1
			initial[0]=initial[1];
			dataarrived=wait_for_data();
			if (dataarrived==0){
				break;
			}
			initial[1]=UDR1;
     b76:	0e ec       	ldi	r16, 0xCE	; 206
     b78:	10 e0       	ldi	r17, 0x00	; 0
     b7a:	7e 01       	movw	r14, r28
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	e9 0e       	add	r14, r25
     b80:	f1 1c       	adc	r15, r1
     b82:	5e 01       	movw	r10, r28
     b84:	ee e9       	ldi	r30, 0x9E	; 158
     b86:	ae 0e       	add	r10, r30
     b88:	b1 1c       	adc	r11, r1
     b8a:	ca 58       	subi	r28, 0x8A	; 138
     b8c:	de 4f       	sbci	r29, 0xFE	; 254
     b8e:	e8 82       	st	Y, r14
     b90:	c6 57       	subi	r28, 0x76	; 118
     b92:	d1 40       	sbci	r29, 0x01	; 1
     b94:	8f 2c       	mov	r8, r15
     b96:	3e 01       	movw	r6, r28
     b98:	ff ec       	ldi	r31, 0xCF	; 207
     b9a:	6f 0e       	add	r6, r31
     b9c:	71 1c       	adc	r7, r1
     b9e:	2e 01       	movw	r4, r28
     ba0:	20 e9       	ldi	r18, 0x90	; 144
     ba2:	42 1a       	sub	r4, r18
     ba4:	2e ef       	ldi	r18, 0xFE	; 254
     ba6:	52 0a       	sbc	r5, r18
			UART_0_puts("System Turned OFF....\r\n");
			cbi(PORTB,7);
			update_remote_control=1;
		}
		else if ((strncmp(msg,"SNO+E",5)==0) && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  To change serial number by Master
			strncpy(Serial_num,msg+4,11);
     ba8:	c3 01       	movw	r24, r6
     baa:	04 96       	adiw	r24, 0x04	; 4
     bac:	c0 58       	subi	r28, 0x80	; 128
     bae:	de 4f       	sbci	r29, 0xFE	; 254
     bb0:	99 83       	std	Y+1, r25	; 0x01
     bb2:	88 83       	st	Y, r24
     bb4:	c0 58       	subi	r28, 0x80	; 128
     bb6:	d1 40       	sbci	r29, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     bb8:	4a e0       	ldi	r20, 0x0A	; 10
     bba:	be 01       	movw	r22, r28
     bbc:	6f 5f       	subi	r22, 0xFF	; 255
     bbe:	7f 4f       	sbci	r23, 0xFF	; 255
     bc0:	c1 01       	movw	r24, r2
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	0a d5       	rcall	.+2580   	; 0x15da <__itoa_ncheck>
	while (message_number<=no_of_msg){
		initial[0]='0';initial[1]='0';  // Re-initializing initial variable
		
		// Send command for reading the particular message
		itoa(message_number,no_msg,10);
		UART_1_puts("AT+CMGR=");
     bc6:	8c e5       	ldi	r24, 0x5C	; 92
     bc8:	96 e0       	ldi	r25, 0x06	; 6
     bca:	9c d4       	rcall	.+2360   	; 0x1504 <UART_1_puts>
		UART_1_puts(no_msg);
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	99 d4       	rcall	.+2354   	; 0x1504 <UART_1_puts>
		UART_1_puts("\r\n");
     bd2:	8a e5       	ldi	r24, 0x5A	; 90
     bd4:	95 e0       	ldi	r25, 0x05	; 5
     bd6:	96 d4       	rcall	.+2348   	; 0x1504 <UART_1_puts>
		
		//  For enabling reception
		sbi(UCSR1B,RXEN1);		
     bd8:	e9 ec       	ldi	r30, 0xC9	; 201
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	80 61       	ori	r24, 0x10	; 16
     be0:	80 83       	st	Z, r24
	UART_0_puts("Messages converted to Readable Format...\r\n");
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
		initial[0]='0';initial[1]='0';  // Re-initializing initial variable
     be2:	0f 2e       	mov	r0, r31
     be4:	f0 e3       	ldi	r31, 0x30	; 48
     be6:	df 2e       	mov	r13, r31
     be8:	f0 2d       	mov	r31, r0
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <get_sms+0x200>
     bec:	d8 2e       	mov	r13, r24
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <get_sms+0x200>
     bf0:	d8 2e       	mov	r13, r24
		sbi(UCSR1B,RXEN1);		
		
		//  For receiving sender number
		while(!(initial[0]==0x0D && initial[1]==0x0A)){
			initial[0]=initial[1];
			dataarrived=wait_for_data();
     bf2:	91 db       	rcall	.-2270   	; 0x316 <wait_for_data>
			if (dataarrived==0){
     bf4:	81 11       	cpse	r24, r1
     bf6:	07 c0       	rjmp	.+14     	; 0xc06 <get_sms+0x214>
     bf8:	ca 58       	subi	r28, 0x8A	; 138
     bfa:	de 4f       	sbci	r29, 0xFE	; 254
     bfc:	c8 80       	ld	r12, Y
     bfe:	c6 57       	subi	r28, 0x76	; 118
     c00:	d1 40       	sbci	r29, 0x01	; 1
     c02:	d8 2c       	mov	r13, r8
     c04:	08 c0       	rjmp	.+16     	; 0xc16 <get_sms+0x224>
				break;
			}
			initial[1]=UDR1;
     c06:	f8 01       	movw	r30, r16
     c08:	80 81       	ld	r24, Z
		
		//  For enabling reception
		sbi(UCSR1B,RXEN1);		
		
		//  For receiving sender number
		while(!(initial[0]==0x0D && initial[1]==0x0A)){
     c0a:	fd e0       	ldi	r31, 0x0D	; 13
     c0c:	df 12       	cpse	r13, r31
     c0e:	ee cf       	rjmp	.-36     	; 0xbec <get_sms+0x1fa>
     c10:	8a 30       	cpi	r24, 0x0A	; 10
     c12:	71 f7       	brne	.-36     	; 0xbf0 <get_sms+0x1fe>
     c14:	f1 cf       	rjmp	.-30     	; 0xbf8 <get_sms+0x206>
     c16:	9c 2c       	mov	r9, r12
     c18:	9e 18       	sub	r9, r14
		}

		i=0;
		
		while(1){
			dataarrived=wait_for_data();
     c1a:	7d db       	rcall	.-2310   	; 0x316 <wait_for_data>
			if (dataarrived==0){
     c1c:	88 23       	and	r24, r24
     c1e:	51 f0       	breq	.+20     	; 0xc34 <get_sms+0x242>
				break;
			}
			response_number[i]=UDR1;
     c20:	f8 01       	movw	r30, r16
     c22:	80 81       	ld	r24, Z
     c24:	f6 01       	movw	r30, r12
     c26:	81 93       	st	Z+, r24
     c28:	6f 01       	movw	r12, r30
			if(response_number[i]==0x0D || i>=150){
     c2a:	8d 30       	cpi	r24, 0x0D	; 13
     c2c:	19 f0       	breq	.+6      	; 0xc34 <get_sms+0x242>
     c2e:	ea 15       	cp	r30, r10
     c30:	fb 05       	cpc	r31, r11
     c32:	89 f7       	brne	.-30     	; 0xc16 <get_sms+0x224>
			}
			i++;
		}
		
		//  Terminating strings
		response_number[i]="\0";
     c34:	f7 01       	movw	r30, r14
     c36:	e9 0d       	add	r30, r9
     c38:	f1 1d       	adc	r31, r1
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	31 e0       	ldi	r19, 0x01	; 1
     c3e:	20 83       	st	Z, r18
		
		//  For those odd unexplainable cases where this response comes empty with OK
		if (strcmp(response_number,"OK\0")==0){
     c40:	60 e1       	ldi	r22, 0x10	; 16
     c42:	71 e0       	ldi	r23, 0x01	; 1
     c44:	ca 58       	subi	r28, 0x8A	; 138
     c46:	de 4f       	sbci	r29, 0xFE	; 254
     c48:	88 81       	ld	r24, Y
     c4a:	c6 57       	subi	r28, 0x76	; 118
     c4c:	d1 40       	sbci	r29, 0x01	; 1
     c4e:	98 2d       	mov	r25, r8
     c50:	97 d4       	rcall	.+2350   	; 0x1580 <strcmp>
     c52:	89 2b       	or	r24, r25
     c54:	11 f4       	brne	.+4      	; 0xc5a <get_sms+0x268>
			message_number++;
     c56:	c1 01       	movw	r24, r2
			continue;
     c58:	37 c1       	rjmp	.+622    	; 0xec8 <get_sms+0x4d6>
		}
		
		//  Receiving message
		p=0;
		
		dataarrived=wait_for_data();
     c5a:	5d db       	rcall	.-2374   	; 0x316 <wait_for_data>
		if (dataarrived==1){
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	11 f4       	brne	.+4      	; 0xc64 <get_sms+0x272>
			initial[1]=UDR1;  // To eliminate Lf that comes after Cr but before message starts;
     c60:	f8 01       	movw	r30, r16
     c62:	80 81       	ld	r24, Z
     c64:	63 01       	movw	r12, r6
     c66:	9c 2c       	mov	r9, r12
     c68:	96 18       	sub	r9, r6
		}
		
		while(1){
			dataarrived=wait_for_data();
     c6a:	55 db       	rcall	.-2390   	; 0x316 <wait_for_data>
			if (dataarrived==0){
     c6c:	88 23       	and	r24, r24
     c6e:	51 f0       	breq	.+20     	; 0xc84 <get_sms+0x292>
				break;
			}
			msg[p]=UDR1;
     c70:	f8 01       	movw	r30, r16
     c72:	80 81       	ld	r24, Z
     c74:	f6 01       	movw	r30, r12
     c76:	81 93       	st	Z+, r24
     c78:	6f 01       	movw	r12, r30
			if(msg[p]==0x0D || p>=160){
     c7a:	8d 30       	cpi	r24, 0x0D	; 13
     c7c:	19 f0       	breq	.+6      	; 0xc84 <get_sms+0x292>
     c7e:	e4 15       	cp	r30, r4
     c80:	f5 05       	cpc	r31, r5
     c82:	89 f7       	brne	.-30     	; 0xc66 <get_sms+0x274>
			}
			p++;
		}
		
		//  For receiving final OK
		sim900_response(dummy);
     c84:	ce 01       	movw	r24, r28
     c86:	81 59       	subi	r24, 0x91	; 145
     c88:	9e 4f       	sbci	r25, 0xFE	; 254
     c8a:	5d db       	rcall	.-2374   	; 0x346 <sim900_response>

		//  Terminating strings
		msg[p]="\0";	
     c8c:	f3 01       	movw	r30, r6
     c8e:	e9 0d       	add	r30, r9
     c90:	f1 1d       	adc	r31, r1
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	31 e0       	ldi	r19, 0x01	; 1
     c96:	20 83       	st	Z, r18
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
     c98:	8f 81       	ldd	r24, Y+7	; 0x07
     c9a:	82 32       	cpi	r24, 0x22	; 34
     c9c:	09 f4       	brne	.+2      	; 0xca0 <get_sms+0x2ae>
     c9e:	96 c1       	rjmp	.+812    	; 0xfcc <get_sms+0x5da>
     ca0:	fe 01       	movw	r30, r28
     ca2:	38 96       	adiw	r30, 0x08	; 8
     ca4:	20 e0       	ldi	r18, 0x00	; 0
			i++;
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
     ca8:	81 91       	ld	r24, Z+
     caa:	82 32       	cpi	r24, 0x22	; 34
     cac:	e1 f7       	brne	.-8      	; 0xca6 <get_sms+0x2b4>
			i++;
		}
		i++;
     cae:	2f 5f       	subi	r18, 0xFF	; 255
		while (response_number[i]!='\"' && i<150){
     cb0:	f7 01       	movw	r30, r14
     cb2:	e2 0f       	add	r30, r18
     cb4:	f1 1d       	adc	r31, r1
     cb6:	80 81       	ld	r24, Z
     cb8:	82 32       	cpi	r24, 0x22	; 34
     cba:	69 f0       	breq	.+26     	; 0xcd6 <get_sms+0x2e4>
     cbc:	26 39       	cpi	r18, 0x96	; 150
     cbe:	10 f0       	brcs	.+4      	; 0xcc4 <get_sms+0x2d2>
     cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <get_sms+0x2e4>
		// Figuring out Phone number of SMS sender
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     cc2:	21 e0       	ldi	r18, 0x01	; 1
		while (response_number[i]!='\"' && i<150){
			i++;
     cc4:	2f 5f       	subi	r18, 0xFF	; 255
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     cc6:	f7 01       	movw	r30, r14
     cc8:	e2 0f       	add	r30, r18
     cca:	f1 1d       	adc	r31, r1
     ccc:	80 81       	ld	r24, Z
     cce:	82 32       	cpi	r24, 0x22	; 34
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <get_sms+0x2e4>
     cd2:	26 39       	cpi	r18, 0x96	; 150
     cd4:	b8 f3       	brcs	.-18     	; 0xcc4 <get_sms+0x2d2>
			i++;
		}
		i++;
     cd6:	2f 5f       	subi	r18, 0xFF	; 255
		while (response_number[i]!='\"' && i<150){
     cd8:	f7 01       	movw	r30, r14
     cda:	e2 0f       	add	r30, r18
     cdc:	f1 1d       	adc	r31, r1
     cde:	80 81       	ld	r24, Z
     ce0:	82 32       	cpi	r24, 0x22	; 34
     ce2:	79 f0       	breq	.+30     	; 0xd02 <get_sms+0x310>
     ce4:	26 39       	cpi	r18, 0x96	; 150
     ce6:	10 f0       	brcs	.+4      	; 0xcec <get_sms+0x2fa>
     ce8:	0c c0       	rjmp	.+24     	; 0xd02 <get_sms+0x310>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     cea:	22 e0       	ldi	r18, 0x02	; 2
		while (response_number[i]!='\"' && i<150){
			i++;
     cec:	2f 5f       	subi	r18, 0xFF	; 255
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     cee:	f7 01       	movw	r30, r14
     cf0:	e2 0f       	add	r30, r18
     cf2:	f1 1d       	adc	r31, r1
     cf4:	80 81       	ld	r24, Z
     cf6:	82 32       	cpi	r24, 0x22	; 34
     cf8:	21 f0       	breq	.+8      	; 0xd02 <get_sms+0x310>
     cfa:	26 39       	cpi	r18, 0x96	; 150
     cfc:	b9 f7       	brne	.-18     	; 0xcec <get_sms+0x2fa>

		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	21 c0       	rjmp	.+66     	; 0xd44 <get_sms+0x352>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	82 0f       	add	r24, r18
		while (response_number[i]!='\"' && p<20 && i<150){
     d06:	f7 01       	movw	r30, r14
     d08:	e8 0f       	add	r30, r24
     d0a:	f1 1d       	adc	r31, r1
     d0c:	90 81       	ld	r25, Z
     d0e:	92 32       	cpi	r25, 0x22	; 34
     d10:	b1 f0       	breq	.+44     	; 0xd3e <get_sms+0x34c>
     d12:	86 39       	cpi	r24, 0x96	; 150
     d14:	b0 f4       	brcc	.+44     	; 0xd42 <get_sms+0x350>
     d16:	fe 01       	movw	r30, r28
     d18:	e3 56       	subi	r30, 0x63	; 99
     d1a:	ff 4f       	sbci	r31, 0xFF	; 255
     d1c:	45 e1       	ldi	r20, 0x15	; 21
     d1e:	42 0f       	add	r20, r18
			contact_no[p]=response_number[i];
     d20:	91 93       	st	Z+, r25
			p++;i++;
     d22:	38 2f       	mov	r19, r24
     d24:	32 1b       	sub	r19, r18
     d26:	8f 5f       	subi	r24, 0xFF	; 255
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && p<20 && i<150){
     d28:	d7 01       	movw	r26, r14
     d2a:	a8 0f       	add	r26, r24
     d2c:	b1 1d       	adc	r27, r1
     d2e:	9c 91       	ld	r25, X
     d30:	92 32       	cpi	r25, 0x22	; 34
     d32:	41 f0       	breq	.+16     	; 0xd44 <get_sms+0x352>
     d34:	84 17       	cp	r24, r20
     d36:	31 f0       	breq	.+12     	; 0xd44 <get_sms+0x352>
     d38:	86 39       	cpi	r24, 0x96	; 150
     d3a:	91 f7       	brne	.-28     	; 0xd20 <get_sms+0x32e>
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <get_sms+0x352>

		//  Terminating strings
		msg[p]="\0";	
		
		// Figuring out Phone number of SMS sender
		i=0;p=0;
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <get_sms+0x352>
     d42:	30 e0       	ldi	r19, 0x00	; 0
		i++;
		while (response_number[i]!='\"' && p<20 && i<150){
			contact_no[p]=response_number[i];
			p++;i++;
		}
		contact_no[p]='\0';
     d44:	ed e9       	ldi	r30, 0x9D	; 157
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	ec 0f       	add	r30, r28
     d4a:	fd 1f       	adc	r31, r29
     d4c:	e3 0f       	add	r30, r19
     d4e:	f1 1d       	adc	r31, r1
     d50:	10 82       	st	Z, r1
		
		// If message doesn't match authenticated source, move to next message
		if (!((strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,MASTER_NUMBER)==0))){
     d52:	c9 58       	subi	r28, 0x89	; 137
     d54:	de 4f       	sbci	r29, 0xFE	; 254
     d56:	68 81       	ld	r22, Y
     d58:	79 81       	ldd	r23, Y+1	; 0x01
     d5a:	c7 57       	subi	r28, 0x77	; 119
     d5c:	d1 40       	sbci	r29, 0x01	; 1
     d5e:	ce 01       	movw	r24, r28
     d60:	83 56       	subi	r24, 0x63	; 99
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	0d d4       	rcall	.+2074   	; 0x1580 <strcmp>
     d66:	6c 01       	movw	r12, r24
     d68:	89 2b       	or	r24, r25
     d6a:	59 f0       	breq	.+22     	; 0xd82 <get_sms+0x390>
     d6c:	6e e3       	ldi	r22, 0x3E	; 62
     d6e:	72 e0       	ldi	r23, 0x02	; 2
     d70:	ce 01       	movw	r24, r28
     d72:	83 56       	subi	r24, 0x63	; 99
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	04 d4       	rcall	.+2056   	; 0x1580 <strcmp>
     d78:	89 2b       	or	r24, r25
     d7a:	09 f4       	brne	.+2      	; 0xd7e <get_sms+0x38c>
     d7c:	2c c1       	rjmp	.+600    	; 0xfd6 <get_sms+0x5e4>
			message_number++;
     d7e:	c1 01       	movw	r24, r2
			continue;
     d80:	a3 c0       	rjmp	.+326    	; 0xec8 <get_sms+0x4d6>
		}
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
     d82:	f3 01       	movw	r30, r6
     d84:	80 81       	ld	r24, Z
     d86:	8b 32       	cpi	r24, 0x2B	; 43
     d88:	29 f5       	brne	.+74     	; 0xdd4 <get_sms+0x3e2>
     d8a:	6e e3       	ldi	r22, 0x3E	; 62
     d8c:	72 e0       	ldi	r23, 0x02	; 2
     d8e:	ce 01       	movw	r24, r28
     d90:	83 56       	subi	r24, 0x63	; 99
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	f5 d3       	rcall	.+2026   	; 0x1580 <strcmp>
     d96:	89 2b       	or	r24, r25
     d98:	09 f0       	breq	.+2      	; 0xd9c <get_sms+0x3aa>
     d9a:	22 c1       	rjmp	.+580    	; 0xfe0 <get_sms+0x5ee>
			strcpy(customer_no,msg);
     d9c:	b3 01       	movw	r22, r6
     d9e:	c9 58       	subi	r28, 0x89	; 137
     da0:	de 4f       	sbci	r29, 0xFE	; 254
     da2:	88 81       	ld	r24, Y
     da4:	99 81       	ldd	r25, Y+1	; 0x01
     da6:	c7 57       	subi	r28, 0x77	; 119
     da8:	d1 40       	sbci	r29, 0x01	; 1
     daa:	f3 d3       	rcall	.+2022   	; 0x1592 <strcpy>
			UART_0_puts("Customer No. changed to ");
     dac:	85 e6       	ldi	r24, 0x65	; 101
     dae:	96 e0       	ldi	r25, 0x06	; 6
     db0:	83 d3       	rcall	.+1798   	; 0x14b8 <UART_0_puts>
			UART_0_puts(customer_no);
     db2:	c9 58       	subi	r28, 0x89	; 137
     db4:	de 4f       	sbci	r29, 0xFE	; 254
     db6:	88 81       	ld	r24, Y
     db8:	99 81       	ldd	r25, Y+1	; 0x01
     dba:	c7 57       	subi	r28, 0x77	; 119
     dbc:	d1 40       	sbci	r29, 0x01	; 1
     dbe:	7c d3       	rcall	.+1784   	; 0x14b8 <UART_0_puts>
			UART_0_puts("\r\n");
     dc0:	8a e5       	ldi	r24, 0x5A	; 90
     dc2:	95 e0       	ldi	r25, 0x05	; 5
     dc4:	79 d3       	rcall	.+1778   	; 0x14b8 <UART_0_puts>
			update_customer_no=1;
     dc6:	f1 e0       	ldi	r31, 0x01	; 1
     dc8:	c1 58       	subi	r28, 0x81	; 129
     dca:	de 4f       	sbci	r29, 0xFE	; 254
     dcc:	f8 83       	st	Y, r31
     dce:	cf 57       	subi	r28, 0x7F	; 127
     dd0:	d1 40       	sbci	r29, 0x01	; 1
     dd2:	79 c0       	rjmp	.+242    	; 0xec6 <get_sms+0x4d4>
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch on by Customer/Master
     dd4:	6e e7       	ldi	r22, 0x7E	; 126
     dd6:	76 e0       	ldi	r23, 0x06	; 6
     dd8:	c3 01       	movw	r24, r6
     dda:	bf d3       	rcall	.+1918   	; 0x155a <strcasecmp>
     ddc:	89 2b       	or	r24, r25
     dde:	e9 f4       	brne	.+58     	; 0xe1a <get_sms+0x428>
     de0:	6e e3       	ldi	r22, 0x3E	; 62
     de2:	72 e0       	ldi	r23, 0x02	; 2
     de4:	ce 01       	movw	r24, r28
     de6:	83 56       	subi	r24, 0x63	; 99
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	ca d3       	rcall	.+1940   	; 0x1580 <strcmp>
     dec:	89 2b       	or	r24, r25
     dee:	11 f0       	breq	.+4      	; 0xdf4 <get_sms+0x402>
     df0:	cd 28       	or	r12, r13
     df2:	b9 f5       	brne	.+110    	; 0xe62 <get_sms+0x470>
			*system_on=0x31;
     df4:	81 e3       	ldi	r24, 0x31	; 49
     df6:	c5 58       	subi	r28, 0x85	; 133
     df8:	de 4f       	sbci	r29, 0xFE	; 254
     dfa:	e8 81       	ld	r30, Y
     dfc:	f9 81       	ldd	r31, Y+1	; 0x01
     dfe:	cb 57       	subi	r28, 0x7B	; 123
     e00:	d1 40       	sbci	r29, 0x01	; 1
     e02:	80 83       	st	Z, r24
			UART_0_puts("System Turned ON....\r\n");
     e04:	81 e8       	ldi	r24, 0x81	; 129
     e06:	96 e0       	ldi	r25, 0x06	; 6
     e08:	57 d3       	rcall	.+1710   	; 0x14b8 <UART_0_puts>
			sbi(PORTB,7);
     e0a:	2f 9a       	sbi	0x05, 7	; 5
			update_remote_control=1;
     e0c:	f1 e0       	ldi	r31, 0x01	; 1
     e0e:	c3 58       	subi	r28, 0x83	; 131
     e10:	de 4f       	sbci	r29, 0xFE	; 254
     e12:	f8 83       	st	Y, r31
     e14:	cd 57       	subi	r28, 0x7D	; 125
     e16:	d1 40       	sbci	r29, 0x01	; 1
     e18:	56 c0       	rjmp	.+172    	; 0xec6 <get_sms+0x4d4>
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch off by Customer/Master
     e1a:	68 e9       	ldi	r22, 0x98	; 152
     e1c:	76 e0       	ldi	r23, 0x06	; 6
     e1e:	c3 01       	movw	r24, r6
     e20:	9c d3       	rcall	.+1848   	; 0x155a <strcasecmp>
     e22:	89 2b       	or	r24, r25
     e24:	f1 f4       	brne	.+60     	; 0xe62 <get_sms+0x470>
     e26:	6e e3       	ldi	r22, 0x3E	; 62
     e28:	72 e0       	ldi	r23, 0x02	; 2
     e2a:	ce 01       	movw	r24, r28
     e2c:	83 56       	subi	r24, 0x63	; 99
     e2e:	9f 4f       	sbci	r25, 0xFF	; 255
     e30:	a7 d3       	rcall	.+1870   	; 0x1580 <strcmp>
     e32:	89 2b       	or	r24, r25
     e34:	19 f0       	breq	.+6      	; 0xe3c <get_sms+0x44a>
     e36:	cd 28       	or	r12, r13
     e38:	09 f0       	breq	.+2      	; 0xe3c <get_sms+0x44a>
     e3a:	45 c0       	rjmp	.+138    	; 0xec6 <get_sms+0x4d4>
			*system_on=0x30;
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	c5 58       	subi	r28, 0x85	; 133
     e40:	de 4f       	sbci	r29, 0xFE	; 254
     e42:	e8 81       	ld	r30, Y
     e44:	f9 81       	ldd	r31, Y+1	; 0x01
     e46:	cb 57       	subi	r28, 0x7B	; 123
     e48:	d1 40       	sbci	r29, 0x01	; 1
     e4a:	80 83       	st	Z, r24
			UART_0_puts("System Turned OFF....\r\n");
     e4c:	8c e9       	ldi	r24, 0x9C	; 156
     e4e:	96 e0       	ldi	r25, 0x06	; 6
     e50:	33 d3       	rcall	.+1638   	; 0x14b8 <UART_0_puts>
			cbi(PORTB,7);
     e52:	2f 98       	cbi	0x05, 7	; 5
			update_remote_control=1;
     e54:	f1 e0       	ldi	r31, 0x01	; 1
     e56:	c3 58       	subi	r28, 0x83	; 131
     e58:	de 4f       	sbci	r29, 0xFE	; 254
     e5a:	f8 83       	st	Y, r31
     e5c:	cd 57       	subi	r28, 0x7D	; 125
     e5e:	d1 40       	sbci	r29, 0x01	; 1
     e60:	32 c0       	rjmp	.+100    	; 0xec6 <get_sms+0x4d4>
		}
		else if ((strncmp(msg,"SNO+E",5)==0) && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  To change serial number by Master
     e62:	45 e0       	ldi	r20, 0x05	; 5
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	64 eb       	ldi	r22, 0xB4	; 180
     e68:	76 e0       	ldi	r23, 0x06	; 6
     e6a:	c3 01       	movw	r24, r6
     e6c:	99 d3       	rcall	.+1842   	; 0x15a0 <strncmp>
     e6e:	89 2b       	or	r24, r25
     e70:	51 f5       	brne	.+84     	; 0xec6 <get_sms+0x4d4>
     e72:	6e e3       	ldi	r22, 0x3E	; 62
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	ce 01       	movw	r24, r28
     e78:	83 56       	subi	r24, 0x63	; 99
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	81 d3       	rcall	.+1794   	; 0x1580 <strcmp>
     e7e:	89 2b       	or	r24, r25
     e80:	11 f5       	brne	.+68     	; 0xec6 <get_sms+0x4d4>
			strncpy(Serial_num,msg+4,11);
     e82:	4b e0       	ldi	r20, 0x0B	; 11
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	c0 58       	subi	r28, 0x80	; 128
     e88:	de 4f       	sbci	r29, 0xFE	; 254
     e8a:	68 81       	ld	r22, Y
     e8c:	79 81       	ldd	r23, Y+1	; 0x01
     e8e:	c0 58       	subi	r28, 0x80	; 128
     e90:	d1 40       	sbci	r29, 0x01	; 1
     e92:	c7 58       	subi	r28, 0x87	; 135
     e94:	de 4f       	sbci	r29, 0xFE	; 254
     e96:	88 81       	ld	r24, Y
     e98:	99 81       	ldd	r25, Y+1	; 0x01
     e9a:	c9 57       	subi	r28, 0x79	; 121
     e9c:	d1 40       	sbci	r29, 0x01	; 1
     e9e:	8e d3       	rcall	.+1820   	; 0x15bc <strncpy>
			
			UART_0_puts("Serial No. changed to ");
     ea0:	8a eb       	ldi	r24, 0xBA	; 186
     ea2:	96 e0       	ldi	r25, 0x06	; 6
     ea4:	09 d3       	rcall	.+1554   	; 0x14b8 <UART_0_puts>
			UART_0_puts(Serial_num);
     ea6:	c7 58       	subi	r28, 0x87	; 135
     ea8:	de 4f       	sbci	r29, 0xFE	; 254
     eaa:	88 81       	ld	r24, Y
     eac:	99 81       	ldd	r25, Y+1	; 0x01
     eae:	c9 57       	subi	r28, 0x79	; 121
     eb0:	d1 40       	sbci	r29, 0x01	; 1
     eb2:	02 d3       	rcall	.+1540   	; 0x14b8 <UART_0_puts>
			UART_0_puts("\r\n");
     eb4:	8a e5       	ldi	r24, 0x5A	; 90
     eb6:	95 e0       	ldi	r25, 0x05	; 5
     eb8:	ff d2       	rcall	.+1534   	; 0x14b8 <UART_0_puts>
			update_serial_no=1;
     eba:	21 e0       	ldi	r18, 0x01	; 1
     ebc:	c2 58       	subi	r28, 0x82	; 130
     ebe:	de 4f       	sbci	r29, 0xFE	; 254
     ec0:	28 83       	st	Y, r18
     ec2:	ce 57       	subi	r28, 0x7E	; 126
     ec4:	d1 40       	sbci	r29, 0x01	; 1
		}
	
		message_number++;
     ec6:	c1 01       	movw	r24, r2
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	23 1a       	sub	r2, r19
     ecc:	33 0a       	sbc	r3, r19
	}
	UART_0_puts("Messages converted to Readable Format...\r\n");
	
	// To fetch SMS messages
	message_number=1;
	while (message_number<=no_of_msg){
     ece:	cc 58       	subi	r28, 0x8C	; 140
     ed0:	de 4f       	sbci	r29, 0xFE	; 254
     ed2:	e8 81       	ld	r30, Y
     ed4:	f9 81       	ldd	r31, Y+1	; 0x01
     ed6:	c4 57       	subi	r28, 0x74	; 116
     ed8:	d1 40       	sbci	r29, 0x01	; 1
     eda:	e8 17       	cp	r30, r24
     edc:	f9 07       	cpc	r31, r25
     ede:	0c f0       	brlt	.+2      	; 0xee2 <get_sms+0x4f0>
     ee0:	6b ce       	rjmp	.-810    	; 0xbb8 <get_sms+0x1c6>
     ee2:	c2 58       	subi	r28, 0x82	; 130
     ee4:	de 4f       	sbci	r29, 0xFE	; 254
     ee6:	b8 80       	ld	r11, Y
     ee8:	ce 57       	subi	r28, 0x7E	; 126
     eea:	d1 40       	sbci	r29, 0x01	; 1
	
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     eec:	c1 58       	subi	r28, 0x81	; 129
     eee:	de 4f       	sbci	r29, 0xFE	; 254
     ef0:	f8 81       	ld	r31, Y
     ef2:	cf 57       	subi	r28, 0x7F	; 127
     ef4:	d1 40       	sbci	r29, 0x01	; 1
     ef6:	f1 11       	cpse	r31, r1
     ef8:	7b c0       	rjmp	.+246    	; 0xff0 <get_sms+0x5fe>
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <get_sms+0x52c>
		i=0;
		while (i<=12){
			eeprom_update_byte((uint8_t*)(i+16),customer_no[i]);
     efc:	f8 01       	movw	r30, r16
     efe:	61 91       	ld	r22, Z+
     f00:	8f 01       	movw	r16, r30
     f02:	c6 01       	movw	r24, r12
     f04:	8e 0f       	add	r24, r30
     f06:	9f 1f       	adc	r25, r31
     f08:	ab d3       	rcall	.+1878   	; 0x1660 <eeprom_update_byte>
     f0a:	8f e0       	ldi	r24, 0x0F	; 15
     f0c:	97 e2       	ldi	r25, 0x27	; 39
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <get_sms+0x51c>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <get_sms+0x522>
     f14:	00 00       	nop
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
		i=0;
		while (i<=12){
     f16:	0e 15       	cp	r16, r14
     f18:	1f 05       	cpc	r17, r15
     f1a:	81 f7       	brne	.-32     	; 0xefc <get_sms+0x50a>
     f1c:	7e c0       	rjmp	.+252    	; 0x101a <get_sms+0x628>
			i++;
		}
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
     f1e:	c2 58       	subi	r28, 0x82	; 130
     f20:	de 4f       	sbci	r29, 0xFE	; 254
     f22:	98 81       	ld	r25, Y
     f24:	ce 57       	subi	r28, 0x7E	; 126
     f26:	d1 40       	sbci	r29, 0x01	; 1
     f28:	99 23       	and	r25, r25
     f2a:	51 f1       	breq	.+84     	; 0xf80 <get_sms+0x58e>
     f2c:	c7 58       	subi	r28, 0x87	; 135
     f2e:	de 4f       	sbci	r29, 0xFE	; 254
     f30:	e8 80       	ld	r14, Y
     f32:	f9 80       	ldd	r15, Y+1	; 0x01
     f34:	c9 57       	subi	r28, 0x79	; 121
     f36:	d1 40       	sbci	r29, 0x01	; 1
     f38:	eb e0       	ldi	r30, 0x0B	; 11
     f3a:	ee 0e       	add	r14, r30
     f3c:	f1 1c       	adc	r15, r1
	
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
     f3e:	c7 58       	subi	r28, 0x87	; 135
     f40:	de 4f       	sbci	r29, 0xFE	; 254
     f42:	08 81       	ld	r16, Y
     f44:	19 81       	ldd	r17, Y+1	; 0x01
     f46:	c9 57       	subi	r28, 0x79	; 121
     f48:	d1 40       	sbci	r29, 0x01	; 1
     f4a:	8f e1       	ldi	r24, 0x1F	; 31
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	6c 01       	movw	r12, r24
     f50:	c0 1a       	sub	r12, r16
     f52:	d1 0a       	sbc	r13, r17
	
	// To update serial number in EEPROM
	if (update_serial_no){
		i=0;
		while (i<=10){
			eeprom_update_byte((uint8_t*)(i+32),Serial_num[i]);
     f54:	f8 01       	movw	r30, r16
     f56:	61 91       	ld	r22, Z+
     f58:	8f 01       	movw	r16, r30
     f5a:	c6 01       	movw	r24, r12
     f5c:	8e 0f       	add	r24, r30
     f5e:	9f 1f       	adc	r25, r31
     f60:	7f d3       	rcall	.+1790   	; 0x1660 <eeprom_update_byte>
     f62:	8f e0       	ldi	r24, 0x0F	; 15
     f64:	97 e2       	ldi	r25, 0x27	; 39
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <get_sms+0x574>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <get_sms+0x57a>
     f6c:	00 00       	nop
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
		i=0;
		while (i<=10){
     f6e:	0e 15       	cp	r16, r14
     f70:	1f 05       	cpc	r17, r15
     f72:	81 f7       	brne	.-32     	; 0xf54 <get_sms+0x562>
     f74:	05 c0       	rjmp	.+10     	; 0xf80 <get_sms+0x58e>
}

uint8_t get_sms(uint8_t* system_on,char* customer_no,char* Serial_num){
	
	uint8_t i=0,p=0,dataarrived=0;
	uint8_t update_customer_no=0,update_serial_no=0,update_remote_control=0;
     f76:	c3 58       	subi	r28, 0x83	; 131
     f78:	de 4f       	sbci	r29, 0xFE	; 254
     f7a:	18 82       	st	Y, r1
     f7c:	cd 57       	subi	r28, 0x7D	; 125
     f7e:	d1 40       	sbci	r29, 0x01	; 1
			i++;
		}
	}
	
	// To update system on/off status in EEPROM
	if (update_remote_control){
     f80:	c3 58       	subi	r28, 0x83	; 131
     f82:	de 4f       	sbci	r29, 0xFE	; 254
     f84:	98 81       	ld	r25, Y
     f86:	cd 57       	subi	r28, 0x7D	; 125
     f88:	d1 40       	sbci	r29, 0x01	; 1
     f8a:	99 23       	and	r25, r25
     f8c:	81 f0       	breq	.+32     	; 0xfae <get_sms+0x5bc>
		eeprom_update_byte((uint8_t*)30,*system_on);
     f8e:	c5 58       	subi	r28, 0x85	; 133
     f90:	de 4f       	sbci	r29, 0xFE	; 254
     f92:	e8 81       	ld	r30, Y
     f94:	f9 81       	ldd	r31, Y+1	; 0x01
     f96:	cb 57       	subi	r28, 0x7B	; 123
     f98:	d1 40       	sbci	r29, 0x01	; 1
     f9a:	60 81       	ld	r22, Z
     f9c:	8e e1       	ldi	r24, 0x1E	; 30
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	5f d3       	rcall	.+1726   	; 0x1660 <eeprom_update_byte>
     fa2:	8f e0       	ldi	r24, 0x0F	; 15
     fa4:	97 e2       	ldi	r25, 0x27	; 39
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <get_sms+0x5b4>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <get_sms+0x5ba>
     fac:	00 00       	nop
		_delay_ms(5);  //  EEPROM write time is 3.3ms in data sheet
	}
		
	// To delete all messages
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
     fae:	be 01       	movw	r22, r28
     fb0:	6f 54       	subi	r22, 0x4F	; 79
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	81 ed       	ldi	r24, 0xD1	; 209
     fb6:	96 e0       	ldi	r25, 0x06	; 6
     fb8:	07 da       	rcall	.-3058   	; 0x3c8 <sim900_cmd>
	UART_0_puts("Deleting Read messages...\r\n");
     fba:	87 ee       	ldi	r24, 0xE7	; 231
     fbc:	96 e0       	ldi	r25, 0x06	; 6
     fbe:	7c d2       	rcall	.+1272   	; 0x14b8 <UART_0_puts>
	
	return 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	44 c0       	rjmp	.+136    	; 0x104c <get_sms+0x65a>
	UART_0_puts(no_msg);
	UART_0_puts("\r\n");
	
	// Exiting the function if no new messages have arrived
	if (no_of_msg==0){
		return 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	42 c0       	rjmp	.+132    	; 0x104c <get_sms+0x65a>
	}
	
	// Changing the message to readable format
	sim900_cmd("AT+CMGF=1\r\n",simresponse);
	if (strcmp(simresponse,"OK\0")!=0){
		return 0;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	40 c0       	rjmp	.+128    	; 0x104c <get_sms+0x65a>
		i=0;p=0;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	82 32       	cpi	r24, 0x22	; 34
     fd0:	09 f0       	breq	.+2      	; 0xfd4 <get_sms+0x5e2>
     fd2:	77 ce       	rjmp	.-786    	; 0xcc2 <get_sms+0x2d0>
     fd4:	25 c0       	rjmp	.+74     	; 0x1020 <get_sms+0x62e>
		if (!((strcmp(contact_no,customer_no)==0) || (strcmp(contact_no,MASTER_NUMBER)==0))){
			message_number++;
			continue;
		}
		
		if ((msg[0]=='+') && (strcmp(contact_no,MASTER_NUMBER)==0)){  //  Changing customer number by Master
     fd6:	f3 01       	movw	r30, r6
     fd8:	80 81       	ld	r24, Z
     fda:	8b 32       	cpi	r24, 0x2B	; 43
     fdc:	39 f5       	brne	.+78     	; 0x102c <get_sms+0x63a>
     fde:	de ce       	rjmp	.-580    	; 0xd9c <get_sms+0x3aa>
			UART_0_puts("Customer No. changed to ");
			UART_0_puts(customer_no);
			UART_0_puts("\r\n");
			update_customer_no=1;
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch on by Customer/Master
     fe0:	6e e7       	ldi	r22, 0x7E	; 126
     fe2:	76 e0       	ldi	r23, 0x06	; 6
     fe4:	c3 01       	movw	r24, r6
     fe6:	b9 d2       	rcall	.+1394   	; 0x155a <strcasecmp>
     fe8:	89 2b       	or	r24, r25
     fea:	09 f4       	brne	.+2      	; 0xfee <get_sms+0x5fc>
     fec:	03 cf       	rjmp	.-506    	; 0xdf4 <get_sms+0x402>
     fee:	26 c0       	rjmp	.+76     	; 0x103c <get_sms+0x64a>
     ff0:	c9 58       	subi	r28, 0x89	; 137
     ff2:	de 4f       	sbci	r29, 0xFE	; 254
     ff4:	e8 80       	ld	r14, Y
     ff6:	f9 80       	ldd	r15, Y+1	; 0x01
     ff8:	c7 57       	subi	r28, 0x77	; 119
     ffa:	d1 40       	sbci	r29, 0x01	; 1
     ffc:	fd e0       	ldi	r31, 0x0D	; 13
     ffe:	ef 0e       	add	r14, r31
    1000:	f1 1c       	adc	r15, r1
	
		message_number++;
	}
	
	// To update customer number in EEPROM
	if (update_customer_no){
    1002:	c9 58       	subi	r28, 0x89	; 137
    1004:	de 4f       	sbci	r29, 0xFE	; 254
    1006:	08 81       	ld	r16, Y
    1008:	19 81       	ldd	r17, Y+1	; 0x01
    100a:	c7 57       	subi	r28, 0x77	; 119
    100c:	d1 40       	sbci	r29, 0x01	; 1
    100e:	8f e0       	ldi	r24, 0x0F	; 15
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	6c 01       	movw	r12, r24
    1014:	c0 1a       	sub	r12, r16
    1016:	d1 0a       	sbc	r13, r17
    1018:	71 cf       	rjmp	.-286    	; 0xefc <get_sms+0x50a>
			i++;
		}
	}
	
	// To update serial number in EEPROM
	if (update_serial_no){
    101a:	b1 10       	cpse	r11, r1
    101c:	87 cf       	rjmp	.-242    	; 0xf2c <get_sms+0x53a>
    101e:	b0 cf       	rjmp	.-160    	; 0xf80 <get_sms+0x58e>
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
		while (response_number[i]!='\"' && i<150){
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	82 32       	cpi	r24, 0x22	; 34
    1024:	09 f0       	breq	.+2      	; 0x1028 <get_sms+0x636>
    1026:	61 ce       	rjmp	.-830    	; 0xcea <get_sms+0x2f8>
		}
		i++;
		while (response_number[i]!='\"' && i<150){
			i++;
		}
		i++;
    1028:	22 e0       	ldi	r18, 0x02	; 2
    102a:	6b ce       	rjmp	.-810    	; 0xd02 <get_sms+0x310>
			UART_0_puts("Customer No. changed to ");
			UART_0_puts(customer_no);
			UART_0_puts("\r\n");
			update_customer_no=1;
		}
		else if ((strcasecmp(msg,"on")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch on by Customer/Master
    102c:	6e e7       	ldi	r22, 0x7E	; 126
    102e:	76 e0       	ldi	r23, 0x06	; 6
    1030:	c3 01       	movw	r24, r6
    1032:	93 d2       	rcall	.+1318   	; 0x155a <strcasecmp>
    1034:	89 2b       	or	r24, r25
    1036:	09 f4       	brne	.+2      	; 0x103a <get_sms+0x648>
    1038:	dd ce       	rjmp	.-582    	; 0xdf4 <get_sms+0x402>
    103a:	ef ce       	rjmp	.-546    	; 0xe1a <get_sms+0x428>
			*system_on=0x31;
			UART_0_puts("System Turned ON....\r\n");
			sbi(PORTB,7);
			update_remote_control=1;
		}
		else if((strcasecmp(msg,"off")==0) && ((strcmp(contact_no,MASTER_NUMBER)==0) || (strcmp(contact_no,customer_no)==0))){  //  Commanding system to Switch off by Customer/Master
    103c:	68 e9       	ldi	r22, 0x98	; 152
    103e:	76 e0       	ldi	r23, 0x06	; 6
    1040:	c3 01       	movw	r24, r6
    1042:	8b d2       	rcall	.+1302   	; 0x155a <strcasecmp>
    1044:	89 2b       	or	r24, r25
    1046:	09 f4       	brne	.+2      	; 0x104a <get_sms+0x658>
    1048:	f9 ce       	rjmp	.-526    	; 0xe3c <get_sms+0x44a>
    104a:	0b cf       	rjmp	.-490    	; 0xe62 <get_sms+0x470>
	// To delete all messages
	sim900_cmd("AT+CMGDA=\"DEL READ\"\r\n",simresponse);
	UART_0_puts("Deleting Read messages...\r\n");
	
	return 1;
}
    104c:	cf 57       	subi	r28, 0x7F	; 127
    104e:	de 4f       	sbci	r29, 0xFE	; 254
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	bf 90       	pop	r11
    106c:	af 90       	pop	r10
    106e:	9f 90       	pop	r9
    1070:	8f 90       	pop	r8
    1072:	7f 90       	pop	r7
    1074:	6f 90       	pop	r6
    1076:	5f 90       	pop	r5
    1078:	4f 90       	pop	r4
    107a:	3f 90       	pop	r3
    107c:	2f 90       	pop	r2
    107e:	08 95       	ret

00001080 <Log_data>:
		}
	}
	return 0;
} 

uint8_t Log_data(char* responseimp,char* Serial_num,char* loc_lat,char* loc_long){
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	d2 50       	subi	r29, 0x02	; 2
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	4c 01       	movw	r8, r24
    10aa:	5b 01       	movw	r10, r22
	char simresponse[512],var_remote,dummy;
	uint8_t tabname_length=0,dataarrived=0,e=32,l=0,i=0;
	
	//  If Serial_num gets erased mysteriously
	tabname_length=strlen(Serial_num);
    10ac:	fb 01       	movw	r30, r22
    10ae:	01 90       	ld	r0, Z+
    10b0:	00 20       	and	r0, r0
    10b2:	e9 f7       	brne	.-6      	; 0x10ae <Log_data+0x2e>
    10b4:	ec 50       	subi	r30, 0x0C	; 12
	if (tabname_length!=11){
    10b6:	e6 17       	cp	r30, r22
    10b8:	b1 f0       	breq	.+44     	; 0x10e6 <Log_data+0x66>
    10ba:	6b 01       	movw	r12, r22
    10bc:	2b e0       	ldi	r18, 0x0B	; 11
    10be:	c2 0e       	add	r12, r18
    10c0:	d1 1c       	adc	r13, r1
    10c2:	8b 01       	movw	r16, r22
    10c4:	80 e2       	ldi	r24, 0x20	; 32
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	7c 01       	movw	r14, r24
    10ca:	e6 1a       	sub	r14, r22
    10cc:	f7 0a       	sbc	r15, r23
		while (l<11){
			Serial_num[i]=eeprom_read_byte((uint8_t*)e);
    10ce:	c7 01       	movw	r24, r14
    10d0:	80 0f       	add	r24, r16
    10d2:	91 1f       	adc	r25, r17
    10d4:	bd d2       	rcall	.+1402   	; 0x1650 <eeprom_read_byte>
    10d6:	f8 01       	movw	r30, r16
    10d8:	81 93       	st	Z+, r24
    10da:	8f 01       	movw	r16, r30
	uint8_t tabname_length=0,dataarrived=0,e=32,l=0,i=0;
	
	//  If Serial_num gets erased mysteriously
	tabname_length=strlen(Serial_num);
	if (tabname_length!=11){
		while (l<11){
    10dc:	ec 15       	cp	r30, r12
    10de:	fd 05       	cpc	r31, r13
    10e0:	b1 f7       	brne	.-20     	; 0x10ce <Log_data+0x4e>
			Serial_num[i]=eeprom_read_byte((uint8_t*)e);
			i++;e++;l++;
		}
		Serial_num[i]='\0';
    10e2:	f5 01       	movw	r30, r10
    10e4:	13 86       	std	Z+11, r1	; 0x0b
	}
	UART_0_puts("Starting CHIP...\r\n");
    10e6:	83 e0       	ldi	r24, 0x03	; 3
    10e8:	97 e0       	ldi	r25, 0x07	; 7
    10ea:	e6 d1       	rcall	.+972    	; 0x14b8 <UART_0_puts>
	UART_0_puts(Serial_num);
    10ec:	c5 01       	movw	r24, r10
    10ee:	e4 d1       	rcall	.+968    	; 0x14b8 <UART_0_puts>
	UART_0_puts("\r\n");
    10f0:	8a e5       	ldi	r24, 0x5A	; 90
    10f2:	95 e0       	ldi	r25, 0x05	; 5
    10f4:	e1 d1       	rcall	.+962    	; 0x14b8 <UART_0_puts>
	
	//  GPRS services connected and getting ready to Log
	sim900_cmd("AT+CIPSTART=\"TCP\"\,\"52.74.151.81\"\,\"80\"\r\n\0",simresponse);
    10f6:	be 01       	movw	r22, r28
    10f8:	6f 5f       	subi	r22, 0xFF	; 255
    10fa:	7f 4f       	sbci	r23, 0xFF	; 255
    10fc:	8d e4       	ldi	r24, 0x4D	; 77
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	63 d9       	rcall	.-3386   	; 0x3c8 <sim900_cmd>
	if (strcmp(simresponse,"OK\0")==0){
    1102:	60 e1       	ldi	r22, 0x10	; 16
    1104:	71 e0       	ldi	r23, 0x01	; 1
    1106:	ce 01       	movw	r24, r28
    1108:	01 96       	adiw	r24, 0x01	; 1
    110a:	3a d2       	rcall	.+1140   	; 0x1580 <strcmp>
    110c:	89 2b       	or	r24, r25
    110e:	09 f0       	breq	.+2      	; 0x1112 <Log_data+0x92>
    1110:	67 c0       	rjmp	.+206    	; 0x11e0 <Log_data+0x160>
		
		//  Enabling data reception again to verify connection
		sbi(UCSR1B,RXEN1);
    1112:	09 ec       	ldi	r16, 0xC9	; 201
    1114:	10 e0       	ldi	r17, 0x00	; 0
    1116:	f8 01       	movw	r30, r16
    1118:	80 81       	ld	r24, Z
    111a:	80 61       	ori	r24, 0x10	; 16
    111c:	80 83       	st	Z, r24
		
		//  Verifying connection
		sim900_response(simresponse);
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	11 d9       	rcall	.-3550   	; 0x346 <sim900_response>
		UART_0_puts("Sending Data...\r\n");
    1124:	86 e1       	ldi	r24, 0x16	; 22
    1126:	97 e0       	ldi	r25, 0x07	; 7
    1128:	c7 d1       	rcall	.+910    	; 0x14b8 <UART_0_puts>
		
		//  Start sending the data							
		UART_1_puts("AT+CIPSEND\r\n\0");
    112a:	86 e7       	ldi	r24, 0x76	; 118
    112c:	92 e0       	ldi	r25, 0x02	; 2
    112e:	ea d1       	rcall	.+980    	; 0x1504 <UART_1_puts>
    1130:	ff ef       	ldi	r31, 0xFF	; 255
    1132:	24 e3       	ldi	r18, 0x34	; 52
    1134:	8c e0       	ldi	r24, 0x0C	; 12
    1136:	f1 50       	subi	r31, 0x01	; 1
    1138:	20 40       	sbci	r18, 0x00	; 0
    113a:	80 40       	sbci	r24, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <Log_data+0xb6>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <Log_data+0xc0>
    1140:	00 00       	nop
		_delay_ms(500);

		// Sending data
		UART_1_puts("PUT /datalogging/write.php?tabname=\0");
    1142:	84 e8       	ldi	r24, 0x84	; 132
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	de d1       	rcall	.+956    	; 0x1504 <UART_1_puts>
 		UART_1_puts(Serial_num);
    1148:	c5 01       	movw	r24, r10
    114a:	dc d1       	rcall	.+952    	; 0x1504 <UART_1_puts>
 		UART_1_putc('&');
    114c:	86 e2       	ldi	r24, 0x26	; 38
    114e:	d2 d1       	rcall	.+932    	; 0x14f4 <UART_1_putc>
		UART_1_puts(responseimp);
    1150:	c4 01       	movw	r24, r8
    1152:	d8 d1       	rcall	.+944    	; 0x1504 <UART_1_puts>
		
// 		UART_1_puts("&A46=");
//  		UART_1_puts(loc_lat);
//  		UART_1_puts("&A47=");
//  		UART_1_puts(loc_long);
		UART_1_puts(" HTTP/1.1\r\n\0");
    1154:	89 ea       	ldi	r24, 0xA9	; 169
    1156:	92 e0       	ldi	r25, 0x02	; 2
    1158:	d5 d1       	rcall	.+938    	; 0x1504 <UART_1_puts>
		UART_1_puts("Host:52.74.151.81\r\nAccept: */*\r\nAccept-Language: en-us\r\nConnection: Keep-Alive\r\n\r\n\x1A\0");
    115a:	86 eb       	ldi	r24, 0xB6	; 182
    115c:	92 e0       	ldi	r25, 0x02	; 2
    115e:	d2 d1       	rcall	.+932    	; 0x1504 <UART_1_puts>
		
		//  Enabling data reception
		sbi(UCSR1B,RXEN1);
    1160:	f8 01       	movw	r30, r16
    1162:	80 81       	ld	r24, Z
    1164:	80 61       	ori	r24, 0x10	; 16
    1166:	80 83       	st	Z, r24
		
		//  Disabling data reception UART0
		cbi(UCSR0B,RXEN0);
    1168:	e1 ec       	ldi	r30, 0xC1	; 193
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	8f 7e       	andi	r24, 0xEF	; 239
    1170:	80 83       	st	Z, r24
		
		while (dummy!='$'){
    1172:	10 e0       	ldi	r17, 0x00	; 0
			dataarrived=wait_for_data();
			if (dataarrived==0){
				break;
			}
			dummy=UDR1;
    1174:	0f 2e       	mov	r0, r31
    1176:	fe ec       	ldi	r31, 0xCE	; 206
    1178:	ef 2e       	mov	r14, r31
    117a:	f1 2c       	mov	r15, r1
    117c:	f0 2d       	mov	r31, r0
		
		//  Disabling data reception UART0
		cbi(UCSR0B,RXEN0);
		
		while (dummy!='$'){
			dataarrived=wait_for_data();
    117e:	cb d8       	rcall	.-3690   	; 0x316 <wait_for_data>
			if (dataarrived==0){
    1180:	88 23       	and	r24, r24
    1182:	29 f0       	breq	.+10     	; 0x118e <Log_data+0x10e>
				break;
			}
			dummy=UDR1;
    1184:	f7 01       	movw	r30, r14
    1186:	10 81       	ld	r17, Z
		sbi(UCSR1B,RXEN1);
		
		//  Disabling data reception UART0
		cbi(UCSR0B,RXEN0);
		
		while (dummy!='$'){
    1188:	14 32       	cpi	r17, 0x24	; 36
    118a:	c9 f7       	brne	.-14     	; 0x117e <Log_data+0xfe>
    118c:	2d c0       	rjmp	.+90     	; 0x11e8 <Log_data+0x168>
			if (dataarrived==0){
				break;
			}
			dummy=UDR1;
		}
		dataarrived=wait_for_data();
    118e:	c3 d8       	rcall	.-3706   	; 0x316 <wait_for_data>
		var_remote=UDR1;
    1190:	00 91 ce 00 	lds	r16, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		
		//  Enabling data reception UART0
		sbi(UCSR0B,RXEN0);
    1194:	e1 ec       	ldi	r30, 0xC1	; 193
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 61       	ori	r24, 0x10	; 16
    119c:	80 83       	st	Z, r24
		if (dummy=='$'){
    119e:	14 32       	cpi	r17, 0x24	; 36
    11a0:	49 f4       	brne	.+18     	; 0x11b4 <Log_data+0x134>
			UART_0_puts("Data Sent Successfully to ");
    11a2:	88 e2       	ldi	r24, 0x28	; 40
    11a4:	97 e0       	ldi	r25, 0x07	; 7
    11a6:	88 d1       	rcall	.+784    	; 0x14b8 <UART_0_puts>
			UART_0_puts(Serial_num);
    11a8:	c5 01       	movw	r24, r10
    11aa:	86 d1       	rcall	.+780    	; 0x14b8 <UART_0_puts>
			UART_0_puts("\r\n");
    11ac:	8a e5       	ldi	r24, 0x5A	; 90
    11ae:	95 e0       	ldi	r25, 0x05	; 5
    11b0:	83 d1       	rcall	.+774    	; 0x14b8 <UART_0_puts>
    11b2:	06 c0       	rjmp	.+12     	; 0x11c0 <Log_data+0x140>
		}
		else{
			UART_0_puts("Data Sent returns ERROR...\r\n");
    11b4:	83 e4       	ldi	r24, 0x43	; 67
    11b6:	97 e0       	ldi	r25, 0x07	; 7
    11b8:	7f d1       	rcall	.+766    	; 0x14b8 <UART_0_puts>
			UART_0_puts("Check String or SIMCARD balance...\r\n");
    11ba:	80 e6       	ldi	r24, 0x60	; 96
    11bc:	97 e0       	ldi	r25, 0x07	; 7
    11be:	7c d1       	rcall	.+760    	; 0x14b8 <UART_0_puts>
		}
		if (var_remote=='1'){
    11c0:	01 33       	cpi	r16, 0x31	; 49
    11c2:	31 f4       	brne	.+12     	; 0x11d0 <Log_data+0x150>
			cli();
    11c4:	f8 94       	cli
			flag_datafreeze=1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 1f 08 	sts	0x081F, r24	; 0x80081f <flag_datafreeze>
			sei();
    11cc:	78 94       	sei
    11ce:	15 c0       	rjmp	.+42     	; 0x11fa <Log_data+0x17a>
		}
		else if(var_remote=='2'){
    11d0:	02 33       	cpi	r16, 0x32	; 50
    11d2:	41 f4       	brne	.+16     	; 0x11e4 <Log_data+0x164>
			cli();
    11d4:	f8 94       	cli
			flag_datafreeze=0;
    11d6:	10 92 1f 08 	sts	0x081F, r1	; 0x80081f <flag_datafreeze>
			sei();
    11da:	78 94       	sei
		}
				
		return 1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <Log_data+0x17a>
	}
	
	return 0;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	0b c0       	rjmp	.+22     	; 0x11fa <Log_data+0x17a>
			cli();
			flag_datafreeze=0;
			sei();
		}
				
		return 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <Log_data+0x17a>
			if (dataarrived==0){
				break;
			}
			dummy=UDR1;
		}
		dataarrived=wait_for_data();
    11e8:	96 d8       	rcall	.-3796   	; 0x316 <wait_for_data>
		var_remote=UDR1;
    11ea:	00 91 ce 00 	lds	r16, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		
		//  Enabling data reception UART0
		sbi(UCSR0B,RXEN0);
    11ee:	e1 ec       	ldi	r30, 0xC1	; 193
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 61       	ori	r24, 0x10	; 16
    11f6:	80 83       	st	Z, r24
    11f8:	d4 cf       	rjmp	.-88     	; 0x11a2 <Log_data+0x122>
				
		return 1;
	}
	
	return 0;
}
    11fa:	de 5f       	subi	r29, 0xFE	; 254
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	bf 90       	pop	r11
    1218:	af 90       	pop	r10
    121a:	9f 90       	pop	r9
    121c:	8f 90       	pop	r8
    121e:	08 95       	ret

00001220 <dataLog>:
	UART_0_puts("Deleting Read messages...\r\n");
	
	return 1;
}

uint8_t dataLog(uint8_t system_on,char* apn,char* Serial_num,uint8_t signal_strength,char* user,char* loc_lat,char* loc_long,uint8_t flag_cooldown){
    1220:	3f 92       	push	r3
    1222:	4f 92       	push	r4
    1224:	5f 92       	push	r5
    1226:	6f 92       	push	r6
    1228:	7f 92       	push	r7
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	d2 50       	subi	r29, 0x02	; 2
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	b8 2e       	mov	r11, r24
    1254:	4b 01       	movw	r8, r22
    1256:	2a 01       	movw	r4, r20
    1258:	32 2e       	mov	r3, r18
    125a:	37 01       	movw	r6, r14
    125c:	0f 2e       	mov	r0, r31
    125e:	f6 e0       	ldi	r31, 0x06	; 6
    1260:	ff 2e       	mov	r15, r31
    1262:	f0 2d       	mov	r31, r0
//	no_loc_flag++;
	
	// To acquire GPRS settings
	data_counter=NumberOfAttempts;  // Number of attempts to be made if APN fetch fails
	while (data_counter!=0){
		flag_fetch_gprs = fetch_gprs();
    1264:	d0 da       	rcall	.-2656   	; 0x806 <fetch_gprs>
		data_counter--;
		if(flag_fetch_gprs==1){  // GPRS settings Fetch successful
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	21 f0       	breq	.+8      	; 0x1272 <dataLog+0x52>
    126a:	fa 94       	dec	r15
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
    126c:	f1 10       	cpse	r15, r1
    126e:	fa cf       	rjmp	.-12     	; 0x1264 <dataLog+0x44>
    1270:	25 c0       	rjmp	.+74     	; 0x12bc <dataLog+0x9c>
	
	//For Testing
	//strcpy(responseimp,"A01=1&A02=2");
	
	// Acquiring data for logging
	get_data(system_on,responseimp,2,signal_strength,user,flag_cooldown);
    1272:	ea 2c       	mov	r14, r10
    1274:	23 2d       	mov	r18, r3
    1276:	42 e0       	ldi	r20, 0x02	; 2
    1278:	be 01       	movw	r22, r28
    127a:	6f 5f       	subi	r22, 0xFF	; 255
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8b 2d       	mov	r24, r11
    1280:	0e 94 66 00 	call	0xcc	; 0xcc <get_data>
    1284:	0f 2e       	mov	r0, r31
    1286:	f6 e0       	ldi	r31, 0x06	; 6
    1288:	ff 2e       	mov	r15, r31
    128a:	f0 2d       	mov	r31, r0
	// Acquiring data for logging and setting APN
	data_counter=NumberOfAttempts;  // Number of attempts to be made if APN set fails
	while (data_counter!=0){
		//Setting APN
		flag_set_apn = set_apn(apn);
    128c:	c4 01       	movw	r24, r8
    128e:	01 db       	rcall	.-2558   	; 0x892 <set_apn>
		data_counter--;
		if(flag_set_apn==1){  // APN set successful
    1290:	81 30       	cpi	r24, 0x01	; 1
    1292:	21 f0       	breq	.+8      	; 0x129c <dataLog+0x7c>
    1294:	fa 94       	dec	r15
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
    1296:	f1 10       	cpse	r15, r1
    1298:	f9 cf       	rjmp	.-14     	; 0x128c <dataLog+0x6c>
    129a:	10 c0       	rjmp	.+32     	; 0x12bc <dataLog+0x9c>
    129c:	16 e0       	ldi	r17, 0x06	; 6
	}
	
	// Data Logging
	data_counter=NumberOfAttempts;  // Number of attempts to be made if Dynamic IP allocation fails
	while (data_counter!=0){
		flag_Log_data = Log_data(responseimp,Serial_num,loc_lat,loc_long);
    129e:	96 01       	movw	r18, r12
    12a0:	a3 01       	movw	r20, r6
    12a2:	b2 01       	movw	r22, r4
    12a4:	ce 01       	movw	r24, r28
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	eb de       	rcall	.-554    	; 0x1080 <Log_data>
		data_counter--;
		if(flag_Log_data==1){  // Data Logging successful
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <dataLog+0x98>
    12ae:	11 50       	subi	r17, 0x01	; 1
			break;
		}
		else if(data_counter==0){  // Number of attempts exhausted
    12b0:	b1 f7       	brne	.-20     	; 0x129e <dataLog+0x7e>
			return 1;
    12b2:	ff 24       	eor	r15, r15
    12b4:	f3 94       	inc	r15
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <dataLog+0x9c>
		}		
	}
	
	return 1;
    12b8:	ff 24       	eor	r15, r15
    12ba:	f3 94       	inc	r15
}
    12bc:	8f 2d       	mov	r24, r15
    12be:	de 5f       	subi	r29, 0xFE	; 254
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	f8 94       	cli
    12c4:	de bf       	out	0x3e, r29	; 62
    12c6:	0f be       	out	0x3f, r0	; 63
    12c8:	cd bf       	out	0x3d, r28	; 61
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	bf 90       	pop	r11
    12dc:	af 90       	pop	r10
    12de:	9f 90       	pop	r9
    12e0:	8f 90       	pop	r8
    12e2:	7f 90       	pop	r7
    12e4:	6f 90       	pop	r6
    12e6:	5f 90       	pop	r5
    12e8:	4f 90       	pop	r4
    12ea:	3f 90       	pop	r3
    12ec:	08 95       	ret

000012ee <main>:
uint8_t wait_for_data();
void get_loc(char* apn,char* loc_lat,char* loc_long);
void reset_SIM900();


void main(){
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	c4 58       	subi	r28, 0x84	; 132
    12f8:	d2 40       	sbci	r29, 0x02	; 2
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
	
	DDRD = 0xFA;
    1304:	8a ef       	ldi	r24, 0xFA	; 250
    1306:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0xFF;
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	84 b9       	out	0x04, r24	; 4
	
	// To prevent timer from triggering
	sbi(PORTB,6);
    130c:	2e 9a       	sbi	0x05, 6	; 5
    130e:	2a ea       	ldi	r18, 0xAA	; 170
    1310:	36 ee       	ldi	r19, 0xE6	; 230
    1312:	86 e9       	ldi	r24, 0x96	; 150
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	21 50       	subi	r18, 0x01	; 1
    1318:	30 40       	sbci	r19, 0x00	; 0
    131a:	80 40       	sbci	r24, 0x00	; 0
    131c:	90 40       	sbci	r25, 0x00	; 0
    131e:	d9 f7       	brne	.-10     	; 0x1316 <main+0x28>
    1320:	00 00       	nop
	
	// Delay for SIM900 initialization <- To investigate why we need this delay here
	_delay_ms(20000);
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0,flag_datalog=0,flag_cooldown=0x89;
    1322:	89 e8       	ldi	r24, 0x89	; 137
    1324:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t dummy,data_counter=0;
	uint16_t e=0,l=0,i=0;
	char Serial_num[20],customer_no[20],apn[30],user[30],responseimp[512],loc_lat[15],loc_long[15];
		
	// Rg Making SIM900 Power ON
	sbi(PORTB,7);
    1326:	2f 9a       	sbi	0x05, 7	; 5
	
	UART_0_init();
    1328:	b1 d0       	rcall	.+354    	; 0x148c <UART_0_init>
	UART_1_init();
    132a:	d4 d0       	rcall	.+424    	; 0x14d4 <UART_1_init>
    132c:	ef ec       	ldi	r30, 0xCF	; 207
    132e:	f7 e0       	ldi	r31, 0x07	; 7
    1330:	31 97       	sbiw	r30, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <main+0x42>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <main+0x48>
    1336:	00 00       	nop
	
	// Enable Timer Interrupt
	_delay_ms(1);
	sbi(TIMSK1,TOIE1);
    1338:	ef e6       	ldi	r30, 0x6F	; 111
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	81 60       	ori	r24, 0x01	; 1
    1340:	80 83       	st	Z, r24
    1342:	8f ec       	ldi	r24, 0xCF	; 207
    1344:	97 e0       	ldi	r25, 0x07	; 7
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <main+0x58>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <main+0x5e>
    134c:	00 00       	nop
	_delay_ms(1);
	
	//  Enabling interrupts
	sei();
    134e:	78 94       	sei
	
	// To read previous system on/off status
	system_on=eeprom_read_byte((uint8_t*)30);
    1350:	8e e1       	ldi	r24, 0x1E	; 30
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	7d d1       	rcall	.+762    	; 0x1650 <eeprom_read_byte>
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	ef e0       	ldi	r30, 0x0F	; 15
    135a:	f7 e2       	ldi	r31, 0x27	; 39
    135c:	31 97       	sbiw	r30, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <main+0x6e>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <main+0x74>
    1362:	00 00       	nop
	_delay_ms(5);
	
	//  Reception Enable 
	sbi(UCSR0B,RXEN0);
    1364:	e1 ec       	ldi	r30, 0xC1	; 193
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	80 61       	ori	r24, 0x10	; 16
    136c:	80 83       	st	Z, r24
	
	// Start Timer
	start_timer();
    136e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <start_timer>

	//  Stop Timer
	cbi(TCCR1B,CS12);
    1372:	e1 e8       	ldi	r30, 0x81	; 129
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8b 7f       	andi	r24, 0xFB	; 251
    137a:	80 83       	st	Z, r24
    137c:	7e 01       	movw	r14, r28
    137e:	f3 e0       	ldi	r31, 0x03	; 3
    1380:	ef 0e       	add	r14, r31
    1382:	f1 1c       	adc	r15, r1

	// To read last updated Serial No. of controller
	e=32;l=0;i=0;
    1384:	00 e2       	ldi	r16, 0x20	; 32
    1386:	10 e0       	ldi	r17, 0x00	; 0
	while (l<11){
		Serial_num[i]=eeprom_read_byte((uint8_t*)e);
    1388:	c8 01       	movw	r24, r16
    138a:	62 d1       	rcall	.+708    	; 0x1650 <eeprom_read_byte>
    138c:	f7 01       	movw	r30, r14
    138e:	81 93       	st	Z+, r24
    1390:	7f 01       	movw	r14, r30
		i++;e++;l++;
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
	//  Stop Timer
	cbi(TCCR1B,CS12);

	// To read last updated Serial No. of controller
	e=32;l=0;i=0;
	while (l<11){
    1396:	0b 32       	cpi	r16, 0x2B	; 43
    1398:	11 05       	cpc	r17, r1
    139a:	b1 f7       	brne	.-20     	; 0x1388 <main+0x9a>
		Serial_num[i]=eeprom_read_byte((uint8_t*)e);
		i++;e++;l++;
	}
	Serial_num[i]='\0';
    139c:	1e 86       	std	Y+14, r1	; 0x0e
    139e:	7e 01       	movw	r14, r28
    13a0:	f7 e1       	ldi	r31, 0x17	; 23
    13a2:	ef 0e       	add	r14, r31
    13a4:	f1 1c       	adc	r15, r1
	
	// To read last updated customer number
	e=16;i=0;
    13a6:	00 e1       	ldi	r16, 0x10	; 16
    13a8:	10 e0       	ldi	r17, 0x00	; 0
	while (i<13){
		customer_no[i]=eeprom_read_byte((uint8_t*)e);
    13aa:	c8 01       	movw	r24, r16
    13ac:	51 d1       	rcall	.+674    	; 0x1650 <eeprom_read_byte>
    13ae:	f7 01       	movw	r30, r14
    13b0:	81 93       	st	Z+, r24
    13b2:	7f 01       	movw	r14, r30
		i++;e++;
    13b4:	0f 5f       	subi	r16, 0xFF	; 255
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	Serial_num[i]='\0';
	
	// To read last updated customer number
	e=16;i=0;
	while (i<13){
    13b8:	0d 31       	cpi	r16, 0x1D	; 29
    13ba:	11 05       	cpc	r17, r1
    13bc:	b1 f7       	brne	.-20     	; 0x13aa <main+0xbc>
		customer_no[i]=eeprom_read_byte((uint8_t*)e);
		i++;e++;
	}
	customer_no[i]='\0';
    13be:	1c a2       	std	Y+36, r1	; 0x24
	
	// Delay for SIM900 initialization <- To investigate why we need this delay here
	_delay_ms(20000);
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0,flag_datalog=0,flag_cooldown=0x89;
	uint8_t dummy,data_counter=0;
    13c0:	b1 2c       	mov	r11, r1
	sbi(PORTB,6);
	
	// Delay for SIM900 initialization <- To investigate why we need this delay here
	_delay_ms(20000);
	
	uint8_t flag_get_apn=0,flag_get_sms=0,system_on,signal_strength=0,flag_datalog=0,flag_cooldown=0x89;
    13c2:	91 2c       	mov	r9, r1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
		while (flag_get_apn!=1){
			flag_get_apn = get_apn(apn,user);
			data_counter++;
			if(data_counter>10){
				// Acquiring data for resetting
				get_data(system_on,responseimp,2,signal_strength,user,&flag_cooldown);
    13c6:	3e 01       	movw	r6, r28
    13c8:	f2 e0       	ldi	r31, 0x02	; 2
    13ca:	6f 0e       	add	r6, r31
    13cc:	71 1c       	adc	r7, r1
    13ce:	01 c0       	rjmp	.+2      	; 0x13d2 <main+0xe4>
    13d0:	91 e0       	ldi	r25, 0x01	; 1
	customer_no[i]='\0';

	while(1){
		
		//Initial 1 Hr period will be cooldown period before starting the Datafreeze Algo
		counter_main++;
    13d2:	80 91 1e 08 	lds	r24, 0x081E	; 0x80081e <__data_end>
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <__data_end>
		if (counter_main>45){
    13dc:	8e 32       	cpi	r24, 0x2E	; 46
    13de:	40 f0       	brcs	.+16     	; 0x13f0 <main+0x102>
			flag_cooldown=0x88;
    13e0:	88 e8       	ldi	r24, 0x88	; 136
    13e2:	8a 83       	std	Y+2, r24	; 0x02
			counter_main=50;
    13e4:	82 e3       	ldi	r24, 0x32	; 50
    13e6:	80 93 1e 08 	sts	0x081E, r24	; 0x80081e <__data_end>
			}else{
			flag_cooldown=0x89;
		}
		
		// To fetch APN
		while (flag_get_apn!=1){
    13ea:	91 30       	cpi	r25, 0x01	; 1
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <main+0x108>
    13ee:	20 c0       	rjmp	.+64     	; 0x1430 <main+0x142>
		counter_main++;
		if (counter_main>45){
			flag_cooldown=0x88;
			counter_main=50;
			}else{
			flag_cooldown=0x89;
    13f0:	89 e8       	ldi	r24, 0x89	; 137
    13f2:	8a 83       	std	Y+2, r24	; 0x02
    13f4:	fa cf       	rjmp	.-12     	; 0x13ea <main+0xfc>
			flag_get_apn = get_apn(apn,user);
			data_counter++;
			if(data_counter>10){
				// Acquiring data for resetting
				get_data(system_on,responseimp,2,signal_strength,user,&flag_cooldown);
				data_counter=0;
    13f6:	d1 2c       	mov	r13, r1
			flag_cooldown=0x89;
		}
		
		// To fetch APN
		while (flag_get_apn!=1){
			flag_get_apn = get_apn(apn,user);
    13f8:	be 01       	movw	r22, r28
    13fa:	67 5b       	subi	r22, 0xB7	; 183
    13fc:	7f 4f       	sbci	r23, 0xFF	; 255
    13fe:	ce 01       	movw	r24, r28
    1400:	8b 96       	adiw	r24, 0x2b	; 43
    1402:	0e 94 ff 01 	call	0x3fe	; 0x3fe <get_apn>
    1406:	f8 2e       	mov	r15, r24
			data_counter++;
    1408:	b3 94       	inc	r11
			if(data_counter>10){
    140a:	2a e0       	ldi	r18, 0x0A	; 10
    140c:	2b 15       	cp	r18, r11
    140e:	68 f4       	brcc	.+26     	; 0x142a <main+0x13c>
				// Acquiring data for resetting
				get_data(system_on,responseimp,2,signal_strength,user,&flag_cooldown);
    1410:	e6 2c       	mov	r14, r6
    1412:	8e 01       	movw	r16, r28
    1414:	07 5b       	subi	r16, 0xB7	; 183
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	29 2d       	mov	r18, r9
    141a:	42 e0       	ldi	r20, 0x02	; 2
    141c:	be 01       	movw	r22, r28
    141e:	69 59       	subi	r22, 0x99	; 153
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	0e 94 66 00 	call	0xcc	; 0xcc <get_data>
				data_counter=0;
    1428:	bd 2c       	mov	r11, r13
			}else{
			flag_cooldown=0x89;
		}
		
		// To fetch APN
		while (flag_get_apn!=1){
    142a:	31 e0       	ldi	r19, 0x01	; 1
    142c:	f3 12       	cpse	r15, r19
    142e:	e4 cf       	rjmp	.-56     	; 0x13f8 <main+0x10a>
		
		//  Get Location
		//get_loc(apn,loc_lat,loc_long);
		
		//  To get signal strength
		signal_strength=get_signalstrength();
    1430:	99 da       	rcall	.-2766   	; 0x964 <get_signalstrength>
    1432:	98 2e       	mov	r9, r24
		
		// To fetch SMS 	
		data_counter=NumberOfAttempts; // Number of attempts to be made if SMS fetch fails
    1434:	0f 2e       	mov	r0, r31
    1436:	f6 e0       	ldi	r31, 0x06	; 6
    1438:	bf 2e       	mov	r11, r31
    143a:	f0 2d       	mov	r31, r0
		while (data_counter!=0){
			flag_get_sms = get_sms(&system_on,customer_no,Serial_num);
    143c:	ae 01       	movw	r20, r28
    143e:	4d 5f       	subi	r20, 0xFD	; 253
    1440:	5f 4f       	sbci	r21, 0xFF	; 255
    1442:	be 01       	movw	r22, r28
    1444:	69 5e       	subi	r22, 0xE9	; 233
    1446:	7f 4f       	sbci	r23, 0xFF	; 255
    1448:	ce 01       	movw	r24, r28
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	d2 da       	rcall	.-2652   	; 0x9f2 <get_sms>
			data_counter--;
    144e:	ba 94       	dec	r11
			if(flag_get_sms==1){  // SMS Fetch successful
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	11 f0       	breq	.+4      	; 0x1458 <main+0x16a>
		//  To get signal strength
		signal_strength=get_signalstrength();
		
		// To fetch SMS 	
		data_counter=NumberOfAttempts; // Number of attempts to be made if SMS fetch fails
		while (data_counter!=0){
    1454:	b1 10       	cpse	r11, r1
    1456:	f2 cf       	rjmp	.-28     	; 0x143c <main+0x14e>
				break;
			}
		}
		
 		// Logging Data
		flag_datalog = dataLog(system_on,apn,Serial_num,signal_strength,user,loc_lat,loc_long,flag_cooldown);
    1458:	aa 80       	ldd	r10, Y+2	; 0x02
    145a:	ce 01       	movw	r24, r28
    145c:	8a 58       	subi	r24, 0x8A	; 138
    145e:	9d 4f       	sbci	r25, 0xFD	; 253
    1460:	6c 01       	movw	r12, r24
    1462:	fe 01       	movw	r30, r28
    1464:	e9 59       	subi	r30, 0x99	; 153
    1466:	fd 4f       	sbci	r31, 0xFD	; 253
    1468:	7f 01       	movw	r14, r30
    146a:	8e 01       	movw	r16, r28
    146c:	07 5b       	subi	r16, 0xB7	; 183
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	29 2d       	mov	r18, r9
    1472:	ae 01       	movw	r20, r28
    1474:	4d 5f       	subi	r20, 0xFD	; 253
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	be 01       	movw	r22, r28
    147a:	65 5d       	subi	r22, 0xD5	; 213
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	cf de       	rcall	.-610    	; 0x1220 <dataLog>
		if(flag_datalog==0){
    1482:	81 11       	cpse	r24, r1
    1484:	a5 cf       	rjmp	.-182    	; 0x13d0 <main+0xe2>
			reset_SIM900();  //  Reset SIM900 to get CGATT=1 sooner
    1486:	9c d9       	rcall	.-3272   	; 0x7c0 <reset_SIM900>
			flag_get_apn=0;  //  Getting APN again since we're resetting the chip
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a3 cf       	rjmp	.-186    	; 0x13d2 <main+0xe4>

0000148c <UART_0_init>:
#include <util/delay.h>
#include "UART_0.h"

void UART_0_init()
{
	UBRR0H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
    148c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
    1490:	83 e3       	ldi	r24, 0x33	; 51
    1492:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0A=0x00;
    1496:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

	UCSR0C=0b10000110;
    149a:	86 e8       	ldi	r24, 0x86	; 134
    149c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR0B=0x18; 
    14a0:	88 e1       	ldi	r24, 0x18	; 24
    14a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14a6:	08 95       	ret

000014a8 <UART_0_putc>:
}
void UART_0_putc(unsigned char data)
{

	while ( !(UCSR0A & (1<<UDRE0)) );  /* Wait for empty transmit buffer */
    14a8:	e0 ec       	ldi	r30, 0xC0	; 192
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	90 81       	ld	r25, Z
    14ae:	95 ff       	sbrs	r25, 5
    14b0:	fd cf       	rjmp	.-6      	; 0x14ac <UART_0_putc+0x4>

	UDR0 = data;         /* Start transmition */
    14b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14b6:	08 95       	ret

000014b8 <UART_0_puts>:

}
void UART_0_puts(char *str)
{
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
    14be:	88 81       	ld	r24, Y
    14c0:	88 23       	and	r24, r24
    14c2:	29 f0       	breq	.+10     	; 0x14ce <UART_0_puts+0x16>
    14c4:	21 96       	adiw	r28, 0x01	; 1
		
		UART_0_putc( *str++ );
    14c6:	f0 df       	rcall	.-32     	; 0x14a8 <UART_0_putc>

}
void UART_0_puts(char *str)
{
	
	while( *str != '\0' ){
    14c8:	89 91       	ld	r24, Y+
    14ca:	81 11       	cpse	r24, r1
    14cc:	fc cf       	rjmp	.-8      	; 0x14c6 <UART_0_puts+0xe>
		
		UART_0_putc( *str++ );
	}
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <UART_1_init>:
#include <util/delay.h>
#include "UART_1.h"

void UART_1_init()
{
	UBRR1H = (unsigned char) (((F_CPU/(BAUD*16UL))-1)>>8) ;
    14d4:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
	UBRR1L = (unsigned char) (F_CPU/(BAUD*16UL))-1;
    14d8:	83 e3       	ldi	r24, 0x33	; 51
    14da:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	
	UCSR1A=0x00;
    14de:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B=0x00;
    14e2:	e9 ec       	ldi	r30, 0xC9	; 201
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	10 82       	st	Z, r1

	UCSR1C=0b10000110;
    14e8:	86 e8       	ldi	r24, 0x86	; 134
    14ea:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
	// Set frame format: asynchronous, 8data, no parity, 1 stop bit
	UCSR1B=0x18;
    14ee:	88 e1       	ldi	r24, 0x18	; 24
    14f0:	80 83       	st	Z, r24
    14f2:	08 95       	ret

000014f4 <UART_1_putc>:
}
void UART_1_putc(unsigned char data)
{

	while ( !(UCSR1A & (1<<UDRE1)) );  /* Wait for empty transmit buffer */
    14f4:	e8 ec       	ldi	r30, 0xC8	; 200
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	90 81       	ld	r25, Z
    14fa:	95 ff       	sbrs	r25, 5
    14fc:	fd cf       	rjmp	.-6      	; 0x14f8 <UART_1_putc+0x4>

	UDR1 = data;         /* Start transmition */
    14fe:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1502:	08 95       	ret

00001504 <UART_1_puts>:

}
void UART_1_puts(char *str)
{
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	ec 01       	movw	r28, r24
	
	while( *str != '\0' ){
    150a:	88 81       	ld	r24, Y
    150c:	88 23       	and	r24, r24
    150e:	29 f0       	breq	.+10     	; 0x151a <UART_1_puts+0x16>
    1510:	21 96       	adiw	r28, 0x01	; 1
		
		UART_1_putc( *str++ );
    1512:	f0 df       	rcall	.-32     	; 0x14f4 <UART_1_putc>

}
void UART_1_puts(char *str)
{
	
	while( *str != '\0' ){
    1514:	89 91       	ld	r24, Y+
    1516:	81 11       	cpse	r24, r1
    1518:	fc cf       	rjmp	.-8      	; 0x1512 <UART_1_puts+0xe>
		
		UART_1_putc( *str++ );
	}
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <atoi>:
    1520:	fc 01       	movw	r30, r24
    1522:	88 27       	eor	r24, r24
    1524:	99 27       	eor	r25, r25
    1526:	e8 94       	clt
    1528:	21 91       	ld	r18, Z+
    152a:	20 32       	cpi	r18, 0x20	; 32
    152c:	e9 f3       	breq	.-6      	; 0x1528 <atoi+0x8>
    152e:	29 30       	cpi	r18, 0x09	; 9
    1530:	10 f0       	brcs	.+4      	; 0x1536 <atoi+0x16>
    1532:	2e 30       	cpi	r18, 0x0E	; 14
    1534:	c8 f3       	brcs	.-14     	; 0x1528 <atoi+0x8>
    1536:	2b 32       	cpi	r18, 0x2B	; 43
    1538:	39 f0       	breq	.+14     	; 0x1548 <atoi+0x28>
    153a:	2d 32       	cpi	r18, 0x2D	; 45
    153c:	31 f4       	brne	.+12     	; 0x154a <atoi+0x2a>
    153e:	68 94       	set
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <atoi+0x28>
    1542:	55 d0       	rcall	.+170    	; 0x15ee <__mulhi_const_10>
    1544:	82 0f       	add	r24, r18
    1546:	91 1d       	adc	r25, r1
    1548:	21 91       	ld	r18, Z+
    154a:	20 53       	subi	r18, 0x30	; 48
    154c:	2a 30       	cpi	r18, 0x0A	; 10
    154e:	c8 f3       	brcs	.-14     	; 0x1542 <atoi+0x22>
    1550:	1e f4       	brtc	.+6      	; 0x1558 <atoi+0x38>
    1552:	90 95       	com	r25
    1554:	81 95       	neg	r24
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	08 95       	ret

0000155a <strcasecmp>:
    155a:	fb 01       	movw	r30, r22
    155c:	dc 01       	movw	r26, r24
    155e:	8d 91       	ld	r24, X+
    1560:	81 34       	cpi	r24, 0x41	; 65
    1562:	1c f0       	brlt	.+6      	; 0x156a <strcasecmp+0x10>
    1564:	8b 35       	cpi	r24, 0x5B	; 91
    1566:	0c f4       	brge	.+2      	; 0x156a <strcasecmp+0x10>
    1568:	80 5e       	subi	r24, 0xE0	; 224
    156a:	61 91       	ld	r22, Z+
    156c:	61 34       	cpi	r22, 0x41	; 65
    156e:	1c f0       	brlt	.+6      	; 0x1576 <strcasecmp+0x1c>
    1570:	6b 35       	cpi	r22, 0x5B	; 91
    1572:	0c f4       	brge	.+2      	; 0x1576 <strcasecmp+0x1c>
    1574:	60 5e       	subi	r22, 0xE0	; 224
    1576:	86 1b       	sub	r24, r22
    1578:	61 11       	cpse	r22, r1
    157a:	89 f3       	breq	.-30     	; 0x155e <strcasecmp+0x4>
    157c:	99 0b       	sbc	r25, r25
    157e:	08 95       	ret

00001580 <strcmp>:
    1580:	fb 01       	movw	r30, r22
    1582:	dc 01       	movw	r26, r24
    1584:	8d 91       	ld	r24, X+
    1586:	01 90       	ld	r0, Z+
    1588:	80 19       	sub	r24, r0
    158a:	01 10       	cpse	r0, r1
    158c:	d9 f3       	breq	.-10     	; 0x1584 <strcmp+0x4>
    158e:	99 0b       	sbc	r25, r25
    1590:	08 95       	ret

00001592 <strcpy>:
    1592:	fb 01       	movw	r30, r22
    1594:	dc 01       	movw	r26, r24
    1596:	01 90       	ld	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	00 20       	and	r0, r0
    159c:	e1 f7       	brne	.-8      	; 0x1596 <strcpy+0x4>
    159e:	08 95       	ret

000015a0 <strncmp>:
    15a0:	fb 01       	movw	r30, r22
    15a2:	dc 01       	movw	r26, r24
    15a4:	41 50       	subi	r20, 0x01	; 1
    15a6:	50 40       	sbci	r21, 0x00	; 0
    15a8:	30 f0       	brcs	.+12     	; 0x15b6 <strncmp+0x16>
    15aa:	8d 91       	ld	r24, X+
    15ac:	01 90       	ld	r0, Z+
    15ae:	80 19       	sub	r24, r0
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <strncmp+0x18>
    15b2:	00 20       	and	r0, r0
    15b4:	b9 f7       	brne	.-18     	; 0x15a4 <strncmp+0x4>
    15b6:	88 1b       	sub	r24, r24
    15b8:	99 0b       	sbc	r25, r25
    15ba:	08 95       	ret

000015bc <strncpy>:
    15bc:	fb 01       	movw	r30, r22
    15be:	dc 01       	movw	r26, r24
    15c0:	41 50       	subi	r20, 0x01	; 1
    15c2:	50 40       	sbci	r21, 0x00	; 0
    15c4:	48 f0       	brcs	.+18     	; 0x15d8 <strncpy+0x1c>
    15c6:	01 90       	ld	r0, Z+
    15c8:	0d 92       	st	X+, r0
    15ca:	00 20       	and	r0, r0
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <strncpy+0x4>
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <strncpy+0x16>
    15d0:	1d 92       	st	X+, r1
    15d2:	41 50       	subi	r20, 0x01	; 1
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	e0 f7       	brcc	.-8      	; 0x15d0 <strncpy+0x14>
    15d8:	08 95       	ret

000015da <__itoa_ncheck>:
    15da:	bb 27       	eor	r27, r27
    15dc:	4a 30       	cpi	r20, 0x0A	; 10
    15de:	31 f4       	brne	.+12     	; 0x15ec <__itoa_ncheck+0x12>
    15e0:	99 23       	and	r25, r25
    15e2:	22 f4       	brpl	.+8      	; 0x15ec <__itoa_ncheck+0x12>
    15e4:	bd e2       	ldi	r27, 0x2D	; 45
    15e6:	90 95       	com	r25
    15e8:	81 95       	neg	r24
    15ea:	9f 4f       	sbci	r25, 0xFF	; 255
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <__utoa_common>

000015ee <__mulhi_const_10>:
    15ee:	7a e0       	ldi	r23, 0x0A	; 10
    15f0:	97 9f       	mul	r25, r23
    15f2:	90 2d       	mov	r25, r0
    15f4:	87 9f       	mul	r24, r23
    15f6:	80 2d       	mov	r24, r0
    15f8:	91 0d       	add	r25, r1
    15fa:	11 24       	eor	r1, r1
    15fc:	08 95       	ret

000015fe <__utoa_ncheck>:
    15fe:	bb 27       	eor	r27, r27

00001600 <__utoa_common>:
    1600:	fb 01       	movw	r30, r22
    1602:	55 27       	eor	r21, r21
    1604:	aa 27       	eor	r26, r26
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	aa 1f       	adc	r26, r26
    160c:	a4 17       	cp	r26, r20
    160e:	10 f0       	brcs	.+4      	; 0x1614 <__utoa_common+0x14>
    1610:	a4 1b       	sub	r26, r20
    1612:	83 95       	inc	r24
    1614:	50 51       	subi	r21, 0x10	; 16
    1616:	b9 f7       	brne	.-18     	; 0x1606 <__utoa_common+0x6>
    1618:	a0 5d       	subi	r26, 0xD0	; 208
    161a:	aa 33       	cpi	r26, 0x3A	; 58
    161c:	08 f0       	brcs	.+2      	; 0x1620 <__utoa_common+0x20>
    161e:	a9 5d       	subi	r26, 0xD9	; 217
    1620:	a1 93       	st	Z+, r26
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	79 f7       	brne	.-34     	; 0x1604 <__utoa_common+0x4>
    1626:	b1 11       	cpse	r27, r1
    1628:	b1 93       	st	Z+, r27
    162a:	11 92       	st	Z+, r1
    162c:	cb 01       	movw	r24, r22
    162e:	00 c0       	rjmp	.+0      	; 0x1630 <strrev>

00001630 <strrev>:
    1630:	dc 01       	movw	r26, r24
    1632:	fc 01       	movw	r30, r24
    1634:	67 2f       	mov	r22, r23
    1636:	71 91       	ld	r23, Z+
    1638:	77 23       	and	r23, r23
    163a:	e1 f7       	brne	.-8      	; 0x1634 <strrev+0x4>
    163c:	32 97       	sbiw	r30, 0x02	; 2
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <strrev+0x18>
    1640:	7c 91       	ld	r23, X
    1642:	6d 93       	st	X+, r22
    1644:	70 83       	st	Z, r23
    1646:	62 91       	ld	r22, -Z
    1648:	ae 17       	cp	r26, r30
    164a:	bf 07       	cpc	r27, r31
    164c:	c8 f3       	brcs	.-14     	; 0x1640 <strrev+0x10>
    164e:	08 95       	ret

00001650 <eeprom_read_byte>:
    1650:	f9 99       	sbic	0x1f, 1	; 31
    1652:	fe cf       	rjmp	.-4      	; 0x1650 <eeprom_read_byte>
    1654:	92 bd       	out	0x22, r25	; 34
    1656:	81 bd       	out	0x21, r24	; 33
    1658:	f8 9a       	sbi	0x1f, 0	; 31
    165a:	99 27       	eor	r25, r25
    165c:	80 b5       	in	r24, 0x20	; 32
    165e:	08 95       	ret

00001660 <eeprom_update_byte>:
    1660:	26 2f       	mov	r18, r22

00001662 <eeprom_update_r18>:
    1662:	f9 99       	sbic	0x1f, 1	; 31
    1664:	fe cf       	rjmp	.-4      	; 0x1662 <eeprom_update_r18>
    1666:	92 bd       	out	0x22, r25	; 34
    1668:	81 bd       	out	0x21, r24	; 33
    166a:	f8 9a       	sbi	0x1f, 0	; 31
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	00 b4       	in	r0, 0x20	; 32
    1670:	02 16       	cp	r0, r18
    1672:	39 f0       	breq	.+14     	; 0x1682 <eeprom_update_r18+0x20>
    1674:	1f ba       	out	0x1f, r1	; 31
    1676:	20 bd       	out	0x20, r18	; 32
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	fa 9a       	sbi	0x1f, 2	; 31
    167e:	f9 9a       	sbi	0x1f, 1	; 31
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	08 95       	ret

00001684 <_exit>:
    1684:	f8 94       	cli

00001686 <__stop_program>:
    1686:	ff cf       	rjmp	.-2      	; 0x1686 <__stop_program>
